var model_four = 
"";

window.M4 = function(engine)
{
    var s = {
        textures:
        {
            "gold3":
            {
                initGlobal: function (global, url, index, loaded)
                {
                    var texture = global.texture = gl.createTexture();
                    var image = global.image = new Image();
                    image.crossOrigin = "Anonymous";
                    image.onload = function ()
                    {
                        gl.bindTexture(gl.TEXTURE_2D, texture);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, this);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
                        gl.generateMipmap(gl.TEXTURE_2D);
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        loaded();
                    };
                    image.src = "//gw.alicdn.com/mt/TB1dntgPXXXXXXfXVXXXXXXXXXX-1024-1024.png?t=" + Date.now();
                },

                doneGlobal: function (global)
                {
                    gl.deleteTexture(global.texture);
                },

                copy: function (global, ostate, b)
                {
                    ostate[b] = global.texture;
                }
            },

            "j":
            {
                initGlobal: function (global, url, index, loaded)
                {
                    var texture = global.texture = gl.createTexture();
                    var image = global.image = new Image();
                    image.crossOrigin = "Anonymous";
                    image.onload = function ()
                    {
                        gl.bindTexture(gl.TEXTURE_2D, texture);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, this);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
                        gl.generateMipmap(gl.TEXTURE_2D);
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        loaded();
                    };
                    image.src = "//gw.alicdn.com/mt/TB1G58fPXXXXXa.XVXXXXXXXXXX-1024-1024.png?t=" + Date.now();
                },

                doneGlobal: function (global)
                {
                    gl.deleteTexture(global.texture);
                },

                copy: function (global, ostate, b)
                {
                    ostate[b] = global.texture;
                }
            },

            "shizitou":
            {
                initGlobal: function (global, url, index, loaded)
                {
                    var texture = global.texture = gl.createTexture();
                    var image = global.image = new Image();
                    image.crossOrigin = "Anonymous";
                    image.onload = function ()
                    {
                        gl.bindTexture(gl.TEXTURE_2D, texture);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, this);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
                        gl.generateMipmap(gl.TEXTURE_2D);
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        loaded();
                    };
                    image.src = "//gw.alicdn.com/mt/TB1uZ0wPXXXXXaRXXXXXXXXXXXX-1024-1024.png?t=" + Date.now();
                },

                doneGlobal: function (global)
                {
                    gl.deleteTexture(global.texture);
                },

                copy: function (global, ostate, b)
                {
                    ostate[b] = global.texture;
                }
            }

        },

        scenes:
        {
            "model_four":
            {
                shaders:
                {
                    // mesh, deformer 'pasted__polySurface238Shape', shader 'pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'
                    m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461:
                    {
                    },
                    // mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'
                    m_polySurface8Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'
                    m_polySurface12Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'
                    m_polySurface11Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface239Shape', shader 'pasted__pasted__lambert5'
                    m_pasted____polySurface239Shape_pasted____pasted____lambert5:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface251Shape', shader 'pasted__pasted__lambert5'
                    m_pasted____polySurface251Shape_pasted____pasted____lambert5:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface252Shape', shader 'pasted__pasted__lambert5'
                    m_pasted____polySurface252Shape_pasted____pasted____lambert5:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface250Shape', shader 'pasted__pasted__lambert5'
                    m_pasted____polySurface250Shape_pasted____pasted____lambert5:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface253Shape', shader 'pasted__pasted__lambert2'
                    m_pasted____polySurface253Shape_pasted____pasted____lambert2:
                    {
                    }
                },

                initGlobal: function(global, data)
                {
                    // mesh, deformer 'pasted__polySurface238Shape', shader 'pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'
                    var vsm_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _c[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.26955e-5, 3.24763e-4, 1.26955e-5) + vec3(-16.8482, 0.921721, -10.2845);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _c[0].xyz * h.x + _c[1].xyz * h.y + _c[2].xyz * h.z + _c[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _d = _c[4].xyz * k.x + _c[5].xyz * k.y + _c[6].xyz * k.z;\n\
    _e = l;\n\
}\n\
';
                    var psm_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461 =
'precision highp float;\n\
uniform float f_f;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = (_d);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f;\n\
    vec3 d = _e;\n\
    vec3 e = d * d;\n\
    vec3 f = c * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 g = c * vec3(0.408248, -0.408248, -0.816497);\n\
    vec3 h = (vec3(0.408248, -0.408248, -0.816497) - (g.x + g.y + g.z) * 2.0 * c) * -(d * inversesqrt(e.x + e.y + e.z));\n\
    vec3 i = max(f.x + f.y + f.z, 0.0) * vec3(1.0, 0.881884, 0.291303) + vec3(pow(max(h.x + h.y + h.z, 0.0), 50.0) * 0.2);\n\
    gl_FragColor = vec4(i, 1.0);\n\
}\n\
';

                    // mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'
                    var vsm_polySurface8Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[52];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec4 _3;\n\
attribute vec4 _4;\n\
attribute vec4 _5;\n\
attribute vec4 _6;\n\
attribute vec2 _7;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.82902e-4, 1.49994e-4, 5.75946e-5) + vec3(-5.99327, 0.0238238, -2.03775);\n\
    vec3 c = _2;\n\
    ivec4 d = ivec4(_3);\n\
    ivec4 e = ivec4(_4);\n\
    vec4 f = _5;\n\
    vec4 g = _6;\n\
    int h = d.x;\n\
    int i = d.y;\n\
    int j = d.z;\n\
    int k = d.w;\n\
    int l = e.x;\n\
    int m = e.y;\n\
    int n = e.z;\n\
    int o = e.w;\n\
    vec4 p = f.x * _b[4 + h] + f.y * _b[4 + i] + f.z * _b[4 + j] + f.w * _b[4 + k] + g.x * _b[4 + l] + g.y * _b[4 + m] + g.z * _b[4 + n] + g.w * _b[4 + o];\n\
    vec4 q = f.x * _b[20 + h] + f.y * _b[20 + i] + f.z * _b[20 + j] + f.w * _b[20 + k] + g.x * _b[20 + l] + g.y * _b[20 + m] + g.z * _b[20 + n] + g.w * _b[20 + o];\n\
    vec4 r = f.x * _b[36 + h] + f.y * _b[36 + i] + f.z * _b[36 + j] + f.w * _b[36 + k] + g.x * _b[36 + l] + g.y * _b[36 + m] + g.z * _b[36 + n] + g.w * _b[36 + o];\n\
    vec3 s = p.xyz * b.x + q.xyz * b.y + r.xyz * b.z + vec3(p.w, q.w, r.w);\n\
    vec3 t = p.xyz * c.x + q.xyz * c.y + r.xyz * c.z;\n\
    vec3 u = p.xyz * a.x + q.xyz * a.y + r.xyz * a.z;\n\
    vec3 v = t.yzx * u.zxy - t.zxy * u.yzx;\n\
    vec3 w = _d[0].xyz * s.x + _d[1].xyz * s.y + _d[2].xyz * s.z + _d[3].xyz;\n\
    gl_Position = _b[0] * w.x + _b[1] * w.y + _b[2] * w.z + _b[3];\n\
    _e = _d[4].xyz * v.x + _d[5].xyz * v.y + _d[6].xyz * v.z;\n\
    _f = _7;\n\
}\n\
';
                    var psm_polySurface8Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'
                    var vsm_polySurface12Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
attribute vec2 _4;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(2.24981e-4, 1.19379e-4, 5.44838e-5) + vec3(-7.37254, 9.60781, -1.96746);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _d[0].xyz * h.x + _d[1].xyz * h.y + _d[2].xyz * h.z + _d[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _e = _d[4].xyz * k.x + _d[5].xyz * k.y + _d[6].xyz * k.z;\n\
    _f = _4;\n\
}\n\
';
                    var psm_polySurface12Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'
                    var vsm_polySurface11Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
attribute vec2 _4;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(2.7848e-5, 2.78256e-5, 5.16374e-6) + vec3(-0.912736, 4.08025, 1.43886);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _d[0].xyz * h.x + _d[1].xyz * h.y + _d[2].xyz * h.z + _d[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _e = _d[4].xyz * k.x + _d[5].xyz * k.y + _d[6].xyz * k.z;\n\
    _f = _4;\n\
}\n\
';
                    var psm_polySurface11Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface239Shape', shader 'pasted__pasted__lambert5'
                    var vsm_pasted____polySurface239Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform vec4 _b[19];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec4 _3;\n\
attribute vec4 _4;\n\
attribute vec2 _5;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.30824e-4, 7.08514e-5, 8.87275e-5) + vec3(-47.171, 13.7101, -0.339166);\n\
    vec3 c = _2;\n\
    ivec4 d = ivec4(_3);\n\
    vec4 e = _4;\n\
    int f = d.x;\n\
    int g = d.y;\n\
    int h = d.z;\n\
    int i = d.w;\n\
    vec4 j = e.x * _b[4 + f] + e.y * _b[4 + g] + e.z * _b[4 + h] + e.w * _b[4 + i];\n\
    vec4 k = e.x * _b[9 + f] + e.y * _b[9 + g] + e.z * _b[9 + h] + e.w * _b[9 + i];\n\
    vec4 l = e.x * _b[14 + f] + e.y * _b[14 + g] + e.z * _b[14 + h] + e.w * _b[14 + i];\n\
    vec3 m = j.xyz * b.x + k.xyz * b.y + l.xyz * b.z + vec3(j.w, k.w, l.w);\n\
    vec3 n = j.xyz * c.x + k.xyz * c.y + l.xyz * c.z;\n\
    vec3 o = j.xyz * a.x + k.xyz * a.y + l.xyz * a.z;\n\
    vec3 p = n.yzx * o.zxy - n.zxy * o.yzx;\n\
    vec3 q = _d[0].xyz * m.x + _d[1].xyz * m.y + _d[2].xyz * m.z + _d[3].xyz;\n\
    gl_Position = _b[0] * q.x + _b[1] * q.y + _b[2] * q.z + _b[3];\n\
    _e = _d[4].xyz * p.x + _d[5].xyz * p.y + _d[6].xyz * p.z;\n\
    _f = _5;\n\
}\n\
';
                    var psm_pasted____polySurface239Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface251Shape', shader 'pasted__pasted__lambert5'
                    var vsm_pasted____polySurface251Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform vec4 _b[10];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec2 _3;\n\
attribute vec2 _4;\n\
attribute vec2 _5;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.54816e-4, 1.51193e-4, 1.72706e-4) + vec3(-47.9573, 14.8268, -5.94376);\n\
    vec3 c = _2;\n\
    ivec2 d = ivec2(_3);\n\
    vec2 e = _4;\n\
    float f = e.x;\n\
    int g = d.x;\n\
    float h = e.y;\n\
    int i = d.y;\n\
    vec4 j = f * _b[4 + g] + h * _b[4 + i];\n\
    vec4 k = f * _b[6 + g] + h * _b[6 + i];\n\
    vec4 l = f * _b[8 + g] + h * _b[8 + i];\n\
    vec3 m = j.xyz * b.x + k.xyz * b.y + l.xyz * b.z + vec3(j.w, k.w, l.w);\n\
    vec3 n = j.xyz * c.x + k.xyz * c.y + l.xyz * c.z;\n\
    vec3 o = j.xyz * a.x + k.xyz * a.y + l.xyz * a.z;\n\
    vec3 p = n.yzx * o.zxy - n.zxy * o.yzx;\n\
    vec3 q = _d[0].xyz * m.x + _d[1].xyz * m.y + _d[2].xyz * m.z + _d[3].xyz;\n\
    gl_Position = _b[0] * q.x + _b[1] * q.y + _b[2] * q.z + _b[3];\n\
    _e = _d[4].xyz * p.x + _d[5].xyz * p.y + _d[6].xyz * p.z;\n\
    _f = _5;\n\
}\n\
';
                    var psm_pasted____polySurface251Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface252Shape', shader 'pasted__pasted__lambert5'
                    var vsm_pasted____polySurface252Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform vec4 _b[16];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec3 _3;\n\
attribute vec3 _4;\n\
attribute vec2 _5;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(3.24856e-5, 3.24856e-5, 2.36168e-5) + vec3(-46.5533, 19.7091, 1.25073);\n\
    vec3 c = _2;\n\
    ivec3 d = ivec3(_3);\n\
    vec3 e = _4;\n\
    float f = e.x;\n\
    int g = d.x;\n\
    float h = e.y;\n\
    int i = d.y;\n\
    float j = e.z;\n\
    int k = d.z;\n\
    vec4 l = f * _b[4 + g] + h * _b[4 + i] + j * _b[4 + k];\n\
    vec4 m = f * _b[8 + g] + h * _b[8 + i] + j * _b[8 + k];\n\
    vec4 n = f * _b[12 + g] + h * _b[12 + i] + j * _b[12 + k];\n\
    vec3 o = l.xyz * b.x + m.xyz * b.y + n.xyz * b.z + vec3(l.w, m.w, n.w);\n\
    vec3 p = l.xyz * c.x + m.xyz * c.y + n.xyz * c.z;\n\
    vec3 q = l.xyz * a.x + m.xyz * a.y + n.xyz * a.z;\n\
    vec3 r = p.yzx * q.zxy - p.zxy * q.yzx;\n\
    vec3 s = _d[0].xyz * o.x + _d[1].xyz * o.y + _d[2].xyz * o.z + _d[3].xyz;\n\
    gl_Position = _b[0] * s.x + _b[1] * s.y + _b[2] * s.z + _b[3];\n\
    _e = _d[4].xyz * r.x + _d[5].xyz * r.y + _d[6].xyz * r.z;\n\
    _f = _5;\n\
}\n\
';
                    var psm_pasted____polySurface252Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface250Shape', shader 'pasted__pasted__lambert5'
                    var vsm_pasted____polySurface250Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform vec4 _b[16];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec3 _3;\n\
attribute vec3 _4;\n\
attribute vec2 _5;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(3.24855e-5, 3.24856e-5, 2.36168e-5) + vec3(-41.3024, 19.7091, 1.25073);\n\
    vec3 c = _2;\n\
    ivec3 d = ivec3(_3);\n\
    vec3 e = _4;\n\
    float f = e.x;\n\
    int g = d.x;\n\
    float h = e.y;\n\
    int i = d.y;\n\
    float j = e.z;\n\
    int k = d.z;\n\
    vec4 l = f * _b[4 + g] + h * _b[4 + i] + j * _b[4 + k];\n\
    vec4 m = f * _b[8 + g] + h * _b[8 + i] + j * _b[8 + k];\n\
    vec4 n = f * _b[12 + g] + h * _b[12 + i] + j * _b[12 + k];\n\
    vec3 o = l.xyz * b.x + m.xyz * b.y + n.xyz * b.z + vec3(l.w, m.w, n.w);\n\
    vec3 p = l.xyz * c.x + m.xyz * c.y + n.xyz * c.z;\n\
    vec3 q = l.xyz * a.x + m.xyz * a.y + n.xyz * a.z;\n\
    vec3 r = p.yzx * q.zxy - p.zxy * q.yzx;\n\
    vec3 s = _d[0].xyz * o.x + _d[1].xyz * o.y + _d[2].xyz * o.z + _d[3].xyz;\n\
    gl_Position = _b[0] * s.x + _b[1] * s.y + _b[2] * s.z + _b[3];\n\
    _e = _d[4].xyz * r.x + _d[5].xyz * r.y + _d[6].xyz * r.z;\n\
    _f = _5;\n\
}\n\
';
                    var psm_pasted____polySurface250Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface253Shape', shader 'pasted__pasted__lambert2'
                    var vsm_pasted____polySurface253Shape_pasted____pasted____lambert2 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
attribute vec2 _4;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(2.51952e-4, 1.05323e-4, 1.39804e-4) + vec3(-8.24074, 14.7457, -4.67718);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _d[0].xyz * h.x + _d[1].xyz * h.y + _d[2].xyz * h.z + _d[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _e = _d[4].xyz * k.x + _d[5].xyz * k.y + _d[6].xyz * k.z;\n\
    _f = _4;\n\
}\n\
';
                    var psm_pasted____polySurface253Shape_pasted____pasted____lambert2 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    var d = new engine.Decompressor(new Uint8Array(data, 0));
                    global.buffers = 
                    [
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(45),
                        d.decompress16(45),
                        d.decompress16(45),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(45),
                        d.decompress16(45),
                        d.decompress16(45),
                        d.decompress16(45),
                        d.decompress16(45),
                        d.decompress16(45),
                        d.decompress16(45),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(44),
                        d.decompress16(43),
                        d.decompress16(43),
                        d.decompress16(43),
                        d.decompress16(43),
                        d.decompress16(43),
                        d.decompress16(43),
                        d.decompress16(43),
                    ];
                    var b1 = d.decompress8(574);
                    var b2 = d.decompress16(246);
                    var vb = new Float32Array(820);
                    for (var i = 0, j = 0; i < 82; ++i, j += 10)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 82];
                        vb[j + 2] = b2[i + 164];
                        vb[j + 3] = (b1[i + 0] << 24) * 4.65661e-10;
                        vb[j + 4] = (b1[i + 82] << 24) * 4.65661e-10;
                        vb[j + 5] = (b1[i + 164] << 24) * 4.65661e-10;
                        vb[j + 6] = (b1[i + 246] << 24) * 4.65661e-10;
                        vb[j + 7] = (b1[i + 328] << 24) * 4.65661e-10;
                        vb[j + 8] = (b1[i + 410] << 24) * 4.65661e-10;
                        vb[j + 9] = b1[i + 492];
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(19922);
                    var b2 = d.decompress16(14230);
                    var vb = new Float32Array(34152);
                    for (var i = 0, j = 0; i < 2846; ++i, j += 12)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 2846];
                        vb[j + 2] = b2[i + 5692];
                        vb[j + 3] = b2[i + 8538] * 1.5259e-5;
                        vb[j + 4] = b2[i + 11384] * 1.5259e-5;
                        vb[j + 5] = (b1[i + 0] << 24) * 4.65661e-10;
                        vb[j + 6] = (b1[i + 2846] << 24) * 4.65661e-10;
                        vb[j + 7] = (b1[i + 5692] << 24) * 4.65661e-10;
                        vb[j + 8] = (b1[i + 8538] << 24) * 4.65661e-10;
                        vb[j + 9] = (b1[i + 11384] << 24) * 4.65661e-10;
                        vb[j + 10] = (b1[i + 14230] << 24) * 4.65661e-10;
                        vb[j + 11] = b1[i + 17076];
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(12680);
                    var b2 = d.decompress16(6340);
                    var vb = new Float32Array(19020);
                    for (var i = 0, j = 0; i < 1268; ++i, j += 15)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 1268];
                        vb[j + 2] = b2[i + 2536];
                        vb[j + 3] = b2[i + 3804] * 1.5259e-5;
                        vb[j + 4] = b2[i + 5072] * 1.5259e-5;
                        vb[j + 5] = (b1[i + 0] << 24) * 4.65661e-10;
                        vb[j + 6] = (b1[i + 1268] << 24) * 4.65661e-10;
                        vb[j + 7] = (b1[i + 2536] << 24) * 4.65661e-10;
                        vb[j + 8] = (b1[i + 3804] << 24) * 4.65661e-10;
                        vb[j + 9] = (b1[i + 5072] << 24) * 4.65661e-10;
                        vb[j + 10] = (b1[i + 6340] << 24) * 4.65661e-10;
                        vb[j + 11] = b1[i + 7608];
                        vb[j + 12] = b1[i + 8876];
                        vb[j + 13] = b1[i + 10144] * 0.00392156;
                        vb[j + 14] = b1[i + 11412] * 0.00392156;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer2 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(6264);
                    var b2 = d.decompress16(2610);
                    var vb = new Float32Array(8874);
                    for (var i = 0, j = 0; i < 522; ++i, j += 17)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 522];
                        vb[j + 2] = b2[i + 1044];
                        vb[j + 3] = b2[i + 1566] * 1.5259e-5;
                        vb[j + 4] = b2[i + 2088] * 1.5259e-5;
                        vb[j + 5] = b1[i + 0];
                        vb[j + 6] = b1[i + 522];
                        vb[j + 7] = b1[i + 1044];
                        vb[j + 8] = b1[i + 1566] * 0.00392156;
                        vb[j + 9] = b1[i + 2088] * 0.00392156;
                        vb[j + 10] = b1[i + 2610] * 0.00392156;
                        vb[j + 11] = (b1[i + 3132] << 24) * 4.65661e-10;
                        vb[j + 12] = (b1[i + 3654] << 24) * 4.65661e-10;
                        vb[j + 13] = (b1[i + 4176] << 24) * 4.65661e-10;
                        vb[j + 14] = (b1[i + 4698] << 24) * 4.65661e-10;
                        vb[j + 15] = (b1[i + 5220] << 24) * 4.65661e-10;
                        vb[j + 16] = (b1[i + 5742] << 24) * 4.65661e-10;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer3 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(4522);
                    var b2 = d.decompress16(1615);
                    var vb = new Float32Array(6137);
                    for (var i = 0, j = 0; i < 323; ++i, j += 19)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 323];
                        vb[j + 2] = b2[i + 646];
                        vb[j + 3] = b2[i + 969] * 1.5259e-5;
                        vb[j + 4] = b2[i + 1292] * 1.5259e-5;
                        vb[j + 5] = b1[i + 0];
                        vb[j + 6] = b1[i + 323];
                        vb[j + 7] = b1[i + 646];
                        vb[j + 8] = b1[i + 969];
                        vb[j + 9] = b1[i + 1292] * 0.00392156;
                        vb[j + 10] = b1[i + 1615] * 0.00392156;
                        vb[j + 11] = b1[i + 1938] * 0.00392156;
                        vb[j + 12] = b1[i + 2261] * 0.00392156;
                        vb[j + 13] = (b1[i + 2584] << 24) * 4.65661e-10;
                        vb[j + 14] = (b1[i + 2907] << 24) * 4.65661e-10;
                        vb[j + 15] = (b1[i + 3230] << 24) * 4.65661e-10;
                        vb[j + 16] = (b1[i + 3553] << 24) * 4.65661e-10;
                        vb[j + 17] = (b1[i + 3876] << 24) * 4.65661e-10;
                        vb[j + 18] = (b1[i + 4199] << 24) * 4.65661e-10;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer4 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(40876);
                    var b2 = d.decompress16(9290);
                    var vb = new Float32Array(50166);
                    for (var i = 0, j = 0; i < 1858; ++i, j += 27)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 1858];
                        vb[j + 2] = b2[i + 3716];
                        vb[j + 3] = b2[i + 5574] * 1.5259e-5;
                        vb[j + 4] = b2[i + 7432] * 1.5259e-5;
                        vb[j + 5] = b1[i + 0];
                        vb[j + 6] = b1[i + 1858];
                        vb[j + 7] = b1[i + 3716];
                        vb[j + 8] = b1[i + 5574];
                        vb[j + 9] = b1[i + 7432];
                        vb[j + 10] = b1[i + 9290];
                        vb[j + 11] = b1[i + 11148];
                        vb[j + 12] = b1[i + 13006];
                        vb[j + 13] = b1[i + 14864] * 0.00392156;
                        vb[j + 14] = b1[i + 16722] * 0.00392156;
                        vb[j + 15] = b1[i + 18580] * 0.00392156;
                        vb[j + 16] = b1[i + 20438] * 0.00392156;
                        vb[j + 17] = b1[i + 22296] * 0.00392156;
                        vb[j + 18] = b1[i + 24154] * 0.00392156;
                        vb[j + 19] = b1[i + 26012] * 0.00392156;
                        vb[j + 20] = b1[i + 27870] * 0.00392156;
                        vb[j + 21] = (b1[i + 29728] << 24) * 4.65661e-10;
                        vb[j + 22] = (b1[i + 31586] << 24) * 4.65661e-10;
                        vb[j + 23] = (b1[i + 33444] << 24) * 4.65661e-10;
                        vb[j + 24] = (b1[i + 35302] << 24) * 4.65661e-10;
                        vb[j + 25] = (b1[i + 37160] << 24) * 4.65661e-10;
                        vb[j + 26] = (b1[i + 39018] << 24) * 4.65661e-10;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer5 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);

                    var b = d.decompress16(27180);
                    var ib = new Uint16Array(27180);
                    for (var i = 0, j = 0; i < 9060; ++i, j += 3)
                    {
                        ib[j] = b[i];
                        ib[j + 1] = b[i + 9060];
                        ib[j + 2] = b[i + 18120];
                    }
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0 = gl.createBuffer());
                    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, ib, gl.STATIC_DRAW);

                    var shaders = global.shaders;
                    {
                        var shader = shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461, "mesh, deformer 'pasted__polySurface238Shape', shader 'pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461, "mesh, deformer 'pasted__polySurface238Shape', shader 'pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        shader._b = gl.getUniformLocation(program, '_b');
                        shader._c = gl.getUniformLocation(program, '_c');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_polySurface8Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface8Shape_pasted____lambert4, "mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface8Shape_pasted____lambert4, "mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.bindAttribLocation(program, 6, '_6');
                        gl.bindAttribLocation(program, 7, '_7');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_polySurface12Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface12Shape_pasted____lambert4, "mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface12Shape_pasted____lambert4, "mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_polySurface11Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface11Shape_pasted____lambert4, "mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface11Shape_pasted____lambert4, "mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface239Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface239Shape', shader 'pasted__pasted__lambert5'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface239Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface239Shape', shader 'pasted__pasted__lambert5'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface251Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface251Shape', shader 'pasted__pasted__lambert5'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface251Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface251Shape', shader 'pasted__pasted__lambert5'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface252Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface252Shape', shader 'pasted__pasted__lambert5'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface252Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface252Shape', shader 'pasted__pasted__lambert5'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface250Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface250Shape', shader 'pasted__pasted__lambert5'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface250Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface250Shape', shader 'pasted__pasted__lambert5'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface253Shape_pasted____pasted____lambert2, "mesh, deformer 'pasted__polySurface253Shape', shader 'pasted__pasted__lambert2'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface253Shape_pasted____pasted____lambert2, "mesh, deformer 'pasted__polySurface253Shape', shader 'pasted__pasted__lambert2'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                },

                doneGlobal: function(global)
                {
                    gl.deleteBuffer(global.shaderInputBuffer0);
                    gl.deleteBuffer(global.shaderInputBuffer1);
                    gl.deleteBuffer(global.shaderInputBuffer2);
                    gl.deleteBuffer(global.shaderInputBuffer3);
                    gl.deleteBuffer(global.shaderInputBuffer4);
                    gl.deleteBuffer(global.shaderInputBuffer5);
                    gl.deleteBuffer(global.indexBuffer0);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.program);
                    gl.deleteProgram(global.shaders.m_polySurface8Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_polySurface12Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_polySurface11Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2.program);
                },

                render: {
                    m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var transfer = instance.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _c = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _c[0] = G;
                        _c[1] = H;
                        _c[2] = I;
                        _c[4] = J;
                        _c[5] = K;
                        _c[6] = L;
                        _c[8] = M;
                        _c[9] = N;
                        _c[10] = O;
                        _c[12] = q * m + u * n + y * o + C * p;
                        _c[13] = r * m + v * n + z * o + D * p;
                        _c[14] = s * m + w * n + A * o + E * p;
                        _c[16] = P;
                        _c[17] = Q;
                        _c[18] = R;
                        _c[20] = N * I - O * H;
                        _c[21] = O * G - M * I;
                        _c[22] = M * H - N * G;
                        _c[24] = H * L - I * K;
                        _c[25] = I * J - G * L;
                        _c[26] = G * K - H * J;
                        gl.uniform4fv(shader._c, _c);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_polySurface8Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface8Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface8Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_polySurface12Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface12Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface12Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_polySurface11Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface11Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface11Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface239Shape_pasted____pasted____lambert5_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5;
                        var transfer = instance.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface251Shape_pasted____pasted____lambert5_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5;
                        var transfer = instance.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface252Shape_pasted____pasted____lambert5_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5;
                        var transfer = instance.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface250Shape_pasted____pasted____lambert5_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5;
                        var transfer = instance.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface253Shape_pasted____pasted____lambert2_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2;
                        var transfer = instance.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    }
                },
                draw: {
                    a: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer2);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 60, 20);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 60, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 60, 32);
                        gl.vertexAttribPointer(3, 2, gl.FLOAT, false, 60, 44);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 60, 52);
                        gl.vertexAttribPointer(5, 2, gl.FLOAT, false, 60, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 2304, gl.UNSIGNED_SHORT, 0);
                    },
                    b: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 48, 20);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 48, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 48, 32);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 48, 44);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 48, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 720, gl.UNSIGNED_SHORT, 4608);
                    },
                    c: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer5);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 108, 96);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 108, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 108, 84);
                        gl.vertexAttribPointer(3, 4, gl.FLOAT, false, 108, 36);
                        gl.vertexAttribPointer(4, 4, gl.FLOAT, false, 108, 20);
                        gl.vertexAttribPointer(5, 4, gl.FLOAT, false, 108, 52);
                        gl.vertexAttribPointer(6, 4, gl.FLOAT, false, 108, 68);
                        gl.vertexAttribPointer(7, 2, gl.FLOAT, false, 108, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 7398, gl.UNSIGNED_SHORT, 6048);
                    },
                    d: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer3);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 68, 44);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 68, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 68, 56);
                        gl.vertexAttribPointer(3, 3, gl.FLOAT, false, 68, 20);
                        gl.vertexAttribPointer(4, 3, gl.FLOAT, false, 68, 32);
                        gl.vertexAttribPointer(5, 2, gl.FLOAT, false, 68, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 1500, gl.UNSIGNED_SHORT, 20844);
                    },
                    e: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 40, 12);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 40, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 40, 24);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 40, 36);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 240, gl.UNSIGNED_SHORT, 23844);
                    },
                    f: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 48, 9824);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 48, 9792);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 48, 9812);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 48, 9836);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 48, 9804);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 1404, gl.UNSIGNED_SHORT, 24324);
                    },
                    g: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer3);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 68, 17792);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 68, 17748);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 68, 17804);
                        gl.vertexAttribPointer(3, 3, gl.FLOAT, false, 68, 17768);
                        gl.vertexAttribPointer(4, 3, gl.FLOAT, false, 68, 17780);
                        gl.vertexAttribPointer(5, 2, gl.FLOAT, false, 68, 17760);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 1500, gl.UNSIGNED_SHORT, 27132);
                    },
                    h: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer4);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 76, 64);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 76, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 76, 52);
                        gl.vertexAttribPointer(3, 4, gl.FLOAT, false, 76, 20);
                        gl.vertexAttribPointer(4, 4, gl.FLOAT, false, 76, 36);
                        gl.vertexAttribPointer(5, 2, gl.FLOAT, false, 76, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 1338, gl.UNSIGNED_SHORT, 30132);
                    },
                    i: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 48, 35456);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 48, 35424);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 48, 35444);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 48, 35468);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 48, 35436);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 10776, gl.UNSIGNED_SHORT, 32808);
                    }
                },

                createInstance: function(global, renderer)
                {
                    var instance = 
                    {
                        global: global,
                        renderer: renderer,
                        ids: new Uint32Array(9),
                        fstate: new Float32Array(1), ostate: [], 
                        funiforms: new Float32Array(420), ouniforms: [], 
                        shaders:
                        {
                            m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461:
                            {
                                uniform: {_b: new Float32Array(28)},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_polySurface8Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(208), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_polySurface12Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(28), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_polySurface11Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(28), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface239Shape_pasted____pasted____lambert5:
                            {
                                uniform: {_b: new Float32Array(76), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface251Shape_pasted____pasted____lambert5:
                            {
                                uniform: {_b: new Float32Array(40), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface252Shape_pasted____pasted____lambert5:
                            {
                                uniform: {_b: new Float32Array(64), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface250Shape_pasted____pasted____lambert5:
                            {
                                uniform: {_b: new Float32Array(64), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface253Shape_pasted____pasted____lambert2:
                            {
                                uniform: {_b: new Float32Array(28), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            }
                        },
                        itransforms: new Int32Array(9), ftransforms: new Float32Array(144), 
                        fboundingBoxes: new Float32Array(54), 
                        sceneSequence: 0,
                        deformerSequence: 0,
                        renderSequence: 0,
                        viewProjectionMatrix: new Float32Array(16),
                        fu0_28: new Float32Array(28),
                    };

                    var particlePools = instance.particlePools = {};

                    instance.update = function()
                    {
                        ++instance.sceneSequence;

                        var fstate = instance.fstate;
                        var ostate = instance.ostate;
                        var buffers = global.buffers;
                        var funiforms = instance.funiforms;
                        var ouniforms = instance.ouniforms;
                        var itransforms = instance.itransforms;
                        var ftransforms = instance.ftransforms;
                        var fboundingBoxes = instance.fboundingBoxes;

                        var a = fstate[0];
                        var b;
                        if (a < 0.0416666)
                        {
                            b = 0.0264669;
                        }
                        else
                        {
                            if (a < 1.66666)
                            {
                                b = (engine.eCT(buffers[18], a * 24.0 + -1.19209e-7) * 8.35762e-6 + -0.00516233) * 0.5;
                            }
                            else
                            {
                                b = 0.271277;
                            }
                        }
                        var c = fstate[0];
                        var d;
                        if (c < 0.0416666)
                        {
                            d = 0.0;
                        }
                        else
                        {
                            if (c < 1.66666)
                            {
                                d = (engine.eCT(buffers[17], c * 24.0 + -1.19209e-7) * 1.6305e-7 + -0.0106855) * 0.5;
                            }
                            else
                            {
                                d = -0.00534275;
                            }
                        }
                        var e = fstate[0];
                        var f;
                        if (e < 0.0416666)
                        {
                            f = 0.00498912;
                        }
                        else
                        {
                            if (e < 1.66666)
                            {
                                f = (engine.eCT(buffers[16], e * 24.0 + -1.19209e-7) * 7.23637e-8 + 0.0056191) * 0.5;
                            }
                            else
                            {
                                f = 0.00280955;
                            }
                        }
                        var g = fstate[0];
                        var h;
                        if (g < 0.0416666)
                        {
                            h = -0.321499;
                        }
                        else
                        {
                            if (g < 1.66666)
                            {
                                h = engine.eCT(buffers[20], g * 24.0 + -1.19209e-7) * 3.43277e-6 + 14.8653 + -15.1868;
                            }
                            else
                            {
                                h = -0.0965004;
                            }
                        }
                        var i = fstate[0];
                        var j;
                        if (i < 0.0416666)
                        {
                            j = 4.46803;
                        }
                        else
                        {
                            if (i < 1.66666)
                            {
                                j = engine.eCT(buffers[19], i * 24.0 + -1.19209e-7) * 2.07935e-6 + 4.34502;
                            }
                            else
                            {
                                j = 4.37861;
                            }
                        }
                        var k = Math.cos(f);
                        var l = Math.sin(f);
                        var m = Math.cos(d);
                        var n = Math.sin(d);
                        var o = Math.cos(b);
                        var p = Math.sin(b);
                        var q = o * m * l - p * n * k;
                        var r = o * n * k + p * m * l;
                        var s = o * -n * l + p * m * k;
                        var t = o * m * k - p * -n * l;
                        var u = q * 0.512508 + t * 0.48717 + s * 0.512508 - r * 0.48717;
                        var v = r * 0.512508 + t * 0.512508 + q * 0.48717 - s * 0.48717;
                        var w = s * 0.512508 + t * 0.48717 + r * 0.48717 - q * 0.512508;
                        var x = t * 0.512508 - q * 0.48717 - r * 0.512508 - s * 0.48717;
                        var y = u * u;
                        var z = v * v;
                        var A = w * w;
                        var B = x * x;
                        var C = u * v;
                        var D = v * w;
                        var E = u * w;
                        var F = x * u;
                        var G = x * v;
                        var H = x * w;
                        var I = B + y - z - A;
                        var J = (C + H) * 2.0;
                        var K = (E - G) * 2.0;
                        var L = (C - H) * 2.0;
                        var M = B - y + z - A;
                        var N = (D + F) * 2.0;
                        var O = (E + G) * 2.0;
                        var P = (D - F) * 2.0;
                        var Q = B - y - z + A;
                        var R = fstate[0];
                        var S;
                        if (R < 0.0416666)
                        {
                            S = 0.0992735;
                        }
                        else
                        {
                            if (R < 1.66666)
                            {
                                S = (engine.eCT(buffers[13], R * 24.0 + -1.19209e-7) * 1.10977e-5 + 0.0992012) * 0.5;
                            }
                            else
                            {
                                S = 0.400622;
                            }
                        }
                        var T = fstate[0];
                        var U;
                        if (T < 0.0416666)
                        {
                            U = 0.069929;
                        }
                        else
                        {
                            if (T < 1.66666)
                            {
                                U = (engine.eCT(buffers[12], T * 24.0 + -1.19209e-7) * 1.4087e-7 + 0.139858) * 0.5;
                            }
                            else
                            {
                                U = 0.073007;
                            }
                        }
                        var V = fstate[0];
                        var W;
                        if (V < 0.0416666)
                        {
                            W = 0.00124471;
                        }
                        else
                        {
                            if (V < 1.66666)
                            {
                                W = (engine.eCT(buffers[11], V * 24.0 + -1.19209e-7) * 8.99114e-7 + -0.00258495) * 0.5;
                            }
                            else
                            {
                                W = 0.0226746;
                            }
                        }
                        var X = Math.cos(W);
                        var Y = Math.sin(W);
                        var Z = Math.cos(U);
                        var ab = Math.sin(U);
                        var bb = Math.cos(S);
                        var cb = Math.sin(S);
                        var db = bb * Z * Y - cb * ab * X;
                        var eb = bb * ab * X + cb * Z * Y;
                        var fb = bb * -ab * Y + cb * Z * X;
                        var gb = bb * Z * X - cb * -ab * Y;
                        var hb = db * 3.12052e-18 + gb * 0.0509619 + fb * 0.998701 - eb * 6.11528e-17;
                        var ib = eb * 3.12052e-18 + gb * 0.998701 + db * 6.11528e-17 - fb * 0.0509619;
                        var jb = fb * 3.12052e-18 + gb * 6.11528e-17 + eb * 0.0509619 - db * 0.998701;
                        var kb = gb * 3.12052e-18 - db * 0.0509619 - eb * 0.998701 - fb * 6.11528e-17;
                        var lb = hb * hb;
                        var mb = ib * ib;
                        var nb = jb * jb;
                        var ob = kb * kb;
                        var pb = hb * ib;
                        var qb = ib * jb;
                        var rb = hb * jb;
                        var sb = kb * hb;
                        var tb = kb * ib;
                        var ub = kb * jb;
                        var vb = ob + lb - mb - nb;
                        var wb = (pb + ub) * 2.0;
                        var xb = (rb - tb) * 2.0;
                        var yb = (pb - ub) * 2.0;
                        var zb = ob - lb + mb - nb;
                        var Ab = (qb + sb) * 2.0;
                        var Bb = (rb + tb) * 2.0;
                        var Cb = (qb - sb) * 2.0;
                        var Db = ob - lb - mb + nb;
                        var Eb = I * vb + L * wb + O * xb;
                        var Fb = J * vb + M * wb + P * xb;
                        var Gb = K * vb + N * wb + Q * xb;
                        var Hb = I * yb + L * zb + O * Ab;
                        var Ib = J * yb + M * zb + P * Ab;
                        var Jb = K * yb + N * zb + Q * Ab;
                        var Kb = I * Bb + L * Cb + O * Db;
                        var Lb = J * Bb + M * Cb + P * Db;
                        var Mb = K * Bb + N * Cb + Q * Db;
                        var Nb = I * -0.387872 + L * 0.17076 + O * 1.01941 + -0.0150702;
                        var Ob = J * -0.387872 + M * 0.17076 + P * 1.01941 + j;
                        var Pb = K * -0.387872 + N * 0.17076 + Q * 1.01941 + h;
                        var Qb = fstate[0];
                        var Rb;
                        if (Qb < 0.0416666)
                        {
                            Rb = -0.0168225;
                        }
                        else
                        {
                            if (Qb < 1.70833)
                            {
                                Rb = (engine.eCT(buffers[23], Qb * 24.0) * 2.64864e-6 + -0.0666696) * 0.5;
                            }
                            else
                            {
                                Rb = -0.0333348;
                            }
                        }
                        var Sb = fstate[0];
                        var Tb;
                        if (Sb < 0.0416666)
                        {
                            Tb = 0.0070148;
                        }
                        else
                        {
                            if (Sb < 1.70833)
                            {
                                Tb = (engine.eCT(buffers[22], Sb * 24.0) * 6.38157e-8 + 0.0122917) * 0.5;
                            }
                            else
                            {
                                Tb = 0.00823695;
                            }
                        }
                        var Ub = fstate[0];
                        var Vb;
                        if (Ub < 0.0416666)
                        {
                            Vb = 0.0122167;
                        }
                        else
                        {
                            if (Ub < 1.70833)
                            {
                                Vb = (engine.eCT(buffers[21], Ub * 24.0) * 3.81897e-8 + 0.0227796) * 0.5;
                            }
                            else
                            {
                                Vb = 0.0113898;
                            }
                        }
                        var Wb = Math.cos(Vb);
                        var Xb = Math.sin(Vb);
                        var Yb = Math.cos(Tb);
                        var Zb = Math.sin(Tb);
                        var ac = Math.cos(Rb);
                        var bc = Math.sin(Rb);
                        var cc = ac * Yb * Xb - bc * Zb * Wb;
                        var dc = ac * Zb * Wb + bc * Yb * Xb;
                        var ec = ac * -Zb * Xb + bc * Yb * Wb;
                        var fc = ac * Yb * Wb - bc * -Zb * Xb;
                        var gc = cc * 6.1194e-17 + fc * 0.999373 + ec * 0.0353989 - dc * 2.16756e-18;
                        var hc = dc * 6.1194e-17 + fc * 0.0353989 + cc * 2.16756e-18 - ec * 0.999373;
                        var ic = ec * 6.1194e-17 + fc * 2.16756e-18 + dc * 0.999373 - cc * 0.0353989;
                        var jc = fc * 6.1194e-17 - cc * 0.999373 - dc * 0.0353989 - ec * 2.16756e-18;
                        var kc = gc * gc;
                        var lc = hc * hc;
                        var mc = ic * ic;
                        var nc = jc * jc;
                        var oc = gc * hc;
                        var pc = hc * ic;
                        var qc = gc * ic;
                        var rc = jc * gc;
                        var sc = jc * hc;
                        var tc = jc * ic;
                        var uc = nc + kc - lc - mc;
                        var vc = (oc + tc) * 2.0;
                        var wc = (qc - sc) * 2.0;
                        var xc = (oc - tc) * 2.0;
                        var yc = nc - kc + lc - mc;
                        var zc = (pc + rc) * 2.0;
                        var Ac = (qc + sc) * 2.0;
                        var Bc = (pc - rc) * 2.0;
                        var Cc = nc - kc - lc + mc;
                        var Dc = I * uc + L * vc + O * wc;
                        var Ec = J * uc + M * vc + P * wc;
                        var Fc = K * uc + N * vc + Q * wc;
                        var Gc = I * xc + L * yc + O * zc;
                        var Hc = J * xc + M * yc + P * zc;
                        var Ic = K * xc + N * yc + Q * zc;
                        var Jc = I * Ac + L * Bc + O * Cc;
                        var Kc = J * Ac + M * Bc + P * Cc;
                        var Lc = K * Ac + N * Bc + Q * Cc;
                        var Mc = I * 2.50573 + -0.0150702;
                        var Nc = J * 2.50573 + j;
                        var Oc = K * 2.50573 + h;
                        var Pc = fstate[0];
                        var Qc;
                        if (Pc < 0.0416666)
                        {
                            Qc = 0.0;
                        }
                        else
                        {
                            if (Pc < 1.70833)
                            {
                                Qc = (engine.eCT(buffers[27], Pc * 24.0) * 2.25094e-5 + -0.464668) * 0.5;
                            }
                            else
                            {
                                Qc = -0.075236;
                            }
                        }
                        var Rc = fstate[0];
                        var Sc;
                        if (Rc < 0.0416666)
                        {
                            Sc = 0.0;
                        }
                        else
                        {
                            if (Rc < 1.70833)
                            {
                                Sc = (engine.eCT(buffers[26], Rc * 24.0) * 2.0055e-5 + -1.3143) * 0.5;
                            }
                            else
                            {
                                Sc = -0.63876;
                            }
                        }
                        var Tc = fstate[0];
                        var Uc;
                        if (Tc < 0.0416666)
                        {
                            Uc = 0.0;
                        }
                        else
                        {
                            if (Tc < 1.70833)
                            {
                                Uc = (engine.eCT(buffers[25], Tc * 24.0) * 2.37449e-5 + -1.11879) * 0.5;
                            }
                            else
                            {
                                Uc = 0.0497286;
                            }
                        }
                        var Vc = Math.cos(Uc);
                        var Wc = Math.sin(Uc);
                        var Xc = Math.cos(Sc);
                        var Yc = Math.sin(Sc);
                        var Zc = Math.cos(Qc);
                        var ad = Math.sin(Qc);
                        var bd = Zc * Xc * Wc - ad * Yc * Vc;
                        var cd = Zc * Yc * Vc + ad * Xc * Wc;
                        var dd = Zc * -Yc * Wc + ad * Xc * Vc;
                        var ed = Zc * Xc * Vc - ad * -Yc * Wc;
                        var fd = bd * 0.427131 + ed * 0.415701 + dd * 0.572007 - cd * -0.563523;
                        var gd = cd * 0.427131 + ed * 0.572007 + bd * -0.563523 - dd * 0.415701;
                        var hd = dd * 0.427131 + ed * -0.563523 + cd * 0.415701 - bd * 0.572007;
                        var id = ed * 0.427131 - bd * 0.415701 - cd * 0.572007 - dd * -0.563523;
                        var jd = fd * fd;
                        var kd = gd * gd;
                        var ld = hd * hd;
                        var md = id * id;
                        var nd = fd * gd;
                        var od = gd * hd;
                        var pd = fd * hd;
                        var qd = id * fd;
                        var rd = id * gd;
                        var sd = id * hd;
                        var td = md + jd - kd - ld;
                        var ud = (nd + sd) * 2.0;
                        var vd = (pd - rd) * 2.0;
                        var wd = (nd - sd) * 2.0;
                        var xd = md - jd + kd - ld;
                        var yd = (od + qd) * 2.0;
                        var zd = (pd + rd) * 2.0;
                        var Ad = (od - qd) * 2.0;
                        var Bd = md - jd - kd + ld;
                        var Cd = Dc * td + Gc * ud + Jc * vd;
                        var Dd = Ec * td + Hc * ud + Kc * vd;
                        var Ed = Fc * td + Ic * ud + Lc * vd;
                        var Fd = Dc * wd + Gc * xd + Jc * yd;
                        var Gd = Ec * wd + Hc * xd + Kc * yd;
                        var Hd = Fc * wd + Ic * xd + Lc * yd;
                        var Id = Dc * zd + Gc * Ad + Jc * Bd;
                        var Jd = Ec * zd + Hc * Ad + Kc * Bd;
                        var Kd = Fc * zd + Ic * Ad + Lc * Bd;
                        var Ld = Dc * 1.62023 + Gc * -0.207425 + Jc * -1.51967 + Mc;
                        var Md = Ec * 1.62023 + Hc * -0.207425 + Kc * -1.51967 + Nc;
                        var Nd = Fc * 1.62023 + Ic * -0.207425 + Lc * -1.51967 + Oc;
                        var Od = fstate[0];
                        var Pd;
                        if (Od < 0.0416666)
                        {
                            Pd = 0.0164549;
                        }
                        else
                        {
                            if (Od < 1.66666)
                            {
                                Pd = (engine.eCT(buffers[30], Od * 24.0 + -1.19209e-7) * 2.03085e-6 + 0.0329098) * 0.5;
                            }
                            else
                            {
                                Pd = 0.0830005;
                            }
                        }
                        var Qd = fstate[0];
                        var Rd;
                        if (Qd < 0.0416666)
                        {
                            Rd = -0.12228;
                        }
                        else
                        {
                            if (Qd < 1.66666)
                            {
                                Rd = (engine.eCT(buffers[29], Qd * 24.0 + -1.19209e-7) * 1.50918e-5 + -1.2336) * 0.5;
                            }
                            else
                            {
                                Rd = -0.6168;
                            }
                        }
                        var Sd = fstate[0];
                        var Td;
                        if (Sd < 0.0416666)
                        {
                            Td = -0.0155438;
                        }
                        else
                        {
                            if (Sd < 1.66666)
                            {
                                Td = (engine.eCT(buffers[28], Sd * 24.0 + -1.19209e-7) * 1.91841e-6 + -0.15681) * 0.5;
                            }
                            else
                            {
                                Td = -0.078405;
                            }
                        }
                        var Ud = Math.cos(Td);
                        var Vd = Math.sin(Td);
                        var Wd = Math.cos(Rd);
                        var Xd = Math.sin(Rd);
                        var Yd = Math.cos(Pd);
                        var Zd = Math.sin(Pd);
                        var ae = Yd * Wd * Vd - Zd * Xd * Ud;
                        var be = Yd * Xd * Ud + Zd * Wd * Vd;
                        var ce = Yd * -Xd * Vd + Zd * Wd * Ud;
                        var de = Yd * Wd * Ud - Zd * -Xd * Vd;
                        var ee = ae * 0.999927 - be * -0.0120529;
                        var fe = be * 0.999927 + ae * -0.0120529;
                        var ge = ce * 0.999927 + de * -0.0120529;
                        var he = de * 0.999927 - ce * -0.0120529;
                        var ie = ee * ee;
                        var je = fe * fe;
                        var ke = ge * ge;
                        var le = he * he;
                        var me = ee * fe;
                        var ne = fe * ge;
                        var oe = ee * ge;
                        var pe = he * ee;
                        var qe = he * fe;
                        var re = he * ge;
                        var se = le + ie - je - ke;
                        var te = (me + re) * 2.0;
                        var ue = (oe - qe) * 2.0;
                        var ve = (me - re) * 2.0;
                        var we = le - ie + je - ke;
                        var xe = (ne + pe) * 2.0;
                        var ye = (oe + qe) * 2.0;
                        var ze = (ne - pe) * 2.0;
                        var Ae = le - ie - je + ke;
                        var Be = Cd * se + Fd * te + Id * ue;
                        var Ce = Dd * se + Gd * te + Jd * ue;
                        var De = Ed * se + Hd * te + Kd * ue;
                        var Ee = Cd * ve + Fd * we + Id * xe;
                        var Fe = Dd * ve + Gd * we + Jd * xe;
                        var Ge = Ed * ve + Hd * we + Kd * xe;
                        var He = Cd * ye + Fd * ze + Id * Ae;
                        var Ie = Dd * ye + Gd * ze + Jd * Ae;
                        var Je = Ed * ye + Hd * ze + Kd * Ae;
                        var Ke = Cd * 1.98668 + Id * -0.219212 + Ld;
                        var Le = Dd * 1.98668 + Jd * -0.219212 + Md;
                        var Me = Ed * 1.98668 + Kd * -0.219212 + Nd;
                        var Ne = Be * 0.949902 + Ee * 0.312548;
                        var Oe = Ce * 0.949902 + Fe * 0.312548;
                        var Pe = De * 0.949902 + Ge * 0.312548;
                        var Qe = Be * -0.312548 + Ee * 0.949902;
                        var Re = Ce * -0.312548 + Fe * 0.949902;
                        var Se = De * -0.312548 + Ge * 0.949902;
                        var Te = He * 1.0;
                        var Ue = Ie * 1.0;
                        var Ve = Je * 1.0;
                        var We = fstate[0];
                        var Xe;
                        if (We < 0.0416666)
                        {
                            Xe = 0.0553265;
                        }
                        else
                        {
                            if (We < 1.66666)
                            {
                                Xe = (engine.eCT(buffers[2], We * 24.0 + -1.19209e-7) * 1.16149e-5 + -0.0185456) * 0.5;
                            }
                            else
                            {
                                Xe = 0.357496;
                            }
                        }
                        var Ye = fstate[0];
                        var Ze;
                        if (Ye < 0.0416666)
                        {
                            Ze = 0.069195;
                        }
                        else
                        {
                            if (Ye < 1.66666)
                            {
                                Ze = (engine.eCT(buffers[1], Ye * 24.0 + -1.19209e-7) * 1.91169e-7 + 0.126987) * 0.5;
                            }
                            else
                            {
                                Ze = 0.0693275;
                            }
                        }
                        var af = fstate[0];
                        var bf;
                        if (af < 0.0416666)
                        {
                            bf = -0.0429469;
                        }
                        else
                        {
                            if (af < 1.66666)
                            {
                                bf = (engine.eCT(buffers[0], af * 24.0 + -1.19209e-7) * 9.60542e-7 + -0.100927) * 0.5;
                            }
                            else
                            {
                                bf = -0.0247601;
                            }
                        }
                        var cf = Math.cos(bf);
                        var df = Math.sin(bf);
                        var ef = Math.cos(Ze);
                        var ff = Math.sin(Ze);
                        var gf = Math.cos(Xe);
                        var hf = Math.sin(Xe);
                        var jf = gf * ef * df - hf * ff * cf;
                        var kf = gf * ff * cf + hf * ef * df;
                        var lf = gf * -ff * df + hf * ef * cf;
                        var mf = gf * ef * cf - hf * -ff * df;
                        var nf = jf * 6.11528e-17 + mf * -0.998701 + lf * 0.0509619 - kf * -3.12052e-18;
                        var of = kf * 6.11528e-17 + mf * 0.0509619 + jf * -3.12052e-18 - lf * -0.998701;
                        var pf = lf * 6.11528e-17 + mf * -3.12052e-18 + kf * -0.998701 - jf * 0.0509619;
                        var qf = mf * 6.11528e-17 - jf * -0.998701 - kf * 0.0509619 - lf * -3.12052e-18;
                        var rf = nf * nf;
                        var sf = of * of;
                        var tf = pf * pf;
                        var uf = qf * qf;
                        var vf = nf * of;
                        var wf = of * pf;
                        var xf = nf * pf;
                        var yf = qf * nf;
                        var zf = qf * of;
                        var Af = qf * pf;
                        var Bf = uf + rf - sf - tf;
                        var Cf = (vf + Af) * 2.0;
                        var Df = (xf - zf) * 2.0;
                        var Ef = (vf - Af) * 2.0;
                        var Ff = uf - rf + sf - tf;
                        var Gf = (wf + yf) * 2.0;
                        var Hf = (xf + zf) * 2.0;
                        var If = (wf - yf) * 2.0;
                        var Jf = uf - rf - sf + tf;
                        var Kf = I * Bf + L * Cf + O * Df;
                        var Lf = J * Bf + M * Cf + P * Df;
                        var Mf = K * Bf + N * Cf + Q * Df;
                        var Nf = I * Ef + L * Ff + O * Gf;
                        var Of = J * Ef + M * Ff + P * Gf;
                        var Pf = K * Ef + N * Ff + Q * Gf;
                        var Qf = I * Hf + L * If + O * Jf;
                        var Rf = J * Hf + M * If + P * Jf;
                        var Sf = K * Hf + N * If + Q * Jf;
                        var Tf = I * -0.387873 + L * 0.170759 + O * -1.01942 + -0.0150702;
                        var Uf = J * -0.387873 + M * 0.170759 + P * -1.01942 + j;
                        var Vf = K * -0.387873 + N * 0.170759 + Q * -1.01942 + h;
                        var Wf = fstate[0];
                        var Xf;
                        if (Wf < 0.0416666)
                        {
                            Xf = 0.0264717;
                        }
                        else
                        {
                            if (Wf < 1.66666)
                            {
                                Xf = (engine.eCT(buffers[4], Wf * 24.0 + -1.19209e-7) * 2.04535e-6 + 0.0205855) * 0.5;
                            }
                            else
                            {
                                Xf = 0.0678095;
                            }
                        }
                        var Yf = fstate[0];
                        var Zf;
                        if (Yf < 0.0416666)
                        {
                            Zf = 0.0644045;
                        }
                        else
                        {
                            if (Yf < 1.66666)
                            {
                                Zf = (engine.eCT(buffers[3], Yf * 24.0 + -1.19209e-7) * 4.97628e-6 + 0.050084) * 0.5;
                            }
                            else
                            {
                                Zf = 0.164979;
                            }
                        }
                        var ag = Math.cos(Zf);
                        var bg = Math.sin(Zf);
                        var cg = Math.cos(Xf);
                        var dg = Math.sin(Xf);
                        var eg = cg * ag * 2.61159e-8 - dg * bg;
                        var fg = cg * bg + dg * ag * 2.61159e-8;
                        var gg = cg * -bg * 2.61159e-8 + dg * ag;
                        var hg = cg * ag - dg * -bg * 2.61159e-8;
                        var ig = eg * 0.551999 + hg * -0.823689 + gg * 0.107778 - fg * -0.0722282;
                        var jg = fg * 0.551999 + hg * 0.107778 + eg * -0.0722282 - gg * -0.823689;
                        var kg = gg * 0.551999 + hg * -0.0722282 + fg * -0.823689 - eg * 0.107778;
                        var lg = hg * 0.551999 - eg * -0.823689 - fg * 0.107778 - gg * -0.0722282;
                        var mg = ig * ig;
                        var ng = jg * jg;
                        var og = kg * kg;
                        var pg = lg * lg;
                        var qg = ig * jg;
                        var rg = jg * kg;
                        var sg = ig * kg;
                        var tg = lg * ig;
                        var ug = lg * jg;
                        var vg = lg * kg;
                        var wg = pg + mg - ng - og;
                        var xg = (qg + vg) * 2.0;
                        var yg = (sg - ug) * 2.0;
                        var zg = (qg - vg) * 2.0;
                        var Ag = pg - mg + ng - og;
                        var Bg = (rg + tg) * 2.0;
                        var Cg = (sg + ug) * 2.0;
                        var Dg = (rg - tg) * 2.0;
                        var Eg = pg - mg - ng + og;
                        var Fg = Kf * wg + Nf * xg + Qf * yg;
                        var Gg = Lf * wg + Of * xg + Rf * yg;
                        var Hg = Mf * wg + Pf * xg + Sf * yg;
                        var Ig = Kf * zg + Nf * Ag + Qf * Bg;
                        var Jg = Lf * zg + Of * Ag + Rf * Bg;
                        var Kg = Mf * zg + Pf * Ag + Sf * Bg;
                        var Lg = Kf * Cg + Nf * Dg + Qf * Eg;
                        var Mg = Lf * Cg + Of * Dg + Rf * Eg;
                        var Ng = Mf * Cg + Pf * Dg + Sf * Eg;
                        var Og = Kf * -1.95064 + Nf * -6.69052e-7 + Qf * -1.01012e-6 + Tf;
                        var Pg = Lf * -1.95064 + Of * -6.69052e-7 + Rf * -1.01012e-6 + Uf;
                        var Qg = Mf * -1.95064 + Pf * -6.69052e-7 + Sf * -1.01012e-6 + Vf;
                        var Rg = Fg * 2.98023e-8 + Ig * 0.92492 + Lg * 0.380159;
                        var Sg = Gg * 2.98023e-8 + Jg * 0.92492 + Mg * 0.380159;
                        var Tg = Hg * 2.98023e-8 + Kg * 0.92492 + Ng * 0.380159;
                        var Ug = Fg * -0.994219 + Ig * 0.0408141 + Lg * -0.0993;
                        var Vg = Gg * -0.994219 + Jg * 0.0408141 + Mg * -0.0993;
                        var Wg = Hg * -0.994219 + Kg * 0.0408141 + Ng * -0.0993;
                        var Xg = Fg * -0.10736 + Ig * -0.377961 + Lg * 0.919574;
                        var Yg = Gg * -0.10736 + Jg * -0.377961 + Mg * 0.919574;
                        var Zg = Hg * -0.10736 + Kg * -0.377961 + Ng * 0.919574;
                        var ah = fstate[0];
                        var bh;
                        if (ah < 0.0416666)
                        {
                            bh = 0.0;
                        }
                        else
                        {
                            if (ah < 1.70833)
                            {
                                bh = (engine.eCT(buffers[7], ah * 24.0) * 2.45248e-5 + -0.752755) * 0.5;
                            }
                            else
                            {
                                bh = -0.268279;
                            }
                        }
                        var ch = fstate[0];
                        var dh;
                        if (ch < 0.0416666)
                        {
                            dh = 0.0;
                        }
                        else
                        {
                            if (ch < 1.70833)
                            {
                                dh = (engine.eCT(buffers[6], ch * 24.0) * 2.05777e-5 + -1.34856) * 0.5;
                            }
                            else
                            {
                                dh = -0.63401;
                            }
                        }
                        var eh = fstate[0];
                        var fh;
                        if (eh < 0.0416666)
                        {
                            fh = 0.0;
                        }
                        else
                        {
                            if (eh < 1.70833)
                            {
                                fh = (engine.eCT(buffers[5], eh * 24.0) * 2.50726e-5 + -1.04672) * 0.5;
                            }
                            else
                            {
                                fh = 0.186194;
                            }
                        }
                        var gh = Math.cos(fh);
                        var hh = Math.sin(fh);
                        var ih = Math.cos(dh);
                        var jh = Math.sin(dh);
                        var kh = Math.cos(bh);
                        var lh = Math.sin(bh);
                        var mh = kh * ih * hh - lh * jh * gh;
                        var nh = kh * jh * gh + lh * ih * hh;
                        var oh = kh * -jh * hh + lh * ih * gh;
                        var ph = kh * ih * gh - lh * -jh * hh;
                        var qh = mh * 0.563523 + ph * -0.572007 + oh * 0.415701 - nh * 0.427131;
                        var rh = nh * 0.563523 + ph * 0.415701 + mh * 0.427131 - oh * -0.572007;
                        var sh = oh * 0.563523 + ph * 0.427131 + nh * -0.572007 - mh * 0.415701;
                        var th = ph * 0.563523 - mh * -0.572007 - nh * 0.415701 - oh * 0.427131;
                        var uh = qh * qh;
                        var vh = rh * rh;
                        var wh = sh * sh;
                        var xh = th * th;
                        var yh = qh * rh;
                        var zh = rh * sh;
                        var Ah = qh * sh;
                        var Bh = th * qh;
                        var Ch = th * rh;
                        var Dh = th * sh;
                        var Eh = xh + uh - vh - wh;
                        var Fh = (yh + Dh) * 2.0;
                        var Gh = (Ah - Ch) * 2.0;
                        var Hh = (yh - Dh) * 2.0;
                        var Ih = xh - uh + vh - wh;
                        var Jh = (zh + Bh) * 2.0;
                        var Kh = (Ah + Ch) * 2.0;
                        var Lh = (zh - Bh) * 2.0;
                        var Mh = xh - uh - vh + wh;
                        var Nh = Dc * Eh + Gc * Fh + Jc * Gh;
                        var Oh = Ec * Eh + Hc * Fh + Kc * Gh;
                        var Ph = Fc * Eh + Ic * Fh + Lc * Gh;
                        var Qh = Dc * Hh + Gc * Ih + Jc * Jh;
                        var Rh = Ec * Hh + Hc * Ih + Kc * Jh;
                        var Sh = Fc * Hh + Ic * Ih + Lc * Jh;
                        var Th = Dc * Kh + Gc * Lh + Jc * Mh;
                        var Uh = Ec * Kh + Hc * Lh + Kc * Mh;
                        var Vh = Fc * Kh + Ic * Lh + Lc * Mh;
                        var Wh = Dc * 1.62023 + Gc * -0.207425 + Jc * 1.51968 + Mc;
                        var Xh = Ec * 1.62023 + Hc * -0.207425 + Kc * 1.51968 + Nc;
                        var Yh = Fc * 1.62023 + Ic * -0.207425 + Lc * 1.51968 + Oc;
                        var Zh = fstate[0];
                        var ai;
                        if (Zh < 0.0416666)
                        {
                            ai = 0.0164549;
                        }
                        else
                        {
                            if (Zh < 1.66666)
                            {
                                ai = (engine.eCT(buffers[10], Zh * 24.0 + -1.19209e-7) * 2.03085e-6 + 0.0329098) * 0.5;
                            }
                            else
                            {
                                ai = 0.0830005;
                            }
                        }
                        var bi = fstate[0];
                        var ci;
                        if (bi < 0.0416666)
                        {
                            ci = -0.12228;
                        }
                        else
                        {
                            if (bi < 1.66666)
                            {
                                ci = (engine.eCT(buffers[9], bi * 24.0 + -1.19209e-7) * 1.50918e-5 + -1.2336) * 0.5;
                            }
                            else
                            {
                                ci = -0.6168;
                            }
                        }
                        var di = fstate[0];
                        var ei;
                        if (di < 0.0416666)
                        {
                            ei = -0.0155438;
                        }
                        else
                        {
                            if (di < 1.66666)
                            {
                                ei = (engine.eCT(buffers[8], di * 24.0 + -1.19209e-7) * 1.91841e-6 + -0.15681) * 0.5;
                            }
                            else
                            {
                                ei = -0.078405;
                            }
                        }
                        var fi = Math.cos(ei);
                        var gi = Math.sin(ei);
                        var hi = Math.cos(ci);
                        var ii = Math.sin(ci);
                        var ji = Math.cos(ai);
                        var ki = Math.sin(ai);
                        var li = ji * hi * gi - ki * ii * fi;
                        var mi = ji * ii * fi + ki * hi * gi;
                        var ni = ji * -ii * gi + ki * hi * fi;
                        var oi = ji * hi * fi - ki * -ii * gi;
                        var pi = li * 0.999927 - mi * -0.0120529;
                        var qi = mi * 0.999927 + li * -0.0120529;
                        var ri = ni * 0.999927 + oi * -0.0120529;
                        var si = oi * 0.999927 - ni * -0.0120529;
                        var ti = pi * pi;
                        var ui = qi * qi;
                        var vi = ri * ri;
                        var wi = si * si;
                        var xi = pi * qi;
                        var yi = qi * ri;
                        var zi = pi * ri;
                        var Ai = si * pi;
                        var Bi = si * qi;
                        var Ci = si * ri;
                        var Di = wi + ti - ui - vi;
                        var Ei = (xi + Ci) * 2.0;
                        var Fi = (zi - Bi) * 2.0;
                        var Gi = (xi - Ci) * 2.0;
                        var Hi = wi - ti + ui - vi;
                        var Ii = (yi + Ai) * 2.0;
                        var Ji = (zi + Bi) * 2.0;
                        var Ki = (yi - Ai) * 2.0;
                        var Li = wi - ti - ui + vi;
                        var Mi = Nh * Di + Qh * Ei + Th * Fi;
                        var Ni = Oh * Di + Rh * Ei + Uh * Fi;
                        var Oi = Ph * Di + Sh * Ei + Vh * Fi;
                        var Pi = Nh * Gi + Qh * Hi + Th * Ii;
                        var Qi = Oh * Gi + Rh * Hi + Uh * Ii;
                        var Ri = Ph * Gi + Sh * Hi + Vh * Ii;
                        var Si = Nh * Ji + Qh * Ki + Th * Li;
                        var Ti = Oh * Ji + Rh * Ki + Uh * Li;
                        var Ui = Ph * Ji + Sh * Ki + Vh * Li;
                        var Vi = Nh * -1.98667 + Qh * -4.66514e-6 + Th * 0.219212 + Wh;
                        var Wi = Oh * -1.98667 + Rh * -4.66514e-6 + Uh * 0.219212 + Xh;
                        var Xi = Ph * -1.98667 + Sh * -4.66514e-6 + Vh * 0.219212 + Yh;
                        var Yi = Mi * 0.949902 + Pi * 0.312548;
                        var Zi = Ni * 0.949902 + Qi * 0.312548;
                        var aj = Oi * 0.949902 + Ri * 0.312548;
                        var bj = Mi * -0.312548 + Pi * 0.949902;
                        var cj = Ni * -0.312548 + Qi * 0.949902;
                        var dj = Oi * -0.312548 + Ri * 0.949902;
                        var ej = Si * 1.0;
                        var fj = Ti * 1.0;
                        var gj = Ui * 1.0;
                        var hj = fstate[0];
                        var ij;
                        if (hj < 0.0416666)
                        {
                            ij = 0.0419749;
                        }
                        else
                        {
                            if (hj < 1.66666)
                            {
                                ij = (engine.eCT(buffers[15], hj * 24.0 + -1.19209e-7) * 1.66574e-6 + 0.0721972) * 0.5;
                            }
                            else
                            {
                                ij = 0.0820865;
                            }
                        }
                        var jj = fstate[0];
                        var kj;
                        if (jj < 0.0416666)
                        {
                            kj = 0.102124;
                        }
                        else
                        {
                            if (jj < 1.66666)
                            {
                                kj = (engine.eCT(buffers[14], jj * 24.0 + -1.19209e-7) * 4.0527e-6 + 0.175654) * 0.5;
                            }
                            else
                            {
                                kj = 0.199715;
                            }
                        }
                        var lj = Math.cos(kj);
                        var mj = Math.sin(kj);
                        var nj = Math.cos(ij);
                        var oj = Math.sin(ij);
                        var pj = nj * lj * 3.9166e-19 - oj * mj;
                        var qj = nj * mj + oj * lj * 3.9166e-19;
                        var rj = nj * -mj * 3.9166e-19 + oj * lj;
                        var sj = nj * lj - oj * -mj * 3.9166e-19;
                        var tj = pj * 0.551999 + sj * -0.823689 + rj * 0.107778 - qj * -0.0722282;
                        var uj = qj * 0.551999 + sj * 0.107778 + pj * -0.0722282 - rj * -0.823689;
                        var vj = rj * 0.551999 + sj * -0.0722282 + qj * -0.823689 - pj * 0.107778;
                        var wj = sj * 0.551999 - pj * -0.823689 - qj * 0.107778 - rj * -0.0722282;
                        var xj = tj * tj;
                        var yj = uj * uj;
                        var zj = vj * vj;
                        var Aj = wj * wj;
                        var Bj = tj * uj;
                        var Cj = uj * vj;
                        var Dj = tj * vj;
                        var Ej = wj * tj;
                        var Fj = wj * uj;
                        var Gj = wj * vj;
                        var Hj = Aj + xj - yj - zj;
                        var Ij = (Bj + Gj) * 2.0;
                        var Jj = (Dj - Fj) * 2.0;
                        var Kj = (Bj - Gj) * 2.0;
                        var Lj = Aj - xj + yj - zj;
                        var Mj = (Cj + Ej) * 2.0;
                        var Nj = (Dj + Fj) * 2.0;
                        var Oj = (Cj - Ej) * 2.0;
                        var Pj = Aj - xj - yj + zj;
                        var Qj = Eb * Hj + Hb * Ij + Kb * Jj;
                        var Rj = Fb * Hj + Ib * Ij + Lb * Jj;
                        var Sj = Gb * Hj + Jb * Ij + Mb * Jj;
                        var Tj = Eb * Kj + Hb * Lj + Kb * Mj;
                        var Uj = Fb * Kj + Ib * Lj + Lb * Mj;
                        var Vj = Gb * Kj + Jb * Lj + Mb * Mj;
                        var Wj = Eb * Nj + Hb * Oj + Kb * Pj;
                        var Xj = Fb * Nj + Ib * Oj + Lb * Pj;
                        var Yj = Gb * Nj + Jb * Oj + Mb * Pj;
                        var Zj = Eb * 1.95064 + Nb;
                        var ak = Fb * 1.95064 + Ob;
                        var bk = Gb * 1.95064 + Pb;
                        var ck = Qj * 2.98023e-8 + Tj * 0.92492 + Wj * 0.380159;
                        var dk = Rj * 2.98023e-8 + Uj * 0.92492 + Xj * 0.380159;
                        var ek = Sj * 2.98023e-8 + Vj * 0.92492 + Yj * 0.380159;
                        var fk = Qj * -0.994219 + Tj * 0.0408141 + Wj * -0.0993;
                        var gk = Rj * -0.994219 + Uj * 0.0408141 + Xj * -0.0993;
                        var hk = Sj * -0.994219 + Vj * 0.0408141 + Yj * -0.0993;
                        var ik = Qj * -0.10736 + Tj * -0.377961 + Wj * 0.919574;
                        var jk = Rj * -0.10736 + Uj * -0.377961 + Xj * 0.919574;
                        var kk = Sj * -0.10736 + Vj * -0.377961 + Yj * 0.919574;
                        var lk = fstate[0];
                        var mk;
                        if (lk < 0.0416666)
                        {
                            mk = 0.0265784;
                        }
                        else
                        {
                            if (lk < 1.70833)
                            {
                                mk = (engine.eCT(buffers[24], lk * 24.0) * 7.28596e-6 + 0.0531569) * 0.5;
                            }
                            else
                            {
                                mk = 0.178515;
                            }
                        }
                        var nk = Math.cos(mk);
                        var ok = Math.sin(mk);
                        var pk = ok * 0.999964 + nk * -0.00850668;
                        var qk = nk * 0.999964 - ok * -0.00850668;
                        var rk = pk * pk;
                        var sk = qk * qk;
                        var tk = qk * pk;
                        var uk = sk - rk;
                        var vk = tk * 2.0;
                        var wk = -tk * 2.0;
                        var xk = sk - rk;
                        var yk = sk + rk;
                        var zk = Dc * uk + Gc * vk;
                        var Ak = Ec * uk + Hc * vk;
                        var Bk = Fc * uk + Ic * vk;
                        var Ck = Dc * wk + Gc * xk;
                        var Dk = Ec * wk + Hc * xk;
                        var Ek = Fc * wk + Ic * xk;
                        var Fk = Jc * yk;
                        var Gk = Kc * yk;
                        var Hk = Lc * yk;
                        var Ik = Dc * 2.70253 + Mc;
                        var Jk = Ec * 2.70253 + Nc;
                        var Kk = Fc * 2.70253 + Oc;
                        var Lk = zk * 2.98023e-8 + Fk * -1.0;
                        var Mk = Ak * 2.98023e-8 + Gk * -1.0;
                        var Nk = Bk * 2.98023e-8 + Hk * -1.0;
                        var Ok = zk * 0.999311 + Ck * 0.0371375;
                        var Pk = Ak * 0.999311 + Dk * 0.0371375;
                        var Qk = Bk * 0.999311 + Ek * 0.0371375;
                        var Rk = zk * 0.0371375 + Ck * -0.999311;
                        var Sk = Ak * 0.0371375 + Dk * -0.999311;
                        var Tk = Bk * 0.0371375 + Ek * -0.999311;
                        var Uk = zk * 5.37141 + Ik;
                        var Vk = Ak * 5.37141 + Jk;
                        var Wk = Bk * 5.37141 + Kk;
                        var Xk = Dc * 0.523974 + Gc * 0.482544 + Jc * 0.701856;
                        var Yk = Ec * 0.523974 + Hc * 0.482544 + Kc * 0.701856;
                        var Zk = Fc * 0.523974 + Ic * 0.482544 + Lc * 0.701856;
                        var al = Dc * 0.775487 + Gc * 0.0705017 + Jc * -0.627415;
                        var bl = Ec * 0.775487 + Hc * 0.0705017 + Kc * -0.627415;
                        var cl = Fc * 0.775487 + Ic * 0.0705017 + Lc * -0.627415;
                        var dl = Dc * -0.352237 + Gc * 0.87303 + Jc * -0.337265;
                        var el = Ec * -0.352237 + Hc * 0.87303 + Kc * -0.337265;
                        var fl = Fc * -0.352237 + Ic * 0.87303 + Lc * -0.337265;
                        var gl = Dc * 0.762846 + Gc * 4.21252 + Jc * 0.217048 + Mc;
                        var hl = Ec * 0.762846 + Hc * 4.21252 + Kc * 0.217048 + Nc;
                        var il = Fc * 0.762846 + Ic * 4.21252 + Lc * 0.217048 + Oc;
                        var jl = Xk * 0.997853 + dl * 0.065476;
                        var kl = Yk * 0.997853 + el * 0.065476;
                        var ll = Zk * 0.997853 + fl * 0.065476;
                        var ml = Xk * 0.065476 + dl * -0.997853;
                        var nl = Yk * 0.065476 + el * -0.997853;
                        var ol = Zk * 0.065476 + fl * -0.997853;
                        var pl = al * 0.999999;
                        var ql = bl * 0.999999;
                        var rl = cl * 0.999999;
                        var sl = Xk * 10.1794 + dl * -0.0290091 + gl;
                        var tl = Yk * 10.1794 + el * -0.0290091 + hl;
                        var ul = Zk * 10.1794 + fl * -0.0290091 + il;
                        var vl = jl * -0.999973 + ml * -0.00727042;
                        var wl = kl * -0.999973 + nl * -0.00727042;
                        var xl = ll * -0.999973 + ol * -0.00727042;
                        var yl = pl * 1.0;
                        var zl = ql * 1.0;
                        var Al = rl * 1.0;
                        var Bl = jl * -0.00727042 + ml * 0.999973;
                        var Cl = kl * -0.00727042 + nl * 0.999973;
                        var Dl = ll * -0.00727042 + ol * 0.999973;
                        var El = jl * 6.23054 + sl;
                        var Fl = kl * 6.23054 + tl;
                        var Gl = ll * 6.23054 + ul;
                        var Hl = fstate[0];
                        var Il;
                        if (Hl < 0.0416666)
                        {
                            Il = 0.102863;
                        }
                        else
                        {
                            if (Hl < 1.625)
                            {
                                Il = (engine.eCT(buffers[31], Hl * 24.0 + -5.96046e-8) * 5.80203e-6 + -0.16137) * 0.5;
                            }
                            else
                            {
                                Il = 0.00207095;
                            }
                        }
                        var Jl = Math.cos(Il);
                        var Kl = Math.sin(Il);
                        var Ll = Jl * -0.506124 + Kl * -0.862053;
                        var Ml = Jl * -0.862053 - Kl * -0.506124;
                        var Nl = Kl * -0.014899 + Jl * 0.0219463;
                        var Ol = Jl * -0.014899 - Kl * 0.0219463;
                        var Pl = Ll * Ll;
                        var Ql = Ml * Ml;
                        var Rl = Nl * Nl;
                        var Sl = Ol * Ol;
                        var Tl = Ll * Ml;
                        var Ul = Ml * Nl;
                        var Vl = Ll * Nl;
                        var Wl = Ol * Ll;
                        var Xl = Ol * Ml;
                        var Yl = Ol * Nl;
                        var Zl = Sl + Pl - Ql - Rl;
                        var am = (Tl + Yl) * 2.0;
                        var bm = (Vl - Xl) * 2.0;
                        var cm = (Tl - Yl) * 2.0;
                        var dm = Sl - Pl + Ql - Rl;
                        var em = (Ul + Wl) * 2.0;
                        var fm = (Vl + Xl) * 2.0;
                        var gm = (Ul - Wl) * 2.0;
                        var hm = Sl - Pl - Ql + Rl;
                        var im = jl * Zl + ml * am + pl * bm;
                        var jm = kl * Zl + nl * am + ql * bm;
                        var km = ll * Zl + ol * am + rl * bm;
                        var lm = jl * cm + ml * dm + pl * em;
                        var mm = kl * cm + nl * dm + ql * em;
                        var nm = ll * cm + ol * dm + rl * em;
                        var om = jl * fm + ml * gm + pl * hm;
                        var pm = kl * fm + nl * gm + ql * hm;
                        var qm = ll * fm + ol * gm + rl * hm;
                        var rm = jl * 0.360612 + ml * 0.604067 + pl * 4.10059e-15 + sl;
                        var sm = kl * 0.360612 + nl * 0.604067 + ql * 4.10059e-15 + tl;
                        var tm = ll * 0.360612 + ol * 0.604067 + rl * 4.10059e-15 + ul;
                        var um = fstate[0];
                        var vm;
                        if (um < 0.0416666)
                        {
                            vm = 0.0;
                        }
                        else
                        {
                            if (um < 1.625)
                            {
                                vm = (engine.eCT(buffers[34], um * 24.0 + -5.96046e-8) * 8.89537e-6 + -0.126288) * 0.5;
                            }
                            else
                            {
                                vm = 0.06761;
                            }
                        }
                        var wm = fstate[0];
                        var xm;
                        if (wm < 0.0416666)
                        {
                            xm = 0.0;
                        }
                        else
                        {
                            if (wm < 1.625)
                            {
                                xm = (engine.eCT(buffers[33], wm * 24.0 + -5.96046e-8) * 2.71576e-5 + -0.989508) * 0.5;
                            }
                            else
                            {
                                xm = 0.395133;
                            }
                        }
                        var ym = fstate[0];
                        var zm;
                        if (ym < 0.0416666)
                        {
                            zm = 0.0;
                        }
                        else
                        {
                            if (ym < 1.625)
                            {
                                zm = (engine.eCT(buffers[32], ym * 24.0 + -5.96046e-8) * 3.38037e-6 + -0.154708) * 0.5;
                            }
                            else
                            {
                                zm = -0.045261;
                            }
                        }
                        var Am = Math.cos(zm);
                        var Bm = Math.sin(zm);
                        var Cm = Math.cos(xm);
                        var Dm = Math.sin(xm);
                        var Em = Math.cos(vm);
                        var Fm = Math.sin(vm);
                        var Gm = Em * Cm * Bm - Fm * Dm * Am;
                        var Hm = Em * Dm * Am + Fm * Cm * Bm;
                        var Im = Em * -Dm * Bm + Fm * Cm * Am;
                        var Jm = Em * Cm * Am - Fm * -Dm * Bm;
                        var Km = Gm * -0.50086 + Jm * 0.497225 + Im * 0.530921 - Hm * 0.469072;
                        var Lm = Hm * -0.50086 + Jm * 0.530921 + Gm * 0.469072 - Im * 0.497225;
                        var Mm = Im * -0.50086 + Jm * 0.469072 + Hm * 0.497225 - Gm * 0.530921;
                        var Nm = Jm * -0.50086 - Gm * 0.497225 - Hm * 0.530921 - Im * 0.469072;
                        var Om = Km * Km;
                        var Pm = Lm * Lm;
                        var Qm = Mm * Mm;
                        var Rm = Nm * Nm;
                        var Sm = Km * Lm;
                        var Tm = Lm * Mm;
                        var Um = Km * Mm;
                        var Vm = Nm * Km;
                        var Wm = Nm * Lm;
                        var Xm = Nm * Mm;
                        var Ym = Rm + Om - Pm - Qm;
                        var Zm = (Sm + Xm) * 2.0;
                        var an = (Um - Wm) * 2.0;
                        var bn = (Sm - Xm) * 2.0;
                        var cn = Rm - Om + Pm - Qm;
                        var dn = (Tm + Vm) * 2.0;
                        var en = (Um + Wm) * 2.0;
                        var fn = (Tm - Vm) * 2.0;
                        var gn = Rm - Om - Pm + Qm;
                        var hn = jl * Ym + ml * Zm + pl * an;
                        var jn = kl * Ym + nl * Zm + ql * an;
                        var kn = ll * Ym + ol * Zm + rl * an;
                        var ln = jl * bn + ml * cn + pl * dn;
                        var mn = kl * bn + nl * cn + ql * dn;
                        var nn = ll * bn + ol * cn + rl * dn;
                        var on = jl * en + ml * fn + pl * gn;
                        var pn = kl * en + nl * fn + ql * gn;
                        var qn = ll * en + ol * fn + rl * gn;
                        var rn = jl * 3.44073 + ml * 2.54138 + pl * 2.49481 + sl;
                        var sn = kl * 3.44073 + nl * 2.54138 + ql * 2.49481 + tl;
                        var tn = ll * 3.44073 + ol * 2.54138 + rl * 2.49481 + ul;
                        var un = fstate[0];
                        var vn;
                        if (un < 0.0416666)
                        {
                            vn = 0.0;
                        }
                        else
                        {
                            if (un < 1.625)
                            {
                                vn = (engine.eCT(buffers[37], un * 24.0 + -5.96046e-8) * 8.89537e-6 + -0.456669) * 0.5;
                            }
                            else
                            {
                                vn = -0.06761;
                            }
                        }
                        var wn = fstate[0];
                        var xn;
                        if (wn < 0.0416666)
                        {
                            xn = 0.0;
                        }
                        else
                        {
                            if (wn < 1.625)
                            {
                                xn = (engine.eCT(buffers[36], wn * 24.0 + -5.96046e-8) * 2.71576e-5 + -0.790266) * 0.5;
                            }
                            else
                            {
                                xn = -0.395133;
                            }
                        }
                        var yn = fstate[0];
                        var zn;
                        if (yn < 0.0416666)
                        {
                            zn = 0.0;
                        }
                        else
                        {
                            if (yn < 1.625)
                            {
                                zn = (engine.eCT(buffers[35], yn * 24.0 + -5.96046e-8) * 3.38037e-6 + -0.154708) * 0.5;
                            }
                            else
                            {
                                zn = -0.045261;
                            }
                        }
                        var An = Math.cos(zn);
                        var Bn = Math.sin(zn);
                        var Cn = Math.cos(xn);
                        var Dn = Math.sin(xn);
                        var En = Math.cos(vn);
                        var Fn = Math.sin(vn);
                        var Gn = En * Cn * Bn - Fn * Dn * An;
                        var Hn = En * Dn * An + Fn * Cn * Bn;
                        var In = En * -Dn * Bn + Fn * Cn * An;
                        var Jn = En * Cn * An - Fn * -Dn * Bn;
                        var Kn = Gn * 0.497225 + Jn * 0.50086 + In * -0.469072 - Hn * 0.530921;
                        var Ln = Hn * 0.497225 + Jn * -0.469072 + Gn * 0.530921 - In * 0.50086;
                        var Mn = In * 0.497225 + Jn * 0.530921 + Hn * 0.50086 - Gn * -0.469072;
                        var Nn = Jn * 0.497225 - Gn * 0.50086 - Hn * -0.469072 - In * 0.530921;
                        var On = Kn * Kn;
                        var Pn = Ln * Ln;
                        var Qn = Mn * Mn;
                        var Rn = Nn * Nn;
                        var Sn = Kn * Ln;
                        var Tn = Ln * Mn;
                        var Un = Kn * Mn;
                        var Vn = Nn * Kn;
                        var Wn = Nn * Ln;
                        var Xn = Nn * Mn;
                        var Yn = Rn + On - Pn - Qn;
                        var Zn = (Sn + Xn) * 2.0;
                        var ao = (Un - Wn) * 2.0;
                        var bo = (Sn - Xn) * 2.0;
                        var co = Rn - On + Pn - Qn;
                        var eo = (Tn + Vn) * 2.0;
                        var fo = (Un + Wn) * 2.0;
                        var go = (Tn - Vn) * 2.0;
                        var ho = Rn - On - Pn + Qn;
                        var io = jl * Yn + ml * Zn + pl * ao;
                        var jo = kl * Yn + nl * Zn + ql * ao;
                        var ko = ll * Yn + ol * Zn + rl * ao;
                        var lo = jl * bo + ml * co + pl * eo;
                        var mo = kl * bo + nl * co + ql * eo;
                        var no = ll * bo + ol * co + rl * eo;
                        var oo = jl * fo + ml * go + pl * ho;
                        var po = kl * fo + nl * go + ql * ho;
                        var qo = ll * fo + ol * go + rl * ho;
                        var ro = jl * 3.46076 + ml * 2.23638 + pl * -2.74651 + sl;
                        var so = kl * 3.46076 + nl * 2.23638 + ql * -2.74651 + tl;
                        var to = ll * 3.46076 + ol * 2.23638 + rl * -2.74651 + ul;
                        var uo = im * 0.0046934 + lm * 0.00222803 + om * -0.999986;
                        var vo = jm * 0.0046934 + mm * 0.00222803 + pm * -0.999986;
                        var wo = km * 0.0046934 + nm * 0.00222803 + qm * -0.999986;
                        var xo = im * -0.429092 + lm * 0.90326 + om * -1.3858e-6;
                        var yo = jm * -0.429092 + mm * 0.90326 + pm * -1.3858e-6;
                        var zo = km * -0.429092 + nm * 0.90326 + qm * -1.3858e-6;
                        var Ao = im * 0.903248 + lm * 0.429087 + om * 0.00519539;
                        var Bo = jm * 0.903248 + mm * 0.429087 + pm * 0.00519539;
                        var Co = km * 0.903248 + nm * 0.429087 + qm * 0.00519539;
                        var Do = jm * 5.74189 + sm;
                        var Eo = km * 5.74189 + tm;
                        var Fo = al * 0.998304 + dl * -0.0582197;
                        var Go = bl * 0.998304 + el * -0.0582197;
                        var Ho = cl * 0.998304 + fl * -0.0582197;
                        var Io = al * -0.0582197 + dl * -0.998304;
                        var Jo = bl * -0.0582197 + el * -0.998304;
                        var Ko = cl * -0.0582197 + fl * -0.998304;
                        var Lo = Xk * -8.05275 + al * 15.8114 + dl * -10.8013 + gl;
                        var Mo = Yk * -8.05275 + bl * 15.8114 + el * -10.8013 + hl;
                        var No = Zk * -8.05275 + cl * 15.8114 + fl * -10.8013 + il;
                        var Oo = Fo * -16.4322 + Xk * 11.5634 + Io * -9.86858 + Lo;
                        var Po = Go * -16.4322 + Yk * 11.5634 + Jo * -9.86858 + Mo;
                        var Qo = Ho * -16.4322 + Zk * 11.5634 + Ko * -9.86858 + No;
                        var Ro = Math.abs(Fo) * 0.416006 + Math.abs(Xk) * 10.6418 + Math.abs(Io) * 0.416006;
                        var So = Math.abs(Go) * 0.416006 + Math.abs(Yk) * 10.6418 + Math.abs(Jo) * 0.416006;
                        var To = Math.abs(Ho) * 0.416006 + Math.abs(Zk) * 10.6418 + Math.abs(Ko) * 0.416006;
                        var Uo = Oo - Ro;
                        var Vo = Po - So;
                        var Wo = Qo - To;
                        var Xo = Oo + Ro;
                        var Yo = Po + So;
                        var Zo = Qo + To;
                        var ap = Yk * 0.996666 + Zk * 0.0815906;
                        var bp = Yk * -0.0815906 + Zk * 0.996666;
                        var cp = bl * 0.996666 + cl * 0.0815906;
                        var dp = bl * -0.0815906 + cl * 0.996666;
                        var ep = el * 0.996666 + fl * 0.0815906;
                        var fp = el * -0.0815906 + fl * 0.996666;
                        var gp = al * 0.998304 + dl * -0.0582197;
                        var hp = cp * 0.998304 + ep * -0.0582197;
                        var ip = dp * 0.998304 + fp * -0.0582197;
                        var jp = Xk * 0.996666 + al * -0.00475017 + dl * -0.0814522;
                        var kp = ap * 0.996666 + cp * -0.00475017 + ep * -0.0814522;
                        var lp = bp * 0.996666 + dp * -0.00475017 + fp * -0.0814522;
                        var mp = Xk * -0.0815906 + al * -0.0580256 + dl * -0.994976;
                        var np = ap * -0.0815906 + cp * -0.0580256 + ep * -0.994976;
                        var op = bp * -0.0815906 + dp * -0.0580256 + fp * -0.994976;
                        var pp = Xk * -6.90397 + al * 42.8571 + dl * -1.37972 + gl;
                        var qp = ap * -6.90397 + cp * 42.8571 + ep * -1.37972 + hl * 0.996666 + il * 0.0815906 + 0.0253191;
                        var rp = bp * -6.90397 + dp * 42.8571 + fp * -1.37972 + hl * -0.0815906 + il * 0.996666 + 1.41714;
                        var sp = kl * 0.996666 + ll * 0.0815906;
                        var tp = kl * -0.0815906 + ll * 0.996666;
                        var up = nl * 0.996666 + ol * 0.0815906;
                        var vp = nl * -0.0815906 + ol * 0.996666;
                        var wp = ql * 0.996666 + rl * 0.0815906;
                        var xp = ql * -0.0815906 + rl * 0.996666;
                        var yp = jl * -0.003812 + ml * 0.0580947 + pl * 0.998304;
                        var zp = sp * -0.003812 + up * 0.0580947 + wp * 0.998304;
                        var Ap = tp * -0.003812 + vp * 0.0580947 + xp * 0.998304;
                        var Bp = jl * 0.989194 + ml * 0.146535 + pl * -0.00475016;
                        var Cp = sp * 0.989194 + up * 0.146535 + wp * -0.00475016;
                        var Dp = tp * 0.989194 + vp * 0.146535 + xp * -0.00475016;
                        var Ep = jl * -0.146562 + ml * 0.987499 + pl * -0.0580255;
                        var Fp = sp * -0.146562 + up * 0.987499 + wp * -0.0580255;
                        var Gp = tp * -0.146562 + vp * 0.987499 + xp * -0.0580255;
                        var Hp = jl * -17.1352 + ml * 0.229262 + pl * 42.8571 + sl;
                        var Ip = sp * -17.1352 + up * 0.229262 + wp * 42.8571 + tl * 0.996666 + ul * 0.0815906 + 0.0253191;
                        var Jp = tp * -17.1352 + vp * 0.229262 + xp * 42.8571 + tl * -0.0815906 + ul * 0.996666 + 1.41714;
                        var Kp = wl * 0.996666 + xl * 0.0815906;
                        var Lp = wl * -0.0815906 + xl * 0.996666;
                        var Mp = zl * 0.996666 + Al * 0.0815906;
                        var Np = zl * -0.0815906 + Al * 0.996666;
                        var Op = Cl * 0.996666 + Dl * 0.0815906;
                        var Pp = Cl * -0.0815906 + Dl * 0.996666;
                        var Qp = vl * 0.00338954 + yl * 0.998304 + Bl * 0.0581209;
                        var Rp = Kp * 0.00338954 + Mp * 0.998304 + Op * 0.0581209;
                        var Sp = Lp * 0.00338954 + Np * 0.998304 + Pp * 0.0581209;
                        var Tp = vl * -0.990234 + yl * -0.00475017 + Bl * 0.139339;
                        var Up = Kp * -0.990234 + Mp * -0.00475017 + Op * 0.139339;
                        var Vp = Lp * -0.990234 + Np * -0.00475017 + Pp * 0.139339;
                        var Wp = vl * 0.139379 + yl * -0.0580256 + Bl * 0.988537;
                        var Xp = Kp * 0.139379 + Mp * -0.0580256 + Op * 0.988537;
                        var Yp = Lp * 0.139379 + Np * -0.0580256 + Pp * 0.988537;
                        var Zp = vl * 23.3634 + yl * 42.8571 + Bl * 0.399136 + El;
                        var aq = Kp * 23.3634 + Mp * 42.8571 + Op * 0.399136 + Fl * 0.996666 + Gl * 0.0815906 + 0.0253191;
                        var bq = Lp * 23.3634 + Np * 42.8571 + Pp * 0.399136 + Fl * -0.0815906 + Gl * 0.996666 + 1.41714;
                        var cq = jm * 0.996666 + km * 0.0815906;
                        var dq = jm * -0.0815906 + km * 0.996666;
                        var eq = mm * 0.996666 + nm * 0.0815906;
                        var fq = mm * -0.0815906 + nm * 0.996666;
                        var gq = pm * 0.996666 + qm * 0.0815906;
                        var hq = pm * -0.0815906 + qm * 0.996666;
                        var iq = im * 0.00469193 + lm * 0.00222895 + om * -0.999987;
                        var jq = cq * 0.00469193 + eq * 0.00222895 + gq * -0.999987;
                        var kq = dq * 0.00469193 + fq * 0.00222895 + hq * -0.999987;
                        var lq = im * -0.353966 + lm * 0.935258 + om * 4.2385e-4;
                        var mq = cq * -0.353966 + eq * 0.935258 + gq * 4.2385e-4;
                        var nq = dq * -0.353966 + fq * 0.935258 + hq * 4.2385e-4;
                        var oq = im * 0.935246 + lm * 0.35396 + om * 0.00517713;
                        var pq = cq * 0.935246 + eq * 0.35396 + gq * 0.00517713;
                        var qq = dq * 0.935246 + fq * 0.35396 + hq * 0.00517713;
                        var rq = im * 6.14475 + lm * -16.4361 + om * -42.8377 + rm;
                        var sq = cq * 6.14475 + eq * -16.4361 + gq * -42.8377 + sm * 0.996666 + tm * 0.0815906 + 0.0253191;
                        var tq = dq * 6.14475 + fq * -16.4361 + hq * -42.8377 + sm * -0.0815906 + tm * 0.996666 + 1.41714;
                        var uq = vo * 0.996666 + wo * 0.0815906;
                        var vq = vo * -0.0815906 + wo * 0.996666;
                        var wq = yo * 0.996666 + zo * 0.0815906;
                        var xq = yo * -0.0815906 + zo * 0.996666;
                        var yq = Bo * 0.996666 + Co * 0.0815906;
                        var zq = Bo * -0.0815906 + Co * 0.996666;
                        var Aq = xo * 0.996666 + Ao * 0.0815906;
                        var Bq = wq * 0.996666 + yq * 0.0815906;
                        var Cq = xq * 0.996666 + zq * 0.0815906;
                        var Dq = xo * -0.0815906 + Ao * 0.996666;
                        var Eq = wq * -0.0815906 + yq * 0.996666;
                        var Fq = xq * -0.0815906 + zq * 0.996666;
                        var Gq = uo * 42.8024 + xo * -15.019 + Ao * -6.91122 + im * 5.74189 + rm;
                        var Hq = uq * 42.8024 + wq * -15.019 + yq * -6.91122 + Do * 0.996666 + Eo * 0.0815906 + 0.0253191;
                        var Iq = vq * 42.8024 + xq * -15.019 + zq * -6.91122 + Do * -0.0815906 + Eo * 0.996666 + 1.41714;
                        var Jq = gp * -42.8842 + jp * 16.0318 + mp * 2.56821 + pp;
                        var Kq = hp * -42.8842 + kp * 16.0318 + np * 2.56821 + qp;
                        var Lq = ip * -42.8842 + lp * 16.0318 + op * 2.56821 + rp;
                        var Mq = Math.abs(gp) * 4.28684 + Math.abs(jp) * 2.32166 + Math.abs(mp) * 2.90742;
                        var Nq = Math.abs(hp) * 4.28684 + Math.abs(kp) * 2.32166 + Math.abs(np) * 2.90742;
                        var Oq = Math.abs(ip) * 4.28684 + Math.abs(lp) * 2.32166 + Math.abs(op) * 2.90742;
                        var Pq = yp * -42.8842 + Bp * 16.0318 + Ep * 2.56821 + Hp;
                        var Qq = zp * -42.8842 + Cp * 16.0318 + Fp * 2.56821 + Ip;
                        var Rq = Ap * -42.8842 + Dp * 16.0318 + Gp * 2.56821 + Jp;
                        var Sq = Math.abs(yp) * 4.28684 + Math.abs(Bp) * 2.32166 + Math.abs(Ep) * 2.90742;
                        var Tq = Math.abs(zp) * 4.28684 + Math.abs(Cp) * 2.32166 + Math.abs(Fp) * 2.90742;
                        var Uq = Math.abs(Ap) * 4.28684 + Math.abs(Dp) * 2.32166 + Math.abs(Gp) * 2.90742;
                        var Vq = Qp * -42.8842 + Tp * 16.0318 + Wp * 2.56821 + Zp;
                        var Wq = Rp * -42.8842 + Up * 16.0318 + Xp * 2.56821 + aq;
                        var Xq = Sp * -42.8842 + Vp * 16.0318 + Yp * 2.56821 + bq;
                        var Yq = Math.abs(Qp) * 4.28684 + Math.abs(Tp) * 2.32166 + Math.abs(Wp) * 2.90742;
                        var Zq = Math.abs(Rp) * 4.28684 + Math.abs(Up) * 2.32166 + Math.abs(Xp) * 2.90742;
                        var ar = Math.abs(Sp) * 4.28684 + Math.abs(Vp) * 2.32166 + Math.abs(Yp) * 2.90742;
                        var br = iq * -42.8842 + lq * 16.0318 + oq * 2.56821 + rq;
                        var cr = jq * -42.8842 + mq * 16.0318 + pq * 2.56821 + sq;
                        var dr = kq * -42.8842 + nq * 16.0318 + qq * 2.56821 + tq;
                        var er = Math.abs(iq) * 4.28684 + Math.abs(lq) * 2.32166 + Math.abs(oq) * 2.90742;
                        var fr = Math.abs(jq) * 4.28684 + Math.abs(mq) * 2.32166 + Math.abs(pq) * 2.90742;
                        var gr = Math.abs(kq) * 4.28684 + Math.abs(nq) * 2.32166 + Math.abs(qq) * 2.90742;
                        var hr = uo * -42.8842 + Aq * 16.0318 + Dq * 2.56821 + Gq;
                        var ir = uq * -42.8842 + Bq * 16.0318 + Eq * 2.56821 + Hq;
                        var jr = vq * -42.8842 + Cq * 16.0318 + Fq * 2.56821 + Iq;
                        var kr = Math.abs(uo) * 4.28684 + Math.abs(Aq) * 2.32166 + Math.abs(Dq) * 2.90742;
                        var lr = Math.abs(uq) * 4.28684 + Math.abs(Bq) * 2.32166 + Math.abs(Eq) * 2.90742;
                        var mr = Math.abs(vq) * 4.28684 + Math.abs(Cq) * 2.32166 + Math.abs(Fq) * 2.90742;
                        var nr = Math.min(Math.min(Math.min(Math.min(Jq - Mq, Pq - Sq), Vq - Yq), br - er), hr - kr);
                        var or = Math.min(Math.min(Math.min(Math.min(Kq - Nq, Qq - Tq), Wq - Zq), cr - fr), ir - lr);
                        var pr = Math.min(Math.min(Math.min(Math.min(Lq - Oq, Rq - Uq), Xq - ar), dr - gr), jr - mr);
                        var qr = Math.max(Math.max(Math.max(Math.max(Jq + Mq, Pq + Sq), Vq + Yq), br + er), hr + kr);
                        var rr = Math.max(Math.max(Math.max(Math.max(Kq + Nq, Qq + Tq), Wq + Zq), cr + fr), ir + lr);
                        var sr = Math.max(Math.max(Math.max(Math.max(Lq + Oq, Rq + Uq), Xq + ar), dr + gr), jr + mr);
                        var tr = jl * -0.003812 + ml * 0.0580947 + pl * 0.998304;
                        var ur = kl * -0.003812 + nl * 0.0580947 + ql * 0.998304;
                        var vr = ll * -0.003812 + ol * 0.0580947 + rl * 0.998304;
                        var wr = jl * 0.997854 + ml * 0.0654762 + pl * 4.11073e-9;
                        var xr = kl * 0.997854 + nl * 0.0654762 + ql * 4.11073e-9;
                        var yr = ll * 0.997854 + ol * 0.0654762 + rl * 4.11073e-9;
                        var zr = jl * -0.0653651 + ml * 0.996162 + pl * -0.0582196;
                        var Ar = kl * -0.0653651 + nl * 0.996162 + ql * -0.0582196;
                        var Br = ll * -0.0653651 + ol * 0.996162 + rl * -0.0582196;
                        var Cr = jl * -17.3178 + ml * 1.63239 + pl * 42.7747 + sl;
                        var Dr = kl * -17.3178 + nl * 1.63239 + ql * 42.7747 + tl;
                        var Er = ll * -17.3178 + ol * 1.63239 + rl * 42.7747 + ul;
                        var Fr = vl * 0.00338954 + yl * 0.998304 + Bl * 0.0581209;
                        var Gr = wl * 0.00338954 + zl * 0.998304 + Cl * 0.0581209;
                        var Hr = xl * 0.00338954 + Al * 0.998304 + Dl * 0.0581209;
                        var Ir = vl * -0.998304 + yl * 9.59328e-10 + Bl * 0.0582197;
                        var Jr = wl * -0.998304 + zl * 9.59328e-10 + Cl * 0.0582197;
                        var Kr = xl * -0.998304 + Al * 9.59328e-10 + Dl * 0.0582197;
                        var Lr = vl * 0.058121 + yl * -0.0582197 + Bl * 0.99661;
                        var Mr = wl * 0.058121 + zl * -0.0582197 + Cl * 0.99661;
                        var Nr = xl * 0.058121 + Al * -0.0582197 + Dl * 0.99661;
                        var Or = vl * 23.5359 + yl * 42.7747 + Bl * 1.80356 + El;
                        var Pr = wl * 23.5359 + zl * 42.7747 + Cl * 1.80356 + Fl;
                        var Qr = xl * 23.5359 + Al * 42.7747 + Dl * 1.80356 + Gl;
                        var Rr = hn * 40.2379 + ln * -20.7735 + on * -1.89369 + rn;
                        var Sr = jn * 40.2379 + mn * -20.7735 + pn * -1.89369 + sn;
                        var Tr = kn * 40.2379 + nn * -20.7735 + qn * -1.89369 + tn;
                        var Ur = lo * -1.0;
                        var Vr = mo * -1.0;
                        var Wr = no * -1.0;
                        var Xr = oo * -1.0;
                        var Yr = po * -1.0;
                        var Zr = qo * -1.0;
                        var as = io * 45.4882 + lo * 20.7736 + oo * 1.8937 + ro;
                        var bs = jo * 45.4882 + mo * 20.7736 + po * 1.8937 + so;
                        var cs = ko * 45.4882 + no * 20.7736 + qo * 1.8937 + to;
                        var ds = tr * -40.2379 + wr * 20.7735 + zr * 2.0246 + Cr;
                        var es = ur * -40.2379 + xr * 20.7735 + Ar * 2.0246 + Dr;
                        var fs = vr * -40.2379 + yr * 20.7735 + Br * 2.0246 + Er;
                        var gs = Math.abs(tr) * 1.06448 + Math.abs(wr) * 1.06448 + Math.abs(zr) * 0.773878;
                        var hs = Math.abs(ur) * 1.06448 + Math.abs(xr) * 1.06448 + Math.abs(Ar) * 0.773878;
                        var js = Math.abs(vr) * 1.06448 + Math.abs(yr) * 1.06448 + Math.abs(Br) * 0.773878;
                        var ks = Fr * -40.2379 + Ir * 20.7735 + Lr * 2.0246 + Or;
                        var ls = Gr * -40.2379 + Jr * 20.7735 + Mr * 2.0246 + Pr;
                        var ms = Hr * -40.2379 + Kr * 20.7735 + Nr * 2.0246 + Qr;
                        var ns = Math.abs(Fr) * 1.06448 + Math.abs(Ir) * 1.06448 + Math.abs(Lr) * 0.773878;
                        var os = Math.abs(Gr) * 1.06448 + Math.abs(Jr) * 1.06448 + Math.abs(Mr) * 0.773878;
                        var ps = Math.abs(Hr) * 1.06448 + Math.abs(Kr) * 1.06448 + Math.abs(Nr) * 0.773878;
                        var qs = hn * -40.2379 + ln * 20.7735 + on * 2.0246 + Rr;
                        var rs = jn * -40.2379 + mn * 20.7735 + pn * 2.0246 + Sr;
                        var ss = kn * -40.2379 + nn * 20.7735 + qn * 2.0246 + Tr;
                        var ts = Math.abs(hn) * 1.06448 + Math.abs(ln) * 1.06448 + Math.abs(on) * 0.773878;
                        var us = Math.abs(jn) * 1.06448 + Math.abs(mn) * 1.06448 + Math.abs(pn) * 0.773878;
                        var vs = Math.abs(kn) * 1.06448 + Math.abs(nn) * 1.06448 + Math.abs(qn) * 0.773878;
                        var ws = io * -40.2379 + Ur * 20.7735 + Xr * 2.0246 + as;
                        var xs = jo * -40.2379 + Vr * 20.7735 + Yr * 2.0246 + bs;
                        var ys = ko * -40.2379 + Wr * 20.7735 + Zr * 2.0246 + cs;
                        var zs = Math.abs(io) * 1.06448 + Math.abs(Ur) * 1.06448 + Math.abs(Xr) * 0.773878;
                        var As = Math.abs(jo) * 1.06448 + Math.abs(Vr) * 1.06448 + Math.abs(Yr) * 0.773878;
                        var Bs = Math.abs(ko) * 1.06448 + Math.abs(Wr) * 1.06448 + Math.abs(Zr) * 0.773878;
                        var Cs = Math.min(Math.min(Math.min(ds - gs, ks - ns), qs - ts), ws - zs);
                        var Ds = Math.min(Math.min(Math.min(es - hs, ls - os), rs - us), xs - As);
                        var Es = Math.min(Math.min(Math.min(fs - js, ms - ps), ss - vs), ys - Bs);
                        var Fs = Math.max(Math.max(Math.max(ds + gs, ks + ns), qs + ts), ws + zs);
                        var Gs = Math.max(Math.max(Math.max(es + hs, ls + os), rs + us), xs + As);
                        var Hs = Math.max(Math.max(Math.max(fs + js, ms + ps), ss + vs), ys + Bs);
                        var Is = al * 0.998304 + dl * -0.0582197;
                        var Js = bl * 0.998304 + el * -0.0582197;
                        var Ks = cl * 0.998304 + fl * -0.0582197;
                        var Ls = al * -0.0582197 + dl * -0.998304;
                        var Ms = bl * -0.0582197 + el * -0.998304;
                        var Ns = cl * -0.0582197 + fl * -0.998304;
                        var Os = Xk * -6.99436 + al * 42.7747 + dl * -2.79181 + gl;
                        var Ps = Yk * -6.99436 + bl * 42.7747 + el * -2.79181 + hl;
                        var Qs = Zk * -6.99436 + cl * 42.7747 + fl * -2.79181 + il;
                        var Rs = jl * -0.003812 + ml * 0.0580947 + pl * 0.998304;
                        var Ss = kl * -0.003812 + nl * 0.0580947 + ql * 0.998304;
                        var Ts = ll * -0.003812 + ol * 0.0580947 + rl * 0.998304;
                        var Us = jl * 0.997854 + ml * 0.0654762 + pl * 4.11073e-9;
                        var Vs = kl * 0.997854 + nl * 0.0654762 + ql * 4.11073e-9;
                        var Ws = ll * 0.997854 + ol * 0.0654762 + rl * 4.11073e-9;
                        var Xs = jl * -0.0653651 + ml * 0.996162 + pl * -0.0582196;
                        var Ys = kl * -0.0653651 + nl * 0.996162 + ql * -0.0582196;
                        var Zs = ll * -0.0653651 + ol * 0.996162 + rl * -0.0582196;
                        var at = jl * -17.3178 + ml * 1.63239 + pl * 42.7747 + sl;
                        var bt = kl * -17.3178 + nl * 1.63239 + ql * 42.7747 + tl;
                        var ct = ll * -17.3178 + ol * 1.63239 + rl * 42.7747 + ul;
                        var dt = Is * -42.8843 + Xk * 19.781 + Ls * -0.284616 + Os;
                        var et = Js * -42.8843 + Yk * 19.781 + Ms * -0.284616 + Ps;
                        var ft = Ks * -42.8843 + Zk * 19.781 + Ns * -0.284616 + Qs;
                        var gt = Math.abs(Is) * 5.07301 + Math.abs(Xk) * 4.95432 + Math.abs(Ls) * 5.65923;
                        var ht = Math.abs(Js) * 5.07301 + Math.abs(Yk) * 4.95432 + Math.abs(Ms) * 5.65923;
                        var it = Math.abs(Ks) * 5.07301 + Math.abs(Zk) * 4.95432 + Math.abs(Ns) * 5.65923;
                        var jt = Rs * -42.8843 + Us * 19.781 + Xs * -0.284616 + at;
                        var kt = Ss * -42.8843 + Vs * 19.781 + Ys * -0.284616 + bt;
                        var lt = Ts * -42.8843 + Ws * 19.781 + Zs * -0.284616 + ct;
                        var mt = Math.abs(Rs) * 5.07301 + Math.abs(Us) * 4.95432 + Math.abs(Xs) * 5.65923;
                        var nt = Math.abs(Ss) * 5.07301 + Math.abs(Vs) * 4.95432 + Math.abs(Ys) * 5.65923;
                        var ot = Math.abs(Ts) * 5.07301 + Math.abs(Ws) * 4.95432 + Math.abs(Zs) * 5.65923;
                        var pt = Math.min(dt - gt, jt - mt);
                        var qt = Math.min(et - ht, kt - nt);
                        var rt = Math.min(ft - it, lt - ot);
                        var st = Math.max(dt + gt, jt + mt);
                        var tt = Math.max(et + ht, kt + nt);
                        var ut = Math.max(ft + it, lt + ot);
                        var vt = jl * -0.003812 + ml * 0.0580947 + pl * 0.998304;
                        var wt = kl * -0.003812 + nl * 0.0580947 + ql * 0.998304;
                        var xt = ll * -0.003812 + ol * 0.0580947 + rl * 0.998304;
                        var yt = jl * 0.997854 + ml * 0.0654762 + pl * 4.11073e-9;
                        var zt = kl * 0.997854 + nl * 0.0654762 + ql * 4.11073e-9;
                        var At = ll * 0.997854 + ol * 0.0654762 + rl * 4.11073e-9;
                        var Bt = jl * -0.0653651 + ml * 0.996162 + pl * -0.0582196;
                        var Ct = kl * -0.0653651 + nl * 0.996162 + ql * -0.0582196;
                        var Dt = ll * -0.0653651 + ol * 0.996162 + rl * -0.0582196;
                        var Et = jl * -17.3178 + ml * 1.63239 + pl * 42.7747 + sl;
                        var Ft = kl * -17.3178 + nl * 1.63239 + ql * 42.7747 + tl;
                        var Gt = ll * -17.3178 + ol * 1.63239 + rl * 42.7747 + ul;
                        var Ht = vl * 0.00338954 + yl * 0.998304 + Bl * 0.0581209;
                        var It = wl * 0.00338954 + zl * 0.998304 + Cl * 0.0581209;
                        var Jt = xl * 0.00338954 + Al * 0.998304 + Dl * 0.0581209;
                        var Kt = vl * -0.998304 + yl * 9.59328e-10 + Bl * 0.0582197;
                        var Lt = wl * -0.998304 + zl * 9.59328e-10 + Cl * 0.0582197;
                        var Mt = xl * -0.998304 + Al * 9.59328e-10 + Dl * 0.0582197;
                        var Nt = vl * 0.058121 + yl * -0.0582197 + Bl * 0.99661;
                        var Ot = wl * 0.058121 + zl * -0.0582197 + Cl * 0.99661;
                        var Pt = xl * 0.058121 + Al * -0.0582197 + Dl * 0.99661;
                        var Qt = vl * 23.5359 + yl * 42.7747 + Bl * 1.80356 + El;
                        var Rt = wl * 23.5359 + zl * 42.7747 + Cl * 1.80356 + Fl;
                        var St = xl * 23.5359 + Al * 42.7747 + Dl * 1.80356 + Gl;
                        var Tt = hn * 40.2379 + ln * -20.7735 + on * -1.89369 + rn;
                        var Ut = jn * 40.2379 + mn * -20.7735 + pn * -1.89369 + sn;
                        var Vt = kn * 40.2379 + nn * -20.7735 + qn * -1.89369 + tn;
                        var Wt = lo * -1.0;
                        var Xt = mo * -1.0;
                        var Yt = no * -1.0;
                        var Zt = oo * -1.0;
                        var au = po * -1.0;
                        var bu = qo * -1.0;
                        var cu = io * 45.4882 + lo * 20.7736 + oo * 1.8937 + ro;
                        var du = jo * 45.4882 + mo * 20.7736 + po * 1.8937 + so;
                        var eu = ko * 45.4882 + no * 20.7736 + qo * 1.8937 + to;
                        var fu = vt * -45.4888 + yt * 20.7735 + Bt * 2.0246 + Et;
                        var gu = wt * -45.4888 + zt * 20.7735 + Ct * 2.0246 + Ft;
                        var hu = xt * -45.4888 + At * 20.7735 + Dt * 2.0246 + Gt;
                        var iu = Math.abs(vt) * 1.06448 + Math.abs(yt) * 1.06448 + Math.abs(Bt) * 0.773878;
                        var ju = Math.abs(wt) * 1.06448 + Math.abs(zt) * 1.06448 + Math.abs(Ct) * 0.773878;
                        var ku = Math.abs(xt) * 1.06448 + Math.abs(At) * 1.06448 + Math.abs(Dt) * 0.773878;
                        var lu = Ht * -45.4888 + Kt * 20.7735 + Nt * 2.0246 + Qt;
                        var mu = It * -45.4888 + Lt * 20.7735 + Ot * 2.0246 + Rt;
                        var nu = Jt * -45.4888 + Mt * 20.7735 + Pt * 2.0246 + St;
                        var ou = Math.abs(Ht) * 1.06448 + Math.abs(Kt) * 1.06448 + Math.abs(Nt) * 0.773878;
                        var pu = Math.abs(It) * 1.06448 + Math.abs(Lt) * 1.06448 + Math.abs(Ot) * 0.773878;
                        var qu = Math.abs(Jt) * 1.06448 + Math.abs(Mt) * 1.06448 + Math.abs(Pt) * 0.773878;
                        var ru = hn * -45.4888 + ln * 20.7735 + on * 2.0246 + Tt;
                        var su = jn * -45.4888 + mn * 20.7735 + pn * 2.0246 + Ut;
                        var tu = kn * -45.4888 + nn * 20.7735 + qn * 2.0246 + Vt;
                        var uu = Math.abs(hn) * 1.06448 + Math.abs(ln) * 1.06448 + Math.abs(on) * 0.773878;
                        var vu = Math.abs(jn) * 1.06448 + Math.abs(mn) * 1.06448 + Math.abs(pn) * 0.773878;
                        var wu = Math.abs(kn) * 1.06448 + Math.abs(nn) * 1.06448 + Math.abs(qn) * 0.773878;
                        var xu = io * -45.4888 + Wt * 20.7735 + Zt * 2.0246 + cu;
                        var yu = jo * -45.4888 + Xt * 20.7735 + au * 2.0246 + du;
                        var zu = ko * -45.4888 + Yt * 20.7735 + bu * 2.0246 + eu;
                        var Au = Math.abs(io) * 1.06448 + Math.abs(Wt) * 1.06448 + Math.abs(Zt) * 0.773878;
                        var Bu = Math.abs(jo) * 1.06448 + Math.abs(Xt) * 1.06448 + Math.abs(au) * 0.773878;
                        var Cu = Math.abs(ko) * 1.06448 + Math.abs(Yt) * 1.06448 + Math.abs(bu) * 0.773878;
                        var Du = Math.min(Math.min(Math.min(fu - iu, lu - ou), ru - uu), xu - Au);
                        var Eu = Math.min(Math.min(Math.min(gu - ju, mu - pu), su - vu), yu - Bu);
                        var Fu = Math.min(Math.min(Math.min(hu - ku, nu - qu), tu - wu), zu - Cu);
                        var Gu = Math.max(Math.max(Math.max(fu + iu, lu + ou), ru + uu), xu + Au);
                        var Hu = Math.max(Math.max(Math.max(gu + ju, mu + pu), su + vu), yu + Bu);
                        var Iu = Math.max(Math.max(Math.max(hu + ku, nu + qu), tu + wu), zu + Cu);
                        var Ju = Lk * 0.999488 + Nk * -0.0319731;
                        var Ku = Lk * 0.0319731 + Nk * 0.999488;
                        var Lu = Ok * 0.999488 + Qk * -0.0319731;
                        var Mu = Ok * 0.0319731 + Qk * 0.999488;
                        var Nu = Rk * 0.999488 + Tk * -0.0319731;
                        var Ou = Rk * 0.0319731 + Tk * 0.999488;
                        var Pu = Ju * 0.999929 + Lu * 0.0114419 + Nu * 0.00340593;
                        var Qu = Mk * 0.999929 + Pk * 0.0114419 + Sk * 0.00340593;
                        var Ru = Ku * 0.999929 + Mu * 0.0114419 + Ou * 0.00340593;
                        var Su = Ju * -0.0113207 + Lu * 0.999367 + Nu * -0.0337305;
                        var Tu = Mk * -0.0113207 + Pk * 0.999367 + Sk * -0.0337305;
                        var Uu = Ku * -0.0113207 + Mu * 0.999367 + Ou * -0.0337305;
                        var Vu = Ju * -0.00378973 + Lu * 0.0336895 + Nu * 0.999425;
                        var Wu = Mk * -0.00378973 + Pk * 0.0336895 + Sk * 0.999425;
                        var Xu = Ku * -0.00378973 + Mu * 0.0336895 + Ou * 0.999425;
                        var Yu = Ju * 0.0702505 + Lu * -15.0071 + Nu * 0.58799 + Uk * 0.999488 + Wk * -0.0319731 + 0.0108144;
                        var Zu = Mk * 0.0702505 + Pk * -15.0071 + Sk * 0.58799 + Vk;
                        var av = Ku * 0.0702505 + Mu * -15.0071 + Ou * 0.58799 + Uk * 0.0319731 + Wk * 0.999488 + -0.434439;
                        var bv = Pu * 0.0151095 + Su * 18.1969 + Vu * -0.0961347 + Yu;
                        var cv = Qu * 0.0151095 + Tu * 18.1969 + Wu * -0.0961347 + Zu;
                        var dv = Ru * 0.0151095 + Uu * 18.1969 + Xu * -0.0961347 + av;
                        var ev = Math.abs(Pu) * 8.25598 + Math.abs(Su) * 3.45125 + Math.abs(Vu) * 4.58112;
                        var fv = Math.abs(Qu) * 8.25598 + Math.abs(Tu) * 3.45125 + Math.abs(Wu) * 4.58112;
                        var gv = Math.abs(Ru) * 8.25598 + Math.abs(Uu) * 3.45125 + Math.abs(Xu) * 4.58112;
                        var hv = bv - ev;
                        var iv = cv - fv;
                        var jv = dv - gv;
                        var kv = bv + ev;
                        var lv = cv + fv;
                        var mv = dv + gv;
                        var nv = I * 0.998716 + L * 0.0506595;
                        var ov = J * 0.998716 + M * 0.0506595;
                        var pv = K * 0.998716 + N * 0.0506595;
                        var qv = I * -0.0506595 + L * 0.998716;
                        var rv = J * -0.0506595 + M * 0.998716;
                        var sv = K * -0.0506595 + N * 0.998716;
                        var tv = I * -4.59896 + L * 0.046149 + -0.0150702;
                        var uv = J * -4.59896 + M * 0.046149 + j;
                        var vv = K * -4.59896 + N * 0.046149 + h + -0.0210635;
                        var wv = O * -2.24024e-4 + nv * 4.99203 + qv * 1.60806 + tv;
                        var xv = P * -2.24024e-4 + ov * 4.99203 + rv * 1.60806 + uv;
                        var yv = Q * -2.24024e-4 + pv * 4.99203 + sv * 1.60806 + vv;
                        var zv = Math.abs(O) * 0.912526 + Math.abs(nv) * 0.91179 + Math.abs(qv) * 0.169205;
                        var Av = Math.abs(P) * 0.912526 + Math.abs(ov) * 0.91179 + Math.abs(rv) * 0.169205;
                        var Bv = Math.abs(Q) * 0.912526 + Math.abs(pv) * 0.91179 + Math.abs(sv) * 0.169205;
                        var Cv = wv - zv;
                        var Dv = xv - Av;
                        var Ev = yv - Bv;
                        var Fv = wv + zv;
                        var Gv = xv + Av;
                        var Hv = yv + Bv;
                        var Iv = Fk * -1.0;
                        var Jv = Gk * -1.0;
                        var Kv = Hk * -1.0;
                        var Lv = zk * 0.99931 + Ck * 0.0371365;
                        var Mv = Ak * 0.99931 + Dk * 0.0371365;
                        var Nv = Bk * 0.99931 + Ek * 0.0371365;
                        var Ov = zk * 0.0371365 + Ck * -0.99931;
                        var Pv = Ak * 0.0371365 + Dk * -0.99931;
                        var Qv = Bk * 0.0371365 + Ek * -0.99931;
                        var Rv = zk * -9.7762 + Ck * -0.694077 + Ik;
                        var Sv = Ak * -9.7762 + Dk * -0.694077 + Jk;
                        var Tv = Bk * -9.7762 + Ek * -0.694077 + Kk;
                        var Uv = Iv * -4.77552e-4 + Lv * 13.5195 + Ov * -0.182161 + Rv;
                        var Vv = Jv * -4.77552e-4 + Mv * 13.5195 + Pv * -0.182161 + Sv;
                        var Wv = Kv * -4.77552e-4 + Nv * 13.5195 + Qv * -0.182161 + Tv;
                        var Xv = Math.abs(Iv) * 7.37218 + Math.abs(Lv) * 3.91181 + Math.abs(Ov) * 1.78532;
                        var Yv = Math.abs(Jv) * 7.37218 + Math.abs(Mv) * 3.91181 + Math.abs(Pv) * 1.78532;
                        var Zv = Math.abs(Kv) * 7.37218 + Math.abs(Nv) * 3.91181 + Math.abs(Qv) * 1.78532;
                        var aw = Uv - Xv;
                        var bw = Vv - Yv;
                        var cw = Wv - Zv;
                        var dw = Uv + Xv;
                        var ew = Vv + Yv;
                        var fw = Wv + Zv;
                        var gw = I * 0.998716 + L * 0.0506595;
                        var hw = J * 0.998716 + M * 0.0506595;
                        var iw = K * 0.998716 + N * 0.0506595;
                        var jw = I * -0.0506595 + L * 0.998716;
                        var kw = J * -0.0506595 + M * 0.998716;
                        var lw = K * -0.0506595 + N * 0.998716;
                        var mw = I * -4.5979 + L * 0.0251126 + -0.0150702;
                        var nw = J * -4.5979 + M * 0.0251126 + j;
                        var ow = K * -4.5979 + N * 0.0251126 + h;
                        var pw = Jc * -1.0;
                        var qw = Kc * -1.0;
                        var rw = Lc * -1.0;
                        var sw = Dc * 0.999797 + Gc * 0.0201301;
                        var tw = Ec * 0.999797 + Hc * 0.0201301;
                        var uw = Fc * 0.999797 + Ic * 0.0201301;
                        var vw = Dc * 0.0201301 + Gc * -0.999797;
                        var Aw = Ec * 0.0201301 + Hc * -0.999797;
                        var Bw = Fc * 0.0201301 + Ic * -0.999797;
                        var Cw = Dc * -7.08405 + Gc * -0.527657 + Mc;
                        var Dw = Ec * -7.08405 + Hc * -0.527657 + Nc;
                        var Ew = Fc * -7.08405 + Ic * -0.527657 + Oc;
                        var Fw = Fk * -1.0;
                        var Gw = Gk * -1.0;
                        var Hw = Hk * -1.0;
                        var Iw = zk * 0.99931 + Ck * 0.0371365;
                        var Jw = Ak * 0.99931 + Dk * 0.0371365;
                        var Kw = Bk * 0.99931 + Ek * 0.0371365;
                        var Lw = zk * 0.0371365 + Ck * -0.99931;
                        var Mw = Ak * 0.0371365 + Dk * -0.99931;
                        var Nw = Bk * 0.0371365 + Ek * -0.99931;
                        var Ow = zk * -9.7762 + Ck * -0.694077 + Ik;
                        var Pw = Ak * -9.7762 + Dk * -0.694077 + Jk;
                        var Qw = Bk * -9.7762 + Ek * -0.694077 + Kk;
                        var Rw = Ok * -15.1629 + Rk * 0.131069 + Uk;
                        var Sw = Pk * -15.1629 + Sk * 0.131069 + Vk;
                        var Tw = Qk * -15.1629 + Tk * 0.131069 + Wk;
                        var Uw = Nh * 0.95716 + Qh * 0.289561;
                        var Vw = Oh * 0.95716 + Rh * 0.289561;
                        var Ww = Ph * 0.95716 + Sh * 0.289561;
                        var Xw = Nh * 0.289561 + Qh * -0.95716;
                        var Yw = Oh * 0.289561 + Rh * -0.95716;
                        var Zw = Ph * 0.289561 + Sh * -0.95716;
                        var ax = Th * -1.0;
                        var bx = Uh * -1.0;
                        var cx = Vh * -1.0;
                        var dx = Nh * -1.0672 + Qh * 8.77591 + Th * -0.144948 + Wh;
                        var ex = Oh * -1.0672 + Rh * 8.77591 + Uh * -0.144948 + Xh;
                        var fx = Ph * -1.0672 + Sh * 8.77591 + Vh * -0.144948 + Yh;
                        var gx = Mi * 0.949902 + Pi * 0.312548;
                        var hx = Ni * 0.949902 + Qi * 0.312548;
                        var ix = Oi * 0.949902 + Ri * 0.312548;
                        var jx = Mi * 0.312548 + Pi * -0.949902;
                        var kx = Ni * 0.312548 + Qi * -0.949902;
                        var lx = Oi * 0.312548 + Ri * -0.949902;
                        var mx = Si * -1.0;
                        var nx = Ti * -1.0;
                        var ox = Ui * -1.0;
                        var px = Mi * 0.707674 + Pi * 8.79553 + Si * -0.36416 + Vi;
                        var qx = Ni * 0.707674 + Qi * 8.79553 + Ti * -0.36416 + Wi;
                        var rx = Oi * 0.707674 + Ri * 8.79553 + Ui * -0.36416 + Xi;
                        var sx = bj * -1.0;
                        var tx = cj * -1.0;
                        var ux = dj * -1.0;
                        var vx = ej * -1.0;
                        var Ax = fj * -1.0;
                        var Bx = gj * -1.0;
                        var Cx = Yi * 5.89809 + bj * 7.31875 + ej * -0.144948 + Mi * -2.60746 + Pi * -2.45135e-7 + Si * -0.219212 + Vi;
                        var Dx = Zi * 5.89809 + cj * 7.31875 + fj * -0.144948 + Ni * -2.60746 + Qi * -2.45135e-7 + Ti * -0.219212 + Wi;
                        var Ex = aj * 5.89809 + dj * 7.31875 + gj * -0.144948 + Oi * -2.60746 + Ri * -2.45135e-7 + Ui * -0.219212 + Xi;
                        var Fx = Cd * 0.95716 + Fd * 0.289561;
                        var Gx = Dd * 0.95716 + Gd * 0.289561;
                        var Hx = Ed * 0.95716 + Hd * 0.289561;
                        var Ix = Cd * -0.289561 + Fd * 0.95716;
                        var Jx = Dd * -0.289561 + Gd * 0.95716;
                        var Kx = Ed * -0.289561 + Hd * 0.95716;
                        var Lx = Cd * 1.0672 + Fd * -8.77592 + Id * 0.144948 + Ld;
                        var Mx = Dd * 1.0672 + Gd * -8.77592 + Jd * 0.144948 + Md;
                        var Nx = Ed * 1.0672 + Hd * -8.77592 + Kd * 0.144948 + Nd;
                        var Ox = Be * 0.949902 + Ee * 0.312548;
                        var Px = Ce * 0.949902 + Fe * 0.312548;
                        var Qx = De * 0.949902 + Ge * 0.312548;
                        var Rx = Be * -0.312548 + Ee * 0.949902;
                        var Sx = Ce * -0.312548 + Fe * 0.949902;
                        var Tx = De * -0.312548 + Ge * 0.949902;
                        var Ux = Be * -0.707676 + Ee * -8.79553 + He * 0.36416 + Ke;
                        var Vx = Ce * -0.707676 + Fe * -8.79553 + Ie * 0.36416 + Le;
                        var Wx = De * -0.707676 + Ge * -8.79553 + Je * 0.36416 + Me;
                        var Xx = Ne * -5.89809 + Qe * -7.31874 + Te * 0.144948 + Be * 2.60746 + He * 0.219212 + Ke;
                        var Yx = Oe * -5.89809 + Re * -7.31874 + Ue * 0.144948 + Ce * 2.60746 + Ie * 0.219212 + Le;
                        var Zx = Pe * -5.89809 + Se * -7.31874 + Ve * 0.144948 + De * 2.60746 + Je * 0.219212 + Me;
                        var ay = Kf * 0.245176 + Nf * 5.41454e-8 + Qf * -0.969479;
                        var by = Lf * 0.245176 + Of * 5.41454e-8 + Rf * -0.969479;
                        var cy = Mf * 0.245176 + Pf * 5.41454e-8 + Sf * -0.969479;
                        var dy = Kf * 0.958205 + Nf * -0.152057 + Qf * 0.242325;
                        var ey = Lf * 0.958205 + Of * -0.152057 + Rf * 0.242325;
                        var fy = Mf * 0.958205 + Pf * -0.152057 + Sf * 0.242325;
                        var gy = Kf * -0.147416 + Nf * -0.988372 + Qf * -0.0372808;
                        var hy = Lf * -0.147416 + Of * -0.988372 + Rf * -0.0372808;
                        var iy = Mf * -0.147416 + Pf * -0.988372 + Sf * -0.0372808;
                        var jy = Kf * -3.79602 + Nf * 0.573436 + Qf * -2.0115 + Tf;
                        var ky = Lf * -3.79602 + Of * 0.573436 + Rf * -2.0115 + Uf;
                        var ly = Mf * -3.79602 + Pf * 0.573436 + Sf * -2.0115 + Vf;
                        var my = Fg * 0.236921 + Ig * 0.87271 + Lg * 0.426903;
                        var ny = Gg * 0.236921 + Jg * 0.87271 + Mg * 0.426903;
                        var oy = Hg * 0.236921 + Kg * 0.87271 + Ng * 0.426903;
                        var py = Fg * 0.965069 + Ig * -0.261995 + Lg * 1.40328e-8;
                        var qy = Gg * 0.965069 + Jg * -0.261995 + Mg * 1.40328e-8;
                        var ry = Hg * 0.965069 + Kg * -0.261995 + Ng * 1.40328e-8;
                        var sy = Fg * 0.111846 + Ig * 0.411991 + Lg * -0.904297;
                        var ty = Gg * 0.111846 + Jg * 0.411991 + Mg * -0.904297;
                        var uy = Hg * 0.111846 + Kg * 0.411991 + Ng * -0.904297;
                        var vy = Fg * -1.93078 + Ig * 1.83032 + Lg * 0.83807 + Og;
                        var Ay = Gg * -1.93078 + Jg * 1.83032 + Mg * 0.83807 + Pg;
                        var By = Hg * -1.93078 + Kg * 1.83032 + Ng * 0.83807 + Qg;
                        var Cy = Rg * 0.969479 + Ug * -0.242325 + Xg * 0.0372807;
                        var Dy = Sg * 0.969479 + Vg * -0.242325 + Yg * 0.0372807;
                        var Ey = Tg * 0.969479 + Wg * -0.242325 + Zg * 0.0372807;
                        var Fy = Rg * -0.242325 + Ug * -0.970184 + Xg * -0.00458704;
                        var Gy = Sg * -0.242325 + Vg * -0.970184 + Yg * -0.00458704;
                        var Hy = Tg * -0.242325 + Wg * -0.970184 + Zg * -0.00458704;
                        var Iy = Rg * 0.0372807 + Ug * -0.00458701 + Xg * -0.999294;
                        var Jy = Sg * 0.0372807 + Vg * -0.00458701 + Yg * -0.999294;
                        var Ky = Tg * 0.0372807 + Wg * -0.00458701 + Zg * -0.999294;
                        var Ly = Rg * 2.0115 + Ug * -0.443247 + Xg * 0.0319283 + Fg * -2.36804 + Ig * 7.25483e-7 + Lg * 5.71139e-7 + Og;
                        var My = Sg * 2.0115 + Vg * -0.443247 + Yg * 0.0319283 + Gg * -2.36804 + Jg * 7.25483e-7 + Mg * 5.71139e-7 + Pg;
                        var Ny = Tg * 2.0115 + Wg * -0.443247 + Zg * 0.0319283 + Hg * -2.36804 + Kg * 7.25483e-7 + Ng * 5.71139e-7 + Qg;
                        var Oy = Eb * 0.245176 + Hb * 5.41454e-8 + Kb * -0.969479;
                        var Py = Fb * 0.245176 + Ib * 5.41454e-8 + Lb * -0.969479;
                        var Qy = Gb * 0.245176 + Jb * 5.41454e-8 + Mb * -0.969479;
                        var Ry = Eb * -0.958205 + Hb * 0.152057 + Kb * -0.242325;
                        var Sy = Fb * -0.958205 + Ib * 0.152057 + Lb * -0.242325;
                        var Ty = Gb * -0.958205 + Jb * 0.152057 + Mb * -0.242325;
                        var Uy = Eb * 0.147416 + Hb * 0.988372 + Kb * 0.0372808;
                        var Vy = Fb * 0.147416 + Ib * 0.988372 + Lb * 0.0372808;
                        var Wy = Gb * 0.147416 + Jb * 0.988372 + Mb * 0.0372808;
                        var Xy = Eb * 3.79602 + Hb * -0.573436 + Kb * 2.0115 + Nb;
                        var Yy = Fb * 3.79602 + Ib * -0.573436 + Lb * 2.0115 + Ob;
                        var Zy = Gb * 3.79602 + Jb * -0.573436 + Mb * 2.0115 + Pb;
                        var az = Qj * 0.236921 + Tj * 0.87271 + Wj * 0.426903;
                        var bz = Rj * 0.236921 + Uj * 0.87271 + Xj * 0.426903;
                        var cz = Sj * 0.236921 + Vj * 0.87271 + Yj * 0.426903;
                        var dz = Qj * -0.965069 + Tj * 0.261995 + Wj * -1.14556e-8;
                        var ez = Rj * -0.965069 + Uj * 0.261995 + Xj * -1.14556e-8;
                        var fz = Sj * -0.965069 + Vj * 0.261995 + Yj * -1.14556e-8;
                        var gz = Qj * -0.111846 + Tj * -0.411991 + Wj * 0.904297;
                        var hz = Rj * -0.111846 + Uj * -0.411991 + Xj * 0.904297;
                        var iz = Sj * -0.111846 + Vj * -0.411991 + Yj * 0.904297;
                        var jz = Qj * 1.93078 + Tj * -1.83032 + Wj * -0.838069 + Zj;
                        var kz = Rj * 1.93078 + Uj * -1.83032 + Xj * -0.838069 + ak;
                        var lz = Sj * 1.93078 + Vj * -1.83032 + Yj * -0.838069 + bk;
                        var mz = ck * 0.969479 + fk * -0.242325 + ik * 0.0372807;
                        var nz = dk * 0.969479 + gk * -0.242325 + jk * 0.0372807;
                        var oz = ek * 0.969479 + hk * -0.242325 + kk * 0.0372807;
                        var pz = ck * 0.242325 + fk * 0.970184 + ik * 0.00458704;
                        var qz = dk * 0.242325 + gk * 0.970184 + jk * 0.00458704;
                        var rz = ek * 0.242325 + hk * 0.970184 + kk * 0.00458704;
                        var sz = ck * -0.0372807 + fk * 0.00458701 + ik * 0.999294;
                        var tz = dk * -0.0372807 + gk * 0.00458701 + jk * 0.999294;
                        var uz = ek * -0.0372807 + hk * 0.00458701 + kk * 0.999294;
                        var vz = ck * -2.0115 + fk * 0.443247 + ik * -0.0319283 + Qj * 2.36804 + Zj;
                        var Az = dk * -2.0115 + gk * 0.443247 + jk * -0.0319283 + Rj * 2.36804 + ak;
                        var Bz = ek * -2.0115 + hk * 0.443247 + kk * -0.0319283 + Sj * 2.36804 + bk;
                        var Cz = O * 7.15256e-7 + gw * 4.93876 + jw * -0.150521 + mw;
                        var Dz = P * 7.15256e-7 + hw * 4.93876 + kw * -0.150521 + nw;
                        var Ez = Q * 7.15256e-7 + iw * 4.93876 + lw * -0.150521 + ow;
                        var Fz = Math.abs(O) * 5.99336 + Math.abs(gw) * 4.91501 + Math.abs(jw) * 1.88726;
                        var Gz = Math.abs(P) * 5.99336 + Math.abs(hw) * 4.91501 + Math.abs(kw) * 1.88726;
                        var Hz = Math.abs(Q) * 5.99336 + Math.abs(iw) * 4.91501 + Math.abs(lw) * 1.88726;
                        var Iz = pw * 7.15256e-7 + sw * 4.93876 + vw * -0.150521 + Cw;
                        var Jz = qw * 7.15256e-7 + tw * 4.93876 + Aw * -0.150521 + Dw;
                        var Kz = rw * 7.15256e-7 + uw * 4.93876 + Bw * -0.150521 + Ew;
                        var Lz = Math.abs(pw) * 5.99336 + Math.abs(sw) * 4.91501 + Math.abs(vw) * 1.88726;
                        var Mz = Math.abs(qw) * 5.99336 + Math.abs(tw) * 4.91501 + Math.abs(Aw) * 1.88726;
                        var Nz = Math.abs(rw) * 5.99336 + Math.abs(uw) * 4.91501 + Math.abs(Bw) * 1.88726;
                        var Oz = Fw * 7.15256e-7 + Iw * 4.93876 + Lw * -0.150521 + Ow;
                        var Pz = Gw * 7.15256e-7 + Jw * 4.93876 + Mw * -0.150521 + Pw;
                        var Qz = Hw * 7.15256e-7 + Kw * 4.93876 + Nw * -0.150521 + Qw;
                        var Rz = Math.abs(Fw) * 5.99336 + Math.abs(Iw) * 4.91501 + Math.abs(Lw) * 1.88726;
                        var Sz = Math.abs(Gw) * 5.99336 + Math.abs(Jw) * 4.91501 + Math.abs(Mw) * 1.88726;
                        var Tz = Math.abs(Hw) * 5.99336 + Math.abs(Kw) * 4.91501 + Math.abs(Nw) * 1.88726;
                        var Uz = Lk * 7.15256e-7 + Ok * 4.93876 + Rk * -0.150521 + Rw;
                        var Vz = Mk * 7.15256e-7 + Pk * 4.93876 + Sk * -0.150521 + Sw;
                        var Wz = Nk * 7.15256e-7 + Qk * 4.93876 + Tk * -0.150521 + Tw;
                        var Xz = Math.abs(Lk) * 5.99336 + Math.abs(Ok) * 4.91501 + Math.abs(Rk) * 1.88726;
                        var Yz = Math.abs(Mk) * 5.99336 + Math.abs(Pk) * 4.91501 + Math.abs(Sk) * 1.88726;
                        var Zz = Math.abs(Nk) * 5.99336 + Math.abs(Qk) * 4.91501 + Math.abs(Tk) * 1.88726;
                        var aA = Uw * 7.15256e-7 + Xw * 4.93876 + ax * -0.150521 + dx;
                        var bA = Vw * 7.15256e-7 + Yw * 4.93876 + bx * -0.150521 + ex;
                        var cA = Ww * 7.15256e-7 + Zw * 4.93876 + cx * -0.150521 + fx;
                        var dA = Math.abs(Uw) * 5.99336 + Math.abs(Xw) * 4.91501 + Math.abs(ax) * 1.88726;
                        var eA = Math.abs(Vw) * 5.99336 + Math.abs(Yw) * 4.91501 + Math.abs(bx) * 1.88726;
                        var fA = Math.abs(Ww) * 5.99336 + Math.abs(Zw) * 4.91501 + Math.abs(cx) * 1.88726;
                        var gA = gx * 7.15256e-7 + jx * 4.93876 + mx * -0.150521 + px;
                        var hA = hx * 7.15256e-7 + kx * 4.93876 + nx * -0.150521 + qx;
                        var iA = ix * 7.15256e-7 + lx * 4.93876 + ox * -0.150521 + rx;
                        var jA = Math.abs(gx) * 5.99336 + Math.abs(jx) * 4.91501 + Math.abs(mx) * 1.88726;
                        var kA = Math.abs(hx) * 5.99336 + Math.abs(kx) * 4.91501 + Math.abs(nx) * 1.88726;
                        var lA = Math.abs(ix) * 5.99336 + Math.abs(lx) * 4.91501 + Math.abs(ox) * 1.88726;
                        var mA = Yi * 7.15256e-7 + sx * 4.93876 + vx * -0.150521 + Cx;
                        var nA = Zi * 7.15256e-7 + tx * 4.93876 + Ax * -0.150521 + Dx;
                        var oA = aj * 7.15256e-7 + ux * 4.93876 + Bx * -0.150521 + Ex;
                        var pA = Math.abs(Yi) * 5.99336 + Math.abs(sx) * 4.91501 + Math.abs(vx) * 1.88726;
                        var qA = Math.abs(Zi) * 5.99336 + Math.abs(tx) * 4.91501 + Math.abs(Ax) * 1.88726;
                        var rA = Math.abs(aj) * 5.99336 + Math.abs(ux) * 4.91501 + Math.abs(Bx) * 1.88726;
                        var sA = Fx * 7.15256e-7 + Ix * 4.93876 + Id * -0.150521 + Lx;
                        var tA = Gx * 7.15256e-7 + Jx * 4.93876 + Jd * -0.150521 + Mx;
                        var uA = Hx * 7.15256e-7 + Kx * 4.93876 + Kd * -0.150521 + Nx;
                        var vA = Math.abs(Fx) * 5.99336 + Math.abs(Ix) * 4.91501 + Math.abs(Id) * 1.88726;
                        var wA = Math.abs(Gx) * 5.99336 + Math.abs(Jx) * 4.91501 + Math.abs(Jd) * 1.88726;
                        var xA = Math.abs(Hx) * 5.99336 + Math.abs(Kx) * 4.91501 + Math.abs(Kd) * 1.88726;
                        var yA = Ox * 7.15256e-7 + Rx * 4.93876 + He * -0.150521 + Ux;
                        var zA = Px * 7.15256e-7 + Sx * 4.93876 + Ie * -0.150521 + Vx;
                        var AA = Qx * 7.15256e-7 + Tx * 4.93876 + Je * -0.150521 + Wx;
                        var BA = Math.abs(Ox) * 5.99336 + Math.abs(Rx) * 4.91501 + Math.abs(He) * 1.88726;
                        var CA = Math.abs(Px) * 5.99336 + Math.abs(Sx) * 4.91501 + Math.abs(Ie) * 1.88726;
                        var DA = Math.abs(Qx) * 5.99336 + Math.abs(Tx) * 4.91501 + Math.abs(Je) * 1.88726;
                        var EA = Ne * 7.15256e-7 + Qe * 4.93876 + Te * -0.150521 + Xx;
                        var FA = Oe * 7.15256e-7 + Re * 4.93876 + Ue * -0.150521 + Yx;
                        var GA = Pe * 7.15256e-7 + Se * 4.93876 + Ve * -0.150521 + Zx;
                        var HA = Math.abs(Ne) * 5.99336 + Math.abs(Qe) * 4.91501 + Math.abs(Te) * 1.88726;
                        var IA = Math.abs(Oe) * 5.99336 + Math.abs(Re) * 4.91501 + Math.abs(Ue) * 1.88726;
                        var JA = Math.abs(Pe) * 5.99336 + Math.abs(Se) * 4.91501 + Math.abs(Ve) * 1.88726;
                        var KA = ay * 7.15256e-7 + dy * 4.93876 + gy * -0.150521 + jy;
                        var LA = by * 7.15256e-7 + ey * 4.93876 + hy * -0.150521 + ky;
                        var MA = cy * 7.15256e-7 + fy * 4.93876 + iy * -0.150521 + ly;
                        var NA = Math.abs(ay) * 5.99336 + Math.abs(dy) * 4.91501 + Math.abs(gy) * 1.88726;
                        var OA = Math.abs(by) * 5.99336 + Math.abs(ey) * 4.91501 + Math.abs(hy) * 1.88726;
                        var PA = Math.abs(cy) * 5.99336 + Math.abs(fy) * 4.91501 + Math.abs(iy) * 1.88726;
                        var QA = my * 7.15256e-7 + py * 4.93876 + sy * -0.150521 + vy;
                        var RA = ny * 7.15256e-7 + qy * 4.93876 + ty * -0.150521 + Ay;
                        var SA = oy * 7.15256e-7 + ry * 4.93876 + uy * -0.150521 + By;
                        var TA = Math.abs(my) * 5.99336 + Math.abs(py) * 4.91501 + Math.abs(sy) * 1.88726;
                        var UA = Math.abs(ny) * 5.99336 + Math.abs(qy) * 4.91501 + Math.abs(ty) * 1.88726;
                        var VA = Math.abs(oy) * 5.99336 + Math.abs(ry) * 4.91501 + Math.abs(uy) * 1.88726;
                        var WA = Cy * 7.15256e-7 + Fy * 4.93876 + Iy * -0.150521 + Ly;
                        var XA = Dy * 7.15256e-7 + Gy * 4.93876 + Jy * -0.150521 + My;
                        var YA = Ey * 7.15256e-7 + Hy * 4.93876 + Ky * -0.150521 + Ny;
                        var ZA = Math.abs(Cy) * 5.99336 + Math.abs(Fy) * 4.91501 + Math.abs(Iy) * 1.88726;
                        var aB = Math.abs(Dy) * 5.99336 + Math.abs(Gy) * 4.91501 + Math.abs(Jy) * 1.88726;
                        var bB = Math.abs(Ey) * 5.99336 + Math.abs(Hy) * 4.91501 + Math.abs(Ky) * 1.88726;
                        var cB = Oy * 7.15256e-7 + Ry * 4.93876 + Uy * -0.150521 + Xy;
                        var dB = Py * 7.15256e-7 + Sy * 4.93876 + Vy * -0.150521 + Yy;
                        var eB = Qy * 7.15256e-7 + Ty * 4.93876 + Wy * -0.150521 + Zy;
                        var fB = Math.abs(Oy) * 5.99336 + Math.abs(Ry) * 4.91501 + Math.abs(Uy) * 1.88726;
                        var gB = Math.abs(Py) * 5.99336 + Math.abs(Sy) * 4.91501 + Math.abs(Vy) * 1.88726;
                        var hB = Math.abs(Qy) * 5.99336 + Math.abs(Ty) * 4.91501 + Math.abs(Wy) * 1.88726;
                        var iB = az * 7.15256e-7 + dz * 4.93876 + gz * -0.150521 + jz;
                        var jB = bz * 7.15256e-7 + ez * 4.93876 + hz * -0.150521 + kz;
                        var kB = cz * 7.15256e-7 + fz * 4.93876 + iz * -0.150521 + lz;
                        var lB = Math.abs(az) * 5.99336 + Math.abs(dz) * 4.91501 + Math.abs(gz) * 1.88726;
                        var mB = Math.abs(bz) * 5.99336 + Math.abs(ez) * 4.91501 + Math.abs(hz) * 1.88726;
                        var nB = Math.abs(cz) * 5.99336 + Math.abs(fz) * 4.91501 + Math.abs(iz) * 1.88726;
                        var oB = mz * 7.15256e-7 + pz * 4.93876 + sz * -0.150521 + vz;
                        var pB = nz * 7.15256e-7 + qz * 4.93876 + tz * -0.150521 + Az;
                        var qB = oz * 7.15256e-7 + rz * 4.93876 + uz * -0.150521 + Bz;
                        var rB = Math.abs(mz) * 5.99336 + Math.abs(pz) * 4.91501 + Math.abs(sz) * 1.88726;
                        var sB = Math.abs(nz) * 5.99336 + Math.abs(qz) * 4.91501 + Math.abs(tz) * 1.88726;
                        var tB = Math.abs(oz) * 5.99336 + Math.abs(rz) * 4.91501 + Math.abs(uz) * 1.88726;
                        var uB = Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Cz - Fz, Iz - Lz), Oz - Rz), Uz - Xz), aA - dA), gA - jA), mA - pA), sA - vA), yA - BA), EA - HA), KA - NA), QA - TA), WA - ZA), cB - fB), iB - lB), oB - rB);
                        var vB = Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Dz - Gz, Jz - Mz), Pz - Sz), Vz - Yz), bA - eA), hA - kA), nA - qA), tA - wA), zA - CA), FA - IA), LA - OA), RA - UA), XA - aB), dB - gB), jB - mB), pB - sB);
                        var wB = Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Ez - Hz, Kz - Nz), Qz - Tz), Wz - Zz), cA - fA), iA - lA), oA - rA), uA - xA), AA - DA), GA - JA), MA - PA), SA - VA), YA - bB), eB - hB), kB - nB), qB - tB);
                        var xB = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Cz + Fz, Iz + Lz), Oz + Rz), Uz + Xz), aA + dA), gA + jA), mA + pA), sA + vA), yA + BA), EA + HA), KA + NA), QA + TA), WA + ZA), cB + fB), iB + lB), oB + rB);
                        var yB = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Dz + Gz, Jz + Mz), Pz + Sz), Vz + Yz), bA + eA), hA + kA), nA + qA), tA + wA), zA + CA), FA + IA), LA + OA), RA + UA), XA + aB), dB + gB), jB + mB), pB + sB);
                        var zB = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Ez + Hz, Kz + Nz), Qz + Tz), Wz + Zz), cA + fA), iA + lA), oA + rA), uA + xA), AA + DA), GA + JA), MA + PA), SA + VA), YA + bB), eB + hB), kB + nB), qB + tB);
                        ftransforms[0] = 1.0;
                        ftransforms[1] = 0.0;
                        ftransforms[2] = 0.0;
                        ftransforms[3] = 0.0;
                        ftransforms[4] = 0.0;
                        ftransforms[5] = 1.0;
                        ftransforms[6] = 0.0;
                        ftransforms[7] = 0.0;
                        ftransforms[8] = 0.0;
                        ftransforms[9] = 0.0;
                        ftransforms[10] = 1.0;
                        ftransforms[11] = 0.0;
                        ftransforms[12] = 0.0;
                        ftransforms[13] = 0.0;
                        ftransforms[14] = 0.0;
                        ftransforms[15] = 1.0;
                        itransforms[0] = 1;
                        ftransforms[80] = 1.0;
                        ftransforms[81] = 0.0;
                        ftransforms[82] = 0.0;
                        ftransforms[83] = 0.0;
                        ftransforms[84] = 0.0;
                        ftransforms[85] = 1.0;
                        ftransforms[86] = 0.0;
                        ftransforms[87] = 0.0;
                        ftransforms[88] = 0.0;
                        ftransforms[89] = 0.0;
                        ftransforms[90] = 1.0;
                        ftransforms[91] = 0.0;
                        ftransforms[92] = 0.0;
                        ftransforms[93] = 0.0;
                        ftransforms[94] = 0.0;
                        ftransforms[95] = 1.0;
                        itransforms[5] = 1;
                        ftransforms[64] = 1.0;
                        ftransforms[65] = 0.0;
                        ftransforms[66] = 0.0;
                        ftransforms[67] = 0.0;
                        ftransforms[68] = 0.0;
                        ftransforms[69] = 1.0;
                        ftransforms[70] = 0.0;
                        ftransforms[71] = 0.0;
                        ftransforms[72] = 0.0;
                        ftransforms[73] = 0.0;
                        ftransforms[74] = 1.0;
                        ftransforms[75] = 0.0;
                        ftransforms[76] = 0.0;
                        ftransforms[77] = 0.0;
                        ftransforms[78] = 0.0;
                        ftransforms[79] = 1.0;
                        itransforms[4] = 1;
                        ftransforms[16] = 1.0;
                        ftransforms[17] = 0.0;
                        ftransforms[18] = 0.0;
                        ftransforms[19] = 0.0;
                        ftransforms[20] = 0.0;
                        ftransforms[21] = 1.0;
                        ftransforms[22] = 0.0;
                        ftransforms[23] = 0.0;
                        ftransforms[24] = 0.0;
                        ftransforms[25] = 0.0;
                        ftransforms[26] = 1.0;
                        ftransforms[27] = 0.0;
                        ftransforms[28] = 0.0;
                        ftransforms[29] = 0.0;
                        ftransforms[30] = 0.0210634;
                        ftransforms[31] = 1.0;
                        itransforms[1] = 1;
                        ftransforms[96] = 1.0;
                        ftransforms[97] = 0.0;
                        ftransforms[98] = 0.0;
                        ftransforms[99] = 0.0;
                        ftransforms[100] = 0.0;
                        ftransforms[101] = 1.0;
                        ftransforms[102] = 0.0;
                        ftransforms[103] = 0.0;
                        ftransforms[104] = 0.0;
                        ftransforms[105] = 0.0;
                        ftransforms[106] = 1.0;
                        ftransforms[107] = 0.0;
                        ftransforms[108] = 0.0;
                        ftransforms[109] = 0.0;
                        ftransforms[110] = 0.0;
                        ftransforms[111] = 1.0;
                        itransforms[6] = 1;
                        ftransforms[112] = 1.0;
                        ftransforms[113] = 0.0;
                        ftransforms[114] = 0.0;
                        ftransforms[115] = 0.0;
                        ftransforms[116] = 0.0;
                        ftransforms[117] = 1.0;
                        ftransforms[118] = 0.0;
                        ftransforms[119] = 0.0;
                        ftransforms[120] = 0.0;
                        ftransforms[121] = 0.0;
                        ftransforms[122] = 1.0;
                        ftransforms[123] = 0.0;
                        ftransforms[124] = 0.0;
                        ftransforms[125] = 0.0;
                        ftransforms[126] = 0.0;
                        ftransforms[127] = 1.0;
                        itransforms[7] = 1;
                        ftransforms[32] = 1.0;
                        ftransforms[33] = 0.0;
                        ftransforms[34] = 0.0;
                        ftransforms[35] = 0.0;
                        ftransforms[36] = 0.0;
                        ftransforms[37] = 1.0;
                        ftransforms[38] = 0.0;
                        ftransforms[39] = 0.0;
                        ftransforms[40] = 0.0;
                        ftransforms[41] = 0.0;
                        ftransforms[42] = 1.0;
                        ftransforms[43] = 0.0;
                        ftransforms[44] = 0.0;
                        ftransforms[45] = 0.0;
                        ftransforms[46] = 0.0;
                        ftransforms[47] = 1.0;
                        itransforms[2] = 1;
                        ftransforms[48] = 1.0;
                        ftransforms[49] = 0.0;
                        ftransforms[50] = 0.0;
                        ftransforms[51] = 0.0;
                        ftransforms[52] = 0.0;
                        ftransforms[53] = 0.996666;
                        ftransforms[54] = 0.0815906;
                        ftransforms[55] = 0.0;
                        ftransforms[56] = 0.0;
                        ftransforms[57] = -0.0815906;
                        ftransforms[58] = 0.996666;
                        ftransforms[59] = 0.0;
                        ftransforms[60] = 0.0;
                        ftransforms[61] = 0.0903893;
                        ftransforms[62] = -1.41448;
                        ftransforms[63] = 1.0;
                        itransforms[3] = 1;
                        ftransforms[128] = 0.999489;
                        ftransforms[129] = 0.0;
                        ftransforms[130] = -0.0319731;
                        ftransforms[131] = 0.0;
                        ftransforms[132] = 0.0;
                        ftransforms[133] = 1.0;
                        ftransforms[134] = 0.0;
                        ftransforms[135] = 0.0;
                        ftransforms[136] = 0.0319731;
                        ftransforms[137] = 0.0;
                        ftransforms[138] = 0.999489;
                        ftransforms[139] = 0.0;
                        ftransforms[140] = 0.00308145;
                        ftransforms[141] = 1.90734e-6;
                        ftransforms[142] = 0.434563;
                        ftransforms[143] = 1.0;
                        itransforms[8] = 1;
                        fboundingBoxes[0] = (dw + aw) * 0.5;
                        fboundingBoxes[1] = (ew + bw) * 0.5;
                        fboundingBoxes[2] = (fw + cw) * 0.5;
                        fboundingBoxes[3] = (dw - aw) * 0.5;
                        fboundingBoxes[4] = (ew - bw) * 0.5;
                        fboundingBoxes[5] = (fw - cw) * 0.5;
                        fboundingBoxes[6] = (Fv + Cv) * 0.5;
                        fboundingBoxes[7] = (Gv + Dv) * 0.5;
                        fboundingBoxes[8] = (Hv + Ev) * 0.5;
                        fboundingBoxes[9] = (Fv - Cv) * 0.5;
                        fboundingBoxes[10] = (Gv - Dv) * 0.5;
                        fboundingBoxes[11] = (Hv - Ev) * 0.5;
                        fboundingBoxes[12] = (xB + uB) * 0.5;
                        fboundingBoxes[13] = (yB + vB) * 0.5;
                        fboundingBoxes[14] = (zB + wB) * 0.5;
                        fboundingBoxes[15] = (xB - uB) * 0.5;
                        fboundingBoxes[16] = (yB - vB) * 0.5;
                        fboundingBoxes[17] = (zB - wB) * 0.5;
                        fboundingBoxes[18] = (qr + nr) * 0.5;
                        fboundingBoxes[19] = (rr + or) * 0.5;
                        fboundingBoxes[20] = (sr + pr) * 0.5;
                        fboundingBoxes[21] = (qr - nr) * 0.5;
                        fboundingBoxes[22] = (rr - or) * 0.5;
                        fboundingBoxes[23] = (sr - pr) * 0.5;
                        fboundingBoxes[24] = (Xo + Uo) * 0.5;
                        fboundingBoxes[25] = (Yo + Vo) * 0.5;
                        fboundingBoxes[26] = (Zo + Wo) * 0.5;
                        fboundingBoxes[27] = (Xo - Uo) * 0.5;
                        fboundingBoxes[28] = (Yo - Vo) * 0.5;
                        fboundingBoxes[29] = (Zo - Wo) * 0.5;
                        fboundingBoxes[30] = (Gu + Du) * 0.5;
                        fboundingBoxes[31] = (Hu + Eu) * 0.5;
                        fboundingBoxes[32] = (Iu + Fu) * 0.5;
                        fboundingBoxes[33] = (Gu - Du) * 0.5;
                        fboundingBoxes[34] = (Hu - Eu) * 0.5;
                        fboundingBoxes[35] = (Iu - Fu) * 0.5;
                        fboundingBoxes[36] = (st + pt) * 0.5;
                        fboundingBoxes[37] = (tt + qt) * 0.5;
                        fboundingBoxes[38] = (ut + rt) * 0.5;
                        fboundingBoxes[39] = (st - pt) * 0.5;
                        fboundingBoxes[40] = (tt - qt) * 0.5;
                        fboundingBoxes[41] = (ut - rt) * 0.5;
                        fboundingBoxes[42] = (Fs + Cs) * 0.5;
                        fboundingBoxes[43] = (Gs + Ds) * 0.5;
                        fboundingBoxes[44] = (Hs + Es) * 0.5;
                        fboundingBoxes[45] = (Fs - Cs) * 0.5;
                        fboundingBoxes[46] = (Gs - Ds) * 0.5;
                        fboundingBoxes[47] = (Hs - Es) * 0.5;
                        fboundingBoxes[48] = (kv + hv) * 0.5;
                        fboundingBoxes[49] = (lv + iv) * 0.5;
                        fboundingBoxes[50] = (mv + jv) * 0.5;
                        fboundingBoxes[51] = (kv - hv) * 0.5;
                        fboundingBoxes[52] = (lv - iv) * 0.5;
                        fboundingBoxes[53] = (mv - jv) * 0.5;
                        funiforms[0] = gp;
                        funiforms[1] = hp;
                        funiforms[2] = ip;
                        funiforms[3] = pp;
                        funiforms[4] = jp;
                        funiforms[5] = kp;
                        funiforms[6] = lp;
                        funiforms[7] = qp;
                        funiforms[8] = mp;
                        funiforms[9] = np;
                        funiforms[10] = op;
                        funiforms[11] = rp;
                        funiforms[12] = yp;
                        funiforms[13] = zp;
                        funiforms[14] = Ap;
                        funiforms[15] = Hp;
                        funiforms[16] = Bp;
                        funiforms[17] = Cp;
                        funiforms[18] = Dp;
                        funiforms[19] = Ip;
                        funiforms[20] = Ep;
                        funiforms[21] = Fp;
                        funiforms[22] = Gp;
                        funiforms[23] = Jp;
                        funiforms[24] = Qp;
                        funiforms[25] = Rp;
                        funiforms[26] = Sp;
                        funiforms[27] = Zp;
                        funiforms[28] = Tp;
                        funiforms[29] = Up;
                        funiforms[30] = Vp;
                        funiforms[31] = aq;
                        funiforms[32] = Wp;
                        funiforms[33] = Xp;
                        funiforms[34] = Yp;
                        funiforms[35] = bq;
                        funiforms[36] = iq;
                        funiforms[37] = jq;
                        funiforms[38] = kq;
                        funiforms[39] = rq;
                        funiforms[40] = lq;
                        funiforms[41] = mq;
                        funiforms[42] = nq;
                        funiforms[43] = sq;
                        funiforms[44] = oq;
                        funiforms[45] = pq;
                        funiforms[46] = qq;
                        funiforms[47] = tq;
                        funiforms[48] = uo;
                        funiforms[49] = uq;
                        funiforms[50] = vq;
                        funiforms[51] = Gq;
                        funiforms[52] = Aq;
                        funiforms[53] = Bq;
                        funiforms[54] = Cq;
                        funiforms[55] = Hq;
                        funiforms[56] = Dq;
                        funiforms[57] = Eq;
                        funiforms[58] = Fq;
                        funiforms[59] = Iq;
                        funiforms[60] = O;
                        funiforms[61] = P;
                        funiforms[62] = Q;
                        funiforms[63] = mw;
                        funiforms[64] = gw;
                        funiforms[65] = hw;
                        funiforms[66] = iw;
                        funiforms[67] = nw;
                        funiforms[68] = jw;
                        funiforms[69] = kw;
                        funiforms[70] = lw;
                        funiforms[71] = ow;
                        funiforms[180] = ay;
                        funiforms[181] = by;
                        funiforms[182] = cy;
                        funiforms[183] = jy;
                        funiforms[184] = dy;
                        funiforms[185] = ey;
                        funiforms[186] = fy;
                        funiforms[187] = ky;
                        funiforms[188] = gy;
                        funiforms[189] = hy;
                        funiforms[190] = iy;
                        funiforms[191] = ly;
                        funiforms[192] = my;
                        funiforms[193] = ny;
                        funiforms[194] = oy;
                        funiforms[195] = vy;
                        funiforms[196] = py;
                        funiforms[197] = qy;
                        funiforms[198] = ry;
                        funiforms[199] = Ay;
                        funiforms[200] = sy;
                        funiforms[201] = ty;
                        funiforms[202] = uy;
                        funiforms[203] = By;
                        funiforms[204] = Cy;
                        funiforms[205] = Dy;
                        funiforms[206] = Ey;
                        funiforms[207] = Ly;
                        funiforms[208] = Fy;
                        funiforms[209] = Gy;
                        funiforms[210] = Hy;
                        funiforms[211] = My;
                        funiforms[212] = Iy;
                        funiforms[213] = Jy;
                        funiforms[214] = Ky;
                        funiforms[215] = Ny;
                        funiforms[216] = Oy;
                        funiforms[217] = Py;
                        funiforms[218] = Qy;
                        funiforms[219] = Xy;
                        funiforms[220] = Ry;
                        funiforms[221] = Sy;
                        funiforms[222] = Ty;
                        funiforms[223] = Yy;
                        funiforms[224] = Uy;
                        funiforms[225] = Vy;
                        funiforms[226] = Wy;
                        funiforms[227] = Zy;
                        funiforms[228] = az;
                        funiforms[229] = bz;
                        funiforms[230] = cz;
                        funiforms[231] = jz;
                        funiforms[232] = dz;
                        funiforms[233] = ez;
                        funiforms[234] = fz;
                        funiforms[235] = kz;
                        funiforms[236] = gz;
                        funiforms[237] = hz;
                        funiforms[238] = iz;
                        funiforms[239] = lz;
                        funiforms[240] = mz;
                        funiforms[241] = nz;
                        funiforms[242] = oz;
                        funiforms[243] = vz;
                        funiforms[244] = pz;
                        funiforms[245] = qz;
                        funiforms[246] = rz;
                        funiforms[247] = Az;
                        funiforms[248] = sz;
                        funiforms[249] = tz;
                        funiforms[250] = uz;
                        funiforms[251] = Bz;
                        funiforms[72] = pw;
                        funiforms[73] = qw;
                        funiforms[74] = rw;
                        funiforms[75] = Cw;
                        funiforms[76] = sw;
                        funiforms[77] = tw;
                        funiforms[78] = uw;
                        funiforms[79] = Dw;
                        funiforms[80] = vw;
                        funiforms[81] = Aw;
                        funiforms[82] = Bw;
                        funiforms[83] = Ew;
                        funiforms[84] = Fw;
                        funiforms[85] = Gw;
                        funiforms[86] = Hw;
                        funiforms[87] = Ow;
                        funiforms[88] = Iw;
                        funiforms[89] = Jw;
                        funiforms[90] = Kw;
                        funiforms[91] = Pw;
                        funiforms[92] = Lw;
                        funiforms[93] = Mw;
                        funiforms[94] = Nw;
                        funiforms[95] = Qw;
                        funiforms[96] = Lk;
                        funiforms[97] = Mk;
                        funiforms[98] = Nk;
                        funiforms[99] = Rw;
                        funiforms[100] = Ok;
                        funiforms[101] = Pk;
                        funiforms[102] = Qk;
                        funiforms[103] = Sw;
                        funiforms[104] = Rk;
                        funiforms[105] = Sk;
                        funiforms[106] = Tk;
                        funiforms[107] = Tw;
                        funiforms[108] = Uw;
                        funiforms[109] = Vw;
                        funiforms[110] = Ww;
                        funiforms[111] = dx;
                        funiforms[112] = Xw;
                        funiforms[113] = Yw;
                        funiforms[114] = Zw;
                        funiforms[115] = ex;
                        funiforms[116] = ax;
                        funiforms[117] = bx;
                        funiforms[118] = cx;
                        funiforms[119] = fx;
                        funiforms[120] = gx;
                        funiforms[121] = hx;
                        funiforms[122] = ix;
                        funiforms[123] = px;
                        funiforms[124] = jx;
                        funiforms[125] = kx;
                        funiforms[126] = lx;
                        funiforms[127] = qx;
                        funiforms[128] = mx;
                        funiforms[129] = nx;
                        funiforms[130] = ox;
                        funiforms[131] = rx;
                        funiforms[132] = Yi;
                        funiforms[133] = Zi;
                        funiforms[134] = aj;
                        funiforms[135] = Cx;
                        funiforms[136] = sx;
                        funiforms[137] = tx;
                        funiforms[138] = ux;
                        funiforms[139] = Dx;
                        funiforms[140] = vx;
                        funiforms[141] = Ax;
                        funiforms[142] = Bx;
                        funiforms[143] = Ex;
                        funiforms[144] = Fx;
                        funiforms[145] = Gx;
                        funiforms[146] = Hx;
                        funiforms[147] = Lx;
                        funiforms[148] = Ix;
                        funiforms[149] = Jx;
                        funiforms[150] = Kx;
                        funiforms[151] = Mx;
                        funiforms[152] = Id;
                        funiforms[153] = Jd;
                        funiforms[154] = Kd;
                        funiforms[155] = Nx;
                        funiforms[156] = Ox;
                        funiforms[157] = Px;
                        funiforms[158] = Qx;
                        funiforms[159] = Ux;
                        funiforms[160] = Rx;
                        funiforms[161] = Sx;
                        funiforms[162] = Tx;
                        funiforms[163] = Vx;
                        funiforms[164] = He;
                        funiforms[165] = Ie;
                        funiforms[166] = Je;
                        funiforms[167] = Wx;
                        funiforms[168] = Ne;
                        funiforms[169] = Oe;
                        funiforms[170] = Pe;
                        funiforms[171] = Xx;
                        funiforms[172] = Qe;
                        funiforms[173] = Re;
                        funiforms[174] = Se;
                        funiforms[175] = Yx;
                        funiforms[176] = Te;
                        funiforms[177] = Ue;
                        funiforms[178] = Ve;
                        funiforms[179] = Zx;
                        funiforms[252] = Is;
                        funiforms[253] = Js;
                        funiforms[254] = Ks;
                        funiforms[255] = Os;
                        funiforms[256] = Xk;
                        funiforms[257] = Yk;
                        funiforms[258] = Zk;
                        funiforms[259] = Ps;
                        funiforms[260] = Ls;
                        funiforms[261] = Ms;
                        funiforms[262] = Ns;
                        funiforms[263] = Qs;
                        funiforms[264] = Rs;
                        funiforms[265] = Ss;
                        funiforms[266] = Ts;
                        funiforms[267] = at;
                        funiforms[268] = Us;
                        funiforms[269] = Vs;
                        funiforms[270] = Ws;
                        funiforms[271] = bt;
                        funiforms[272] = Xs;
                        funiforms[273] = Ys;
                        funiforms[274] = Zs;
                        funiforms[275] = ct;
                        funiforms[276] = Iv;
                        funiforms[277] = Jv;
                        funiforms[278] = Kv;
                        funiforms[279] = Rv;
                        funiforms[280] = Lv;
                        funiforms[281] = Mv;
                        funiforms[282] = Nv;
                        funiforms[283] = Sv;
                        funiforms[284] = Ov;
                        funiforms[285] = Pv;
                        funiforms[286] = Qv;
                        funiforms[287] = Tv;
                        funiforms[288] = Fo;
                        funiforms[289] = Go;
                        funiforms[290] = Ho;
                        funiforms[291] = Lo;
                        funiforms[292] = Xk;
                        funiforms[293] = Yk;
                        funiforms[294] = Zk;
                        funiforms[295] = Mo;
                        funiforms[296] = Io;
                        funiforms[297] = Jo;
                        funiforms[298] = Ko;
                        funiforms[299] = No;
                        funiforms[300] = vt;
                        funiforms[301] = wt;
                        funiforms[302] = xt;
                        funiforms[303] = Et;
                        funiforms[304] = yt;
                        funiforms[305] = zt;
                        funiforms[306] = At;
                        funiforms[307] = Ft;
                        funiforms[308] = Bt;
                        funiforms[309] = Ct;
                        funiforms[310] = Dt;
                        funiforms[311] = Gt;
                        funiforms[312] = Ht;
                        funiforms[313] = It;
                        funiforms[314] = Jt;
                        funiforms[315] = Qt;
                        funiforms[316] = Kt;
                        funiforms[317] = Lt;
                        funiforms[318] = Mt;
                        funiforms[319] = Rt;
                        funiforms[320] = Nt;
                        funiforms[321] = Ot;
                        funiforms[322] = Pt;
                        funiforms[323] = St;
                        funiforms[324] = hn;
                        funiforms[325] = jn;
                        funiforms[326] = kn;
                        funiforms[327] = Tt;
                        funiforms[328] = ln;
                        funiforms[329] = mn;
                        funiforms[330] = nn;
                        funiforms[331] = Ut;
                        funiforms[332] = on;
                        funiforms[333] = pn;
                        funiforms[334] = qn;
                        funiforms[335] = Vt;
                        funiforms[336] = io;
                        funiforms[337] = jo;
                        funiforms[338] = ko;
                        funiforms[339] = cu;
                        funiforms[340] = Wt;
                        funiforms[341] = Xt;
                        funiforms[342] = Yt;
                        funiforms[343] = du;
                        funiforms[344] = Zt;
                        funiforms[345] = au;
                        funiforms[346] = bu;
                        funiforms[347] = eu;
                        funiforms[348] = tr;
                        funiforms[349] = ur;
                        funiforms[350] = vr;
                        funiforms[351] = Cr;
                        funiforms[352] = wr;
                        funiforms[353] = xr;
                        funiforms[354] = yr;
                        funiforms[355] = Dr;
                        funiforms[356] = zr;
                        funiforms[357] = Ar;
                        funiforms[358] = Br;
                        funiforms[359] = Er;
                        funiforms[360] = Fr;
                        funiforms[361] = Gr;
                        funiforms[362] = Hr;
                        funiforms[363] = Or;
                        funiforms[364] = Ir;
                        funiforms[365] = Jr;
                        funiforms[366] = Kr;
                        funiforms[367] = Pr;
                        funiforms[368] = Lr;
                        funiforms[369] = Mr;
                        funiforms[370] = Nr;
                        funiforms[371] = Qr;
                        funiforms[372] = hn;
                        funiforms[373] = jn;
                        funiforms[374] = kn;
                        funiforms[375] = Rr;
                        funiforms[376] = ln;
                        funiforms[377] = mn;
                        funiforms[378] = nn;
                        funiforms[379] = Sr;
                        funiforms[380] = on;
                        funiforms[381] = pn;
                        funiforms[382] = qn;
                        funiforms[383] = Tr;
                        funiforms[384] = io;
                        funiforms[385] = jo;
                        funiforms[386] = ko;
                        funiforms[387] = as;
                        funiforms[388] = Ur;
                        funiforms[389] = Vr;
                        funiforms[390] = Wr;
                        funiforms[391] = bs;
                        funiforms[392] = Xr;
                        funiforms[393] = Yr;
                        funiforms[394] = Zr;
                        funiforms[395] = cs;
                        funiforms[396] = O;
                        funiforms[397] = P;
                        funiforms[398] = Q;
                        funiforms[399] = tv;
                        funiforms[400] = nv;
                        funiforms[401] = ov;
                        funiforms[402] = pv;
                        funiforms[403] = uv;
                        funiforms[404] = qv;
                        funiforms[405] = rv;
                        funiforms[406] = sv;
                        funiforms[407] = vv;
                        funiforms[408] = Pu;
                        funiforms[409] = Qu;
                        funiforms[410] = Ru;
                        funiforms[411] = Yu;
                        funiforms[412] = Su;
                        funiforms[413] = Tu;
                        funiforms[414] = Uu;
                        funiforms[415] = Zu;
                        funiforms[416] = Vu;
                        funiforms[417] = Wu;
                        funiforms[418] = Xu;
                        funiforms[419] = av;
                        ouniforms[0] = ostate[0];
                        ouniforms[1] = ostate[2];
                        ouniforms[2] = ostate[1];
                    };

                    instance.render = function(viewMatrix, projectionMatrix, layerName, renderQueues)
                    {
                        instance.renderSequence = ++global.sequence;
                        var viewProjectionMatrix = instance.viewProjectionMatrix;
                        engine.matrix4x4Mul(projectionMatrix, viewMatrix, viewProjectionMatrix);
                        var funiforms = instance.funiforms;
                        var ouniforms = instance.ouniforms;
                        var itransforms = instance.itransforms;
                        var ftransforms = instance.ftransforms;
                        var fboundingBoxes = instance.fboundingBoxes;

                        // mesh, deformer 'pasted__polySurface238Shape', shader 'pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'
                        var s_ = instance.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[296];
                        _b[25] = funiforms[297];
                        _b[26] = funiforms[298];
                        _b[27] = funiforms[299];
                        _b[20] = funiforms[292];
                        _b[21] = funiforms[293];
                        _b[22] = funiforms[294];
                        _b[23] = funiforms[295];
                        _b[16] = funiforms[288];
                        _b[17] = funiforms[289];
                        _b[18] = funiforms[290];
                        _b[19] = funiforms[291];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        s_.renderJobs = null;
                        // mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface8Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[144] = funiforms[68];
                        _b[145] = funiforms[69];
                        _b[146] = funiforms[70];
                        _b[147] = funiforms[71];
                        _b[148] = funiforms[80];
                        _b[149] = funiforms[81];
                        _b[150] = funiforms[82];
                        _b[151] = funiforms[83];
                        _b[152] = funiforms[92];
                        _b[153] = funiforms[93];
                        _b[154] = funiforms[94];
                        _b[155] = funiforms[95];
                        _b[156] = funiforms[104];
                        _b[157] = funiforms[105];
                        _b[158] = funiforms[106];
                        _b[159] = funiforms[107];
                        _b[160] = funiforms[116];
                        _b[161] = funiforms[117];
                        _b[162] = funiforms[118];
                        _b[163] = funiforms[119];
                        _b[164] = funiforms[128];
                        _b[165] = funiforms[129];
                        _b[166] = funiforms[130];
                        _b[167] = funiforms[131];
                        _b[168] = funiforms[140];
                        _b[169] = funiforms[141];
                        _b[170] = funiforms[142];
                        _b[171] = funiforms[143];
                        _b[172] = funiforms[152];
                        _b[173] = funiforms[153];
                        _b[174] = funiforms[154];
                        _b[175] = funiforms[155];
                        _b[176] = funiforms[164];
                        _b[177] = funiforms[165];
                        _b[178] = funiforms[166];
                        _b[179] = funiforms[167];
                        _b[180] = funiforms[176];
                        _b[181] = funiforms[177];
                        _b[182] = funiforms[178];
                        _b[183] = funiforms[179];
                        _b[184] = funiforms[188];
                        _b[185] = funiforms[189];
                        _b[186] = funiforms[190];
                        _b[187] = funiforms[191];
                        _b[188] = funiforms[200];
                        _b[189] = funiforms[201];
                        _b[190] = funiforms[202];
                        _b[191] = funiforms[203];
                        _b[192] = funiforms[212];
                        _b[193] = funiforms[213];
                        _b[194] = funiforms[214];
                        _b[195] = funiforms[215];
                        _b[196] = funiforms[224];
                        _b[197] = funiforms[225];
                        _b[198] = funiforms[226];
                        _b[199] = funiforms[227];
                        _b[200] = funiforms[236];
                        _b[201] = funiforms[237];
                        _b[202] = funiforms[238];
                        _b[203] = funiforms[239];
                        _b[204] = funiforms[248];
                        _b[205] = funiforms[249];
                        _b[206] = funiforms[250];
                        _b[207] = funiforms[251];
                        _b[80] = funiforms[64];
                        _b[81] = funiforms[65];
                        _b[82] = funiforms[66];
                        _b[83] = funiforms[67];
                        _b[84] = funiforms[76];
                        _b[85] = funiforms[77];
                        _b[86] = funiforms[78];
                        _b[87] = funiforms[79];
                        _b[88] = funiforms[88];
                        _b[89] = funiforms[89];
                        _b[90] = funiforms[90];
                        _b[91] = funiforms[91];
                        _b[92] = funiforms[100];
                        _b[93] = funiforms[101];
                        _b[94] = funiforms[102];
                        _b[95] = funiforms[103];
                        _b[96] = funiforms[112];
                        _b[97] = funiforms[113];
                        _b[98] = funiforms[114];
                        _b[99] = funiforms[115];
                        _b[100] = funiforms[124];
                        _b[101] = funiforms[125];
                        _b[102] = funiforms[126];
                        _b[103] = funiforms[127];
                        _b[104] = funiforms[136];
                        _b[105] = funiforms[137];
                        _b[106] = funiforms[138];
                        _b[107] = funiforms[139];
                        _b[108] = funiforms[148];
                        _b[109] = funiforms[149];
                        _b[110] = funiforms[150];
                        _b[111] = funiforms[151];
                        _b[112] = funiforms[160];
                        _b[113] = funiforms[161];
                        _b[114] = funiforms[162];
                        _b[115] = funiforms[163];
                        _b[116] = funiforms[172];
                        _b[117] = funiforms[173];
                        _b[118] = funiforms[174];
                        _b[119] = funiforms[175];
                        _b[120] = funiforms[184];
                        _b[121] = funiforms[185];
                        _b[122] = funiforms[186];
                        _b[123] = funiforms[187];
                        _b[124] = funiforms[196];
                        _b[125] = funiforms[197];
                        _b[126] = funiforms[198];
                        _b[127] = funiforms[199];
                        _b[128] = funiforms[208];
                        _b[129] = funiforms[209];
                        _b[130] = funiforms[210];
                        _b[131] = funiforms[211];
                        _b[132] = funiforms[220];
                        _b[133] = funiforms[221];
                        _b[134] = funiforms[222];
                        _b[135] = funiforms[223];
                        _b[136] = funiforms[232];
                        _b[137] = funiforms[233];
                        _b[138] = funiforms[234];
                        _b[139] = funiforms[235];
                        _b[140] = funiforms[244];
                        _b[141] = funiforms[245];
                        _b[142] = funiforms[246];
                        _b[143] = funiforms[247];
                        _b[16] = funiforms[60];
                        _b[17] = funiforms[61];
                        _b[18] = funiforms[62];
                        _b[19] = funiforms[63];
                        _b[20] = funiforms[72];
                        _b[21] = funiforms[73];
                        _b[22] = funiforms[74];
                        _b[23] = funiforms[75];
                        _b[24] = funiforms[84];
                        _b[25] = funiforms[85];
                        _b[26] = funiforms[86];
                        _b[27] = funiforms[87];
                        _b[28] = funiforms[96];
                        _b[29] = funiforms[97];
                        _b[30] = funiforms[98];
                        _b[31] = funiforms[99];
                        _b[32] = funiforms[108];
                        _b[33] = funiforms[109];
                        _b[34] = funiforms[110];
                        _b[35] = funiforms[111];
                        _b[36] = funiforms[120];
                        _b[37] = funiforms[121];
                        _b[38] = funiforms[122];
                        _b[39] = funiforms[123];
                        _b[40] = funiforms[132];
                        _b[41] = funiforms[133];
                        _b[42] = funiforms[134];
                        _b[43] = funiforms[135];
                        _b[44] = funiforms[144];
                        _b[45] = funiforms[145];
                        _b[46] = funiforms[146];
                        _b[47] = funiforms[147];
                        _b[48] = funiforms[156];
                        _b[49] = funiforms[157];
                        _b[50] = funiforms[158];
                        _b[51] = funiforms[159];
                        _b[52] = funiforms[168];
                        _b[53] = funiforms[169];
                        _b[54] = funiforms[170];
                        _b[55] = funiforms[171];
                        _b[56] = funiforms[180];
                        _b[57] = funiforms[181];
                        _b[58] = funiforms[182];
                        _b[59] = funiforms[183];
                        _b[60] = funiforms[192];
                        _b[61] = funiforms[193];
                        _b[62] = funiforms[194];
                        _b[63] = funiforms[195];
                        _b[64] = funiforms[204];
                        _b[65] = funiforms[205];
                        _b[66] = funiforms[206];
                        _b[67] = funiforms[207];
                        _b[68] = funiforms[216];
                        _b[69] = funiforms[217];
                        _b[70] = funiforms[218];
                        _b[71] = funiforms[219];
                        _b[72] = funiforms[228];
                        _b[73] = funiforms[229];
                        _b[74] = funiforms[230];
                        _b[75] = funiforms[231];
                        _b[76] = funiforms[240];
                        _b[77] = funiforms[241];
                        _b[78] = funiforms[242];
                        _b[79] = funiforms[243];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface12Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[284];
                        _b[25] = funiforms[285];
                        _b[26] = funiforms[286];
                        _b[27] = funiforms[287];
                        _b[20] = funiforms[280];
                        _b[21] = funiforms[281];
                        _b[22] = funiforms[282];
                        _b[23] = funiforms[283];
                        _b[16] = funiforms[276];
                        _b[17] = funiforms[277];
                        _b[18] = funiforms[278];
                        _b[19] = funiforms[279];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface11Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[404];
                        _b[25] = funiforms[405];
                        _b[26] = funiforms[406];
                        _b[27] = funiforms[407];
                        _b[20] = funiforms[400];
                        _b[21] = funiforms[401];
                        _b[22] = funiforms[402];
                        _b[23] = funiforms[403];
                        _b[16] = funiforms[396];
                        _b[17] = funiforms[397];
                        _b[18] = funiforms[398];
                        _b[19] = funiforms[399];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface239Shape', shader 'pasted__pasted__lambert5'
                        var s_ = instance.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[56] = funiforms[8];
                        _b[57] = funiforms[9];
                        _b[58] = funiforms[10];
                        _b[59] = funiforms[11];
                        _b[60] = funiforms[20];
                        _b[61] = funiforms[21];
                        _b[62] = funiforms[22];
                        _b[63] = funiforms[23];
                        _b[64] = funiforms[32];
                        _b[65] = funiforms[33];
                        _b[66] = funiforms[34];
                        _b[67] = funiforms[35];
                        _b[68] = funiforms[44];
                        _b[69] = funiforms[45];
                        _b[70] = funiforms[46];
                        _b[71] = funiforms[47];
                        _b[72] = funiforms[56];
                        _b[73] = funiforms[57];
                        _b[74] = funiforms[58];
                        _b[75] = funiforms[59];
                        _b[36] = funiforms[4];
                        _b[37] = funiforms[5];
                        _b[38] = funiforms[6];
                        _b[39] = funiforms[7];
                        _b[40] = funiforms[16];
                        _b[41] = funiforms[17];
                        _b[42] = funiforms[18];
                        _b[43] = funiforms[19];
                        _b[44] = funiforms[28];
                        _b[45] = funiforms[29];
                        _b[46] = funiforms[30];
                        _b[47] = funiforms[31];
                        _b[48] = funiforms[40];
                        _b[49] = funiforms[41];
                        _b[50] = funiforms[42];
                        _b[51] = funiforms[43];
                        _b[52] = funiforms[52];
                        _b[53] = funiforms[53];
                        _b[54] = funiforms[54];
                        _b[55] = funiforms[55];
                        _b[16] = funiforms[0];
                        _b[17] = funiforms[1];
                        _b[18] = funiforms[2];
                        _b[19] = funiforms[3];
                        _b[20] = funiforms[12];
                        _b[21] = funiforms[13];
                        _b[22] = funiforms[14];
                        _b[23] = funiforms[15];
                        _b[24] = funiforms[24];
                        _b[25] = funiforms[25];
                        _b[26] = funiforms[26];
                        _b[27] = funiforms[27];
                        _b[28] = funiforms[36];
                        _b[29] = funiforms[37];
                        _b[30] = funiforms[38];
                        _b[31] = funiforms[39];
                        _b[32] = funiforms[48];
                        _b[33] = funiforms[49];
                        _b[34] = funiforms[50];
                        _b[35] = funiforms[51];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[1];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface251Shape', shader 'pasted__pasted__lambert5'
                        var s_ = instance.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[32] = funiforms[260];
                        _b[33] = funiforms[261];
                        _b[34] = funiforms[262];
                        _b[35] = funiforms[263];
                        _b[36] = funiforms[272];
                        _b[37] = funiforms[273];
                        _b[38] = funiforms[274];
                        _b[39] = funiforms[275];
                        _b[24] = funiforms[256];
                        _b[25] = funiforms[257];
                        _b[26] = funiforms[258];
                        _b[27] = funiforms[259];
                        _b[28] = funiforms[268];
                        _b[29] = funiforms[269];
                        _b[30] = funiforms[270];
                        _b[31] = funiforms[271];
                        _b[16] = funiforms[252];
                        _b[17] = funiforms[253];
                        _b[18] = funiforms[254];
                        _b[19] = funiforms[255];
                        _b[20] = funiforms[264];
                        _b[21] = funiforms[265];
                        _b[22] = funiforms[266];
                        _b[23] = funiforms[267];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[1];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface252Shape', shader 'pasted__pasted__lambert5'
                        var s_ = instance.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[48] = funiforms[308];
                        _b[49] = funiforms[309];
                        _b[50] = funiforms[310];
                        _b[51] = funiforms[311];
                        _b[52] = funiforms[320];
                        _b[53] = funiforms[321];
                        _b[54] = funiforms[322];
                        _b[55] = funiforms[323];
                        _b[56] = funiforms[332];
                        _b[57] = funiforms[333];
                        _b[58] = funiforms[334];
                        _b[59] = funiforms[335];
                        _b[60] = funiforms[344];
                        _b[61] = funiforms[345];
                        _b[62] = funiforms[346];
                        _b[63] = funiforms[347];
                        _b[32] = funiforms[304];
                        _b[33] = funiforms[305];
                        _b[34] = funiforms[306];
                        _b[35] = funiforms[307];
                        _b[36] = funiforms[316];
                        _b[37] = funiforms[317];
                        _b[38] = funiforms[318];
                        _b[39] = funiforms[319];
                        _b[40] = funiforms[328];
                        _b[41] = funiforms[329];
                        _b[42] = funiforms[330];
                        _b[43] = funiforms[331];
                        _b[44] = funiforms[340];
                        _b[45] = funiforms[341];
                        _b[46] = funiforms[342];
                        _b[47] = funiforms[343];
                        _b[16] = funiforms[300];
                        _b[17] = funiforms[301];
                        _b[18] = funiforms[302];
                        _b[19] = funiforms[303];
                        _b[20] = funiforms[312];
                        _b[21] = funiforms[313];
                        _b[22] = funiforms[314];
                        _b[23] = funiforms[315];
                        _b[24] = funiforms[324];
                        _b[25] = funiforms[325];
                        _b[26] = funiforms[326];
                        _b[27] = funiforms[327];
                        _b[28] = funiforms[336];
                        _b[29] = funiforms[337];
                        _b[30] = funiforms[338];
                        _b[31] = funiforms[339];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[1];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface250Shape', shader 'pasted__pasted__lambert5'
                        var s_ = instance.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[48] = funiforms[356];
                        _b[49] = funiforms[357];
                        _b[50] = funiforms[358];
                        _b[51] = funiforms[359];
                        _b[52] = funiforms[368];
                        _b[53] = funiforms[369];
                        _b[54] = funiforms[370];
                        _b[55] = funiforms[371];
                        _b[56] = funiforms[380];
                        _b[57] = funiforms[381];
                        _b[58] = funiforms[382];
                        _b[59] = funiforms[383];
                        _b[60] = funiforms[392];
                        _b[61] = funiforms[393];
                        _b[62] = funiforms[394];
                        _b[63] = funiforms[395];
                        _b[32] = funiforms[352];
                        _b[33] = funiforms[353];
                        _b[34] = funiforms[354];
                        _b[35] = funiforms[355];
                        _b[36] = funiforms[364];
                        _b[37] = funiforms[365];
                        _b[38] = funiforms[366];
                        _b[39] = funiforms[367];
                        _b[40] = funiforms[376];
                        _b[41] = funiforms[377];
                        _b[42] = funiforms[378];
                        _b[43] = funiforms[379];
                        _b[44] = funiforms[388];
                        _b[45] = funiforms[389];
                        _b[46] = funiforms[390];
                        _b[47] = funiforms[391];
                        _b[16] = funiforms[348];
                        _b[17] = funiforms[349];
                        _b[18] = funiforms[350];
                        _b[19] = funiforms[351];
                        _b[20] = funiforms[360];
                        _b[21] = funiforms[361];
                        _b[22] = funiforms[362];
                        _b[23] = funiforms[363];
                        _b[24] = funiforms[372];
                        _b[25] = funiforms[373];
                        _b[26] = funiforms[374];
                        _b[27] = funiforms[375];
                        _b[28] = funiforms[384];
                        _b[29] = funiforms[385];
                        _b[30] = funiforms[386];
                        _b[31] = funiforms[387];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[1];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface253Shape', shader 'pasted__pasted__lambert2'
                        var s_ = instance.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[416];
                        _b[25] = funiforms[417];
                        _b[26] = funiforms[418];
                        _b[27] = funiforms[419];
                        _b[20] = funiforms[412];
                        _b[21] = funiforms[413];
                        _b[22] = funiforms[414];
                        _b[23] = funiforms[415];
                        _b[16] = funiforms[408];
                        _b[17] = funiforms[409];
                        _b[18] = funiforms[410];
                        _b[19] = funiforms[411];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[2];
                        s_.renderJobs = null;

                        var jobIt = renderQueues.begin;
                        var jobEnd = renderQueues.end;
                        if (itransforms[0])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface12Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface12Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[0];
                                data[1] = ftransforms[1];
                                data[2] = ftransforms[2];
                                data[3] = ftransforms[3];
                                data[4] = ftransforms[4];
                                data[5] = ftransforms[5];
                                data[6] = ftransforms[6];
                                data[7] = ftransforms[7];
                                data[8] = ftransforms[8];
                                data[9] = ftransforms[9];
                                data[10] = ftransforms[10];
                                data[11] = ftransforms[11];
                                data[12] = ftransforms[12];
                                data[13] = ftransforms[13];
                                data[14] = ftransforms[14];
                                data[15] = ftransforms[15];
                                renderJob.draw = global.draw.f;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[1])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface11Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface11Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[16];
                                data[1] = ftransforms[17];
                                data[2] = ftransforms[18];
                                data[3] = ftransforms[19];
                                data[4] = ftransforms[20];
                                data[5] = ftransforms[21];
                                data[6] = ftransforms[22];
                                data[7] = ftransforms[23];
                                data[8] = ftransforms[24];
                                data[9] = ftransforms[25];
                                data[10] = ftransforms[26];
                                data[11] = ftransforms[27];
                                data[12] = ftransforms[28];
                                data[13] = ftransforms[29];
                                data[14] = ftransforms[30];
                                data[15] = ftransforms[31];
                                renderJob.draw = global.draw.b;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[2])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface8Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface8Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[32];
                                data[1] = ftransforms[33];
                                data[2] = ftransforms[34];
                                data[3] = ftransforms[35];
                                data[4] = ftransforms[36];
                                data[5] = ftransforms[37];
                                data[6] = ftransforms[38];
                                data[7] = ftransforms[39];
                                data[8] = ftransforms[40];
                                data[9] = ftransforms[41];
                                data[10] = ftransforms[42];
                                data[11] = ftransforms[43];
                                data[12] = ftransforms[44];
                                data[13] = ftransforms[45];
                                data[14] = ftransforms[46];
                                data[15] = ftransforms[47];
                                renderJob.draw = global.draw.c;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[3])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface239Shape_pasted____pasted____lambert5_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[48];
                                data[1] = ftransforms[49];
                                data[2] = ftransforms[50];
                                data[3] = ftransforms[51];
                                data[4] = ftransforms[52];
                                data[5] = ftransforms[53];
                                data[6] = ftransforms[54];
                                data[7] = ftransforms[55];
                                data[8] = ftransforms[56];
                                data[9] = ftransforms[57];
                                data[10] = ftransforms[58];
                                data[11] = ftransforms[59];
                                data[12] = ftransforms[60];
                                data[13] = ftransforms[61];
                                data[14] = ftransforms[62];
                                data[15] = ftransforms[63];
                                renderJob.draw = global.draw.h;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[4])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[64];
                                data[1] = ftransforms[65];
                                data[2] = ftransforms[66];
                                data[3] = ftransforms[67];
                                data[4] = ftransforms[68];
                                data[5] = ftransforms[69];
                                data[6] = ftransforms[70];
                                data[7] = ftransforms[71];
                                data[8] = ftransforms[72];
                                data[9] = ftransforms[73];
                                data[10] = ftransforms[74];
                                data[11] = ftransforms[75];
                                data[12] = ftransforms[76];
                                data[13] = ftransforms[77];
                                data[14] = ftransforms[78];
                                data[15] = ftransforms[79];
                                renderJob.draw = global.draw.e;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[5])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface252Shape_pasted____pasted____lambert5_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[80];
                                data[1] = ftransforms[81];
                                data[2] = ftransforms[82];
                                data[3] = ftransforms[83];
                                data[4] = ftransforms[84];
                                data[5] = ftransforms[85];
                                data[6] = ftransforms[86];
                                data[7] = ftransforms[87];
                                data[8] = ftransforms[88];
                                data[9] = ftransforms[89];
                                data[10] = ftransforms[90];
                                data[11] = ftransforms[91];
                                data[12] = ftransforms[92];
                                data[13] = ftransforms[93];
                                data[14] = ftransforms[94];
                                data[15] = ftransforms[95];
                                renderJob.draw = global.draw.g;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[6])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface251Shape_pasted____pasted____lambert5_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[96];
                                data[1] = ftransforms[97];
                                data[2] = ftransforms[98];
                                data[3] = ftransforms[99];
                                data[4] = ftransforms[100];
                                data[5] = ftransforms[101];
                                data[6] = ftransforms[102];
                                data[7] = ftransforms[103];
                                data[8] = ftransforms[104];
                                data[9] = ftransforms[105];
                                data[10] = ftransforms[106];
                                data[11] = ftransforms[107];
                                data[12] = ftransforms[108];
                                data[13] = ftransforms[109];
                                data[14] = ftransforms[110];
                                data[15] = ftransforms[111];
                                renderJob.draw = global.draw.a;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[7])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface250Shape_pasted____pasted____lambert5_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[112];
                                data[1] = ftransforms[113];
                                data[2] = ftransforms[114];
                                data[3] = ftransforms[115];
                                data[4] = ftransforms[116];
                                data[5] = ftransforms[117];
                                data[6] = ftransforms[118];
                                data[7] = ftransforms[119];
                                data[8] = ftransforms[120];
                                data[9] = ftransforms[121];
                                data[10] = ftransforms[122];
                                data[11] = ftransforms[123];
                                data[12] = ftransforms[124];
                                data[13] = ftransforms[125];
                                data[14] = ftransforms[126];
                                data[15] = ftransforms[127];
                                renderJob.draw = global.draw.d;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[8])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface253Shape_pasted____pasted____lambert2_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[128];
                                data[1] = ftransforms[129];
                                data[2] = ftransforms[130];
                                data[3] = ftransforms[131];
                                data[4] = ftransforms[132];
                                data[5] = ftransforms[133];
                                data[6] = ftransforms[134];
                                data[7] = ftransforms[135];
                                data[8] = ftransforms[136];
                                data[9] = ftransforms[137];
                                data[10] = ftransforms[138];
                                data[11] = ftransforms[139];
                                data[12] = ftransforms[140];
                                data[13] = ftransforms[141];
                                data[14] = ftransforms[142];
                                data[15] = ftransforms[143];
                                renderJob.draw = global.draw.i;
                                renderJob.instance = instance;
                            }
                        }
                        renderQueues.begin = jobIt;
                        var shader = global.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var shader = global.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(2);
                        gl.enableVertexAttribArray(3);
                        var current = instance.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        var shader = global.shaders.m_polySurface8Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface8Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface8Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(4);
                        gl.enableVertexAttribArray(5);
                        gl.enableVertexAttribArray(6);
                        gl.enableVertexAttribArray(7);
                        var current = instance.shaders.m_polySurface8Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_polySurface12Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface12Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface12Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.disableVertexAttribArray(7);
                        gl.disableVertexAttribArray(6);
                        gl.disableVertexAttribArray(5);
                        var current = instance.shaders.m_polySurface12Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_polySurface11Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface11Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface11Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        var current = instance.shaders.m_polySurface11Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5;
                        var shader = global.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(5);
                        var current = instance.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5;
                        var shader = global.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        var current = instance.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5;
                        var shader = global.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        var current = instance.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5;
                        var shader = global.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        var current = instance.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2;
                        var shader = global.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.disableVertexAttribArray(5);
                        var current = instance.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        gl.disableVertexAttribArray(4);
                        gl.disableVertexAttribArray(3);
                        gl.disableVertexAttribArray(2);
                    };

                    var fstate = instance.fstate;
                    var ostate = instance.ostate;

                    return instance;
                },

                doneInstance: function(instance)
                {
                },

                sequence: 0,

                attributes:
                {
                    "time": {t: 1, b: 0, e: 1}
                },

                textureBindings:
                [
                    {n: "gold3", b: 0},
                    {n: "j", b: 1},
                    {n: "shizitou", b: 2}
                ],

                objects:
                {
                    "pasted__polySurface238Shape[0]": 4,
                    "pasted__polySurface239Shape[0]": 3,
                    "pasted__polySurface250Shape[0]": 7,
                    "pasted__polySurface251Shape[0]": 6,
                    "pasted__polySurface252Shape[0]": 5,
                    "pasted__polySurface253Shape[0]": 8,
                    "polySurface11Shape[0]": 1,
                    "polySurface12Shape[0]": 0,
                    "polySurface8Shape[0]": 2
                }

            }

        },

        numFiles: 4,
        check: function (){
            return 0;
        }
    };
    return s;
}

M4.modelName = "model_four";
M4.startTime = 0.041666666666666664;
M4.endTime = 5.3333333333333339;