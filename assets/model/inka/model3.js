var model_three = 
"";

window.M3 = function(engine)
{
    var s = {
        textures:
        {
            "gold3":
            {
                initGlobal: function (global, url, index, loaded)
                {
                    var texture = global.texture = gl.createTexture();
                    var image = global.image = new Image();
                    image.crossOrigin = "Anonymous";
                    image.onload = function ()
                    {
                        gl.bindTexture(gl.TEXTURE_2D, texture);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, this);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
                        gl.generateMipmap(gl.TEXTURE_2D);
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        loaded();
                    };
                    image.src = "//gw.alicdn.com/mt/TB1i78EPXXXXXaYXpXXXXXXXXXX-1024-1024.png?t=" + Date.now();
                    // image.src = null;
                },

                doneGlobal: function (global)
                {
                    gl.deleteTexture(global.texture);
                },

                copy: function (global, ostate, b)
                {
                    ostate[b] = global.texture;
                }
            },

            "j":
            {
                initGlobal: function (global, url, index, loaded)
                {
                    var texture = global.texture = gl.createTexture();
                    var image = global.image = new Image();
                    image.crossOrigin = "Anonymous";
                    image.onload = function ()
                    {
                        gl.bindTexture(gl.TEXTURE_2D, texture);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, this);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
                        gl.generateMipmap(gl.TEXTURE_2D);
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        loaded();
                    };
                    image.src = "//gw.alicdn.com/mt/TB1eEs2OVXXXXcXapXXXXXXXXXX-1024-1024.png?t=" + Date.now();
                },

                doneGlobal: function (global)
                {
                    gl.deleteTexture(global.texture);
                },

                copy: function (global, ostate, b)
                {
                    ostate[b] = global.texture;
                }
            },

            "shizitou":
            {
                initGlobal: function (global, url, index, loaded)
                {
                    var texture = global.texture = gl.createTexture();
                    var image = global.image = new Image();
                    image.crossOrigin = "Anonymous";
                    image.onload = function ()
                    {
                        gl.bindTexture(gl.TEXTURE_2D, texture);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, this);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
                        gl.generateMipmap(gl.TEXTURE_2D);
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        loaded();
                    };
                    image.src = "//gw.alicdn.com/mt/TB1M2xJPXXXXXbvXXXXXXXXXXXX-1024-1024.jpg?t=" + Date.now();
                },

                doneGlobal: function (global)
                {
                    gl.deleteTexture(global.texture);
                },

                copy: function (global, ostate, b)
                {
                    ostate[b] = global.texture;
                }
            }

        },

        scenes:
        {
            "model_three":
            {
                shaders:
                {
                    // mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'
                    m_polySurface11Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'
                    m_polySurface8Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'
                    m_polySurface12Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface238Shape', shader 'pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'
                    m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface253Shape', shader 'pasted__pasted__lambert2'
                    m_pasted____polySurface253Shape_pasted____pasted____lambert2:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface250Shape', shader 'pasted__pasted__lambert5'
                    m_pasted____polySurface250Shape_pasted____pasted____lambert5:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface252Shape', shader 'pasted__pasted__lambert5'
                    m_pasted____polySurface252Shape_pasted____pasted____lambert5:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface239Shape', shader 'pasted__pasted__lambert5'
                    m_pasted____polySurface239Shape_pasted____pasted____lambert5:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface251Shape', shader 'pasted__pasted__lambert5'
                    m_pasted____polySurface251Shape_pasted____pasted____lambert5:
                    {
                    }
                },

                initGlobal: function(global, data)
                {
                    // mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'
                    var vsm_polySurface11Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
attribute vec2 _4;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(2.7848e-5, 2.78256e-5, 5.16374e-6) + vec3(-0.912736, 4.08025, 1.43886);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _d[0].xyz * h.x + _d[1].xyz * h.y + _d[2].xyz * h.z + _d[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _e = _d[4].xyz * k.x + _d[5].xyz * k.y + _d[6].xyz * k.z;\n\
    _f = _4;\n\
}\n\
';
                    var psm_polySurface11Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'
                    var vsm_polySurface8Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[52];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec4 _3;\n\
attribute vec4 _4;\n\
attribute vec4 _5;\n\
attribute vec4 _6;\n\
attribute vec2 _7;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.82902e-4, 1.49994e-4, 5.75946e-5) + vec3(-5.99327, 0.0238238, -2.03775);\n\
    vec3 c = _2;\n\
    ivec4 d = ivec4(_3);\n\
    ivec4 e = ivec4(_4);\n\
    vec4 f = _5;\n\
    vec4 g = _6;\n\
    int h = d.x;\n\
    int i = d.y;\n\
    int j = d.z;\n\
    int k = d.w;\n\
    int l = e.x;\n\
    int m = e.y;\n\
    int n = e.z;\n\
    int o = e.w;\n\
    vec4 p = f.x * _b[4 + h] + f.y * _b[4 + i] + f.z * _b[4 + j] + f.w * _b[4 + k] + g.x * _b[4 + l] + g.y * _b[4 + m] + g.z * _b[4 + n] + g.w * _b[4 + o];\n\
    vec4 q = f.x * _b[20 + h] + f.y * _b[20 + i] + f.z * _b[20 + j] + f.w * _b[20 + k] + g.x * _b[20 + l] + g.y * _b[20 + m] + g.z * _b[20 + n] + g.w * _b[20 + o];\n\
    vec4 r = f.x * _b[36 + h] + f.y * _b[36 + i] + f.z * _b[36 + j] + f.w * _b[36 + k] + g.x * _b[36 + l] + g.y * _b[36 + m] + g.z * _b[36 + n] + g.w * _b[36 + o];\n\
    vec3 s = p.xyz * b.x + q.xyz * b.y + r.xyz * b.z + vec3(p.w, q.w, r.w);\n\
    vec3 t = p.xyz * c.x + q.xyz * c.y + r.xyz * c.z;\n\
    vec3 u = p.xyz * a.x + q.xyz * a.y + r.xyz * a.z;\n\
    vec3 v = t.yzx * u.zxy - t.zxy * u.yzx;\n\
    vec3 w = _d[0].xyz * s.x + _d[1].xyz * s.y + _d[2].xyz * s.z + _d[3].xyz;\n\
    gl_Position = _b[0] * w.x + _b[1] * w.y + _b[2] * w.z + _b[3];\n\
    _e = _d[4].xyz * v.x + _d[5].xyz * v.y + _d[6].xyz * v.z;\n\
    _f = _7;\n\
}\n\
';
                    var psm_polySurface8Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'
                    var vsm_polySurface12Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
attribute vec2 _4;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(2.24981e-4, 1.19379e-4, 5.44838e-5) + vec3(-7.37254, 9.60781, -1.96746);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _d[0].xyz * h.x + _d[1].xyz * h.y + _d[2].xyz * h.z + _d[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _e = _d[4].xyz * k.x + _d[5].xyz * k.y + _d[6].xyz * k.z;\n\
    _f = _4;\n\
}\n\
';
                    var psm_polySurface12Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface238Shape', shader 'pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'
                    var vsm_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _c[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.26955e-5, 3.24763e-4, 1.26955e-5) + vec3(-16.8482, 0.921721, -10.2845);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _c[0].xyz * h.x + _c[1].xyz * h.y + _c[2].xyz * h.z + _c[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _d = _c[4].xyz * k.x + _c[5].xyz * k.y + _c[6].xyz * k.z;\n\
    _e = l;\n\
}\n\
';
                    var psm_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461 =
'precision highp float;\n\
uniform float f_f;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = (_d);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f;\n\
    vec3 d = _e;\n\
    vec3 e = d * d;\n\
    vec3 f = c * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 g = c * vec3(0.408248, -0.408248, -0.816497);\n\
    vec3 h = (vec3(0.408248, -0.408248, -0.816497) - (g.x + g.y + g.z) * 2.0 * c) * -(d * inversesqrt(e.x + e.y + e.z));\n\
    vec3 i = max(f.x + f.y + f.z, 0.0) * vec3(1.0, 0.881884, 0.291303) + vec3(pow(max(h.x + h.y + h.z, 0.0), 50.0) * 0.2);\n\
    gl_FragColor = vec4(i, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface253Shape', shader 'pasted__pasted__lambert2'
                    var vsm_pasted____polySurface253Shape_pasted____pasted____lambert2 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
attribute vec2 _4;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(2.51952e-4, 1.05323e-4, 1.39804e-4) + vec3(-8.24074, 14.7457, -4.67718);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _d[0].xyz * h.x + _d[1].xyz * h.y + _d[2].xyz * h.z + _d[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _e = _d[4].xyz * k.x + _d[5].xyz * k.y + _d[6].xyz * k.z;\n\
    _f = _4;\n\
}\n\
';
                    var psm_pasted____polySurface253Shape_pasted____pasted____lambert2 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface250Shape', shader 'pasted__pasted__lambert5'
                    var vsm_pasted____polySurface250Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform vec4 _b[16];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec3 _3;\n\
attribute vec3 _4;\n\
attribute vec2 _5;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(3.24855e-5, 3.24856e-5, 2.36168e-5) + vec3(-41.3024, 19.7091, 1.25073);\n\
    vec3 c = _2;\n\
    ivec3 d = ivec3(_3);\n\
    vec3 e = _4;\n\
    float f = e.x;\n\
    int g = d.x;\n\
    float h = e.y;\n\
    int i = d.y;\n\
    float j = e.z;\n\
    int k = d.z;\n\
    vec4 l = f * _b[4 + g] + h * _b[4 + i] + j * _b[4 + k];\n\
    vec4 m = f * _b[8 + g] + h * _b[8 + i] + j * _b[8 + k];\n\
    vec4 n = f * _b[12 + g] + h * _b[12 + i] + j * _b[12 + k];\n\
    vec3 o = l.xyz * b.x + m.xyz * b.y + n.xyz * b.z + vec3(l.w, m.w, n.w);\n\
    vec3 p = l.xyz * c.x + m.xyz * c.y + n.xyz * c.z;\n\
    vec3 q = l.xyz * a.x + m.xyz * a.y + n.xyz * a.z;\n\
    vec3 r = p.yzx * q.zxy - p.zxy * q.yzx;\n\
    vec3 s = _d[0].xyz * o.x + _d[1].xyz * o.y + _d[2].xyz * o.z + _d[3].xyz;\n\
    gl_Position = _b[0] * s.x + _b[1] * s.y + _b[2] * s.z + _b[3];\n\
    _e = _d[4].xyz * r.x + _d[5].xyz * r.y + _d[6].xyz * r.z;\n\
    _f = _5;\n\
}\n\
';
                    var psm_pasted____polySurface250Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface252Shape', shader 'pasted__pasted__lambert5'
                    var vsm_pasted____polySurface252Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform vec4 _b[16];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec3 _3;\n\
attribute vec3 _4;\n\
attribute vec2 _5;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(3.24856e-5, 3.24856e-5, 2.36168e-5) + vec3(-46.5533, 19.7091, 1.25073);\n\
    vec3 c = _2;\n\
    ivec3 d = ivec3(_3);\n\
    vec3 e = _4;\n\
    float f = e.x;\n\
    int g = d.x;\n\
    float h = e.y;\n\
    int i = d.y;\n\
    float j = e.z;\n\
    int k = d.z;\n\
    vec4 l = f * _b[4 + g] + h * _b[4 + i] + j * _b[4 + k];\n\
    vec4 m = f * _b[8 + g] + h * _b[8 + i] + j * _b[8 + k];\n\
    vec4 n = f * _b[12 + g] + h * _b[12 + i] + j * _b[12 + k];\n\
    vec3 o = l.xyz * b.x + m.xyz * b.y + n.xyz * b.z + vec3(l.w, m.w, n.w);\n\
    vec3 p = l.xyz * c.x + m.xyz * c.y + n.xyz * c.z;\n\
    vec3 q = l.xyz * a.x + m.xyz * a.y + n.xyz * a.z;\n\
    vec3 r = p.yzx * q.zxy - p.zxy * q.yzx;\n\
    vec3 s = _d[0].xyz * o.x + _d[1].xyz * o.y + _d[2].xyz * o.z + _d[3].xyz;\n\
    gl_Position = _b[0] * s.x + _b[1] * s.y + _b[2] * s.z + _b[3];\n\
    _e = _d[4].xyz * r.x + _d[5].xyz * r.y + _d[6].xyz * r.z;\n\
    _f = _5;\n\
}\n\
';
                    var psm_pasted____polySurface252Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface239Shape', shader 'pasted__pasted__lambert5'
                    var vsm_pasted____polySurface239Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform vec4 _b[19];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec4 _3;\n\
attribute vec4 _4;\n\
attribute vec2 _5;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.30824e-4, 7.08514e-5, 8.87275e-5) + vec3(-47.171, 13.7101, -0.339166);\n\
    vec3 c = _2;\n\
    ivec4 d = ivec4(_3);\n\
    vec4 e = _4;\n\
    int f = d.x;\n\
    int g = d.y;\n\
    int h = d.z;\n\
    int i = d.w;\n\
    vec4 j = e.x * _b[4 + f] + e.y * _b[4 + g] + e.z * _b[4 + h] + e.w * _b[4 + i];\n\
    vec4 k = e.x * _b[9 + f] + e.y * _b[9 + g] + e.z * _b[9 + h] + e.w * _b[9 + i];\n\
    vec4 l = e.x * _b[14 + f] + e.y * _b[14 + g] + e.z * _b[14 + h] + e.w * _b[14 + i];\n\
    vec3 m = j.xyz * b.x + k.xyz * b.y + l.xyz * b.z + vec3(j.w, k.w, l.w);\n\
    vec3 n = j.xyz * c.x + k.xyz * c.y + l.xyz * c.z;\n\
    vec3 o = j.xyz * a.x + k.xyz * a.y + l.xyz * a.z;\n\
    vec3 p = n.yzx * o.zxy - n.zxy * o.yzx;\n\
    vec3 q = _d[0].xyz * m.x + _d[1].xyz * m.y + _d[2].xyz * m.z + _d[3].xyz;\n\
    gl_Position = _b[0] * q.x + _b[1] * q.y + _b[2] * q.z + _b[3];\n\
    _e = _d[4].xyz * p.x + _d[5].xyz * p.y + _d[6].xyz * p.z;\n\
    _f = _5;\n\
}\n\
';
                    var psm_pasted____polySurface239Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface251Shape', shader 'pasted__pasted__lambert5'
                    var vsm_pasted____polySurface251Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform vec4 _b[10];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec2 _3;\n\
attribute vec2 _4;\n\
attribute vec2 _5;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.54816e-4, 1.51193e-4, 1.72706e-4) + vec3(-47.9573, 14.8268, -5.94376);\n\
    vec3 c = _2;\n\
    ivec2 d = ivec2(_3);\n\
    vec2 e = _4;\n\
    float f = e.x;\n\
    int g = d.x;\n\
    float h = e.y;\n\
    int i = d.y;\n\
    vec4 j = f * _b[4 + g] + h * _b[4 + i];\n\
    vec4 k = f * _b[6 + g] + h * _b[6 + i];\n\
    vec4 l = f * _b[8 + g] + h * _b[8 + i];\n\
    vec3 m = j.xyz * b.x + k.xyz * b.y + l.xyz * b.z + vec3(j.w, k.w, l.w);\n\
    vec3 n = j.xyz * c.x + k.xyz * c.y + l.xyz * c.z;\n\
    vec3 o = j.xyz * a.x + k.xyz * a.y + l.xyz * a.z;\n\
    vec3 p = n.yzx * o.zxy - n.zxy * o.yzx;\n\
    vec3 q = _d[0].xyz * m.x + _d[1].xyz * m.y + _d[2].xyz * m.z + _d[3].xyz;\n\
    gl_Position = _b[0] * q.x + _b[1] * q.y + _b[2] * q.z + _b[3];\n\
    _e = _d[4].xyz * p.x + _d[5].xyz * p.y + _d[6].xyz * p.z;\n\
    _f = _5;\n\
}\n\
';
                    var psm_pasted____polySurface251Shape_pasted____pasted____lambert5 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    var d = new engine.Decompressor(new Uint8Array(data, 0));
                    global.buffers = 
                    [
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                    ];
                    var b1 = d.decompress8(574);
                    var b2 = d.decompress16(246);
                    var vb = new Float32Array(820);
                    for (var i = 0, j = 0; i < 82; ++i, j += 10)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 82];
                        vb[j + 2] = b2[i + 164];
                        vb[j + 3] = (b1[i + 0] << 24) * 4.65661e-10;
                        vb[j + 4] = (b1[i + 82] << 24) * 4.65661e-10;
                        vb[j + 5] = (b1[i + 164] << 24) * 4.65661e-10;
                        vb[j + 6] = (b1[i + 246] << 24) * 4.65661e-10;
                        vb[j + 7] = (b1[i + 328] << 24) * 4.65661e-10;
                        vb[j + 8] = (b1[i + 410] << 24) * 4.65661e-10;
                        vb[j + 9] = b1[i + 492];
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(19922);
                    var b2 = d.decompress16(14230);
                    var vb = new Float32Array(34152);
                    for (var i = 0, j = 0; i < 2846; ++i, j += 12)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 2846];
                        vb[j + 2] = b2[i + 5692];
                        vb[j + 3] = b2[i + 8538] * 1.5259e-5;
                        vb[j + 4] = b2[i + 11384] * 1.5259e-5;
                        vb[j + 5] = (b1[i + 0] << 24) * 4.65661e-10;
                        vb[j + 6] = (b1[i + 2846] << 24) * 4.65661e-10;
                        vb[j + 7] = (b1[i + 5692] << 24) * 4.65661e-10;
                        vb[j + 8] = (b1[i + 8538] << 24) * 4.65661e-10;
                        vb[j + 9] = (b1[i + 11384] << 24) * 4.65661e-10;
                        vb[j + 10] = (b1[i + 14230] << 24) * 4.65661e-10;
                        vb[j + 11] = b1[i + 17076];
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(12680);
                    var b2 = d.decompress16(6340);
                    var vb = new Float32Array(19020);
                    for (var i = 0, j = 0; i < 1268; ++i, j += 15)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 1268];
                        vb[j + 2] = b2[i + 2536];
                        vb[j + 3] = b2[i + 3804] * 1.5259e-5;
                        vb[j + 4] = b2[i + 5072] * 1.5259e-5;
                        vb[j + 5] = (b1[i + 0] << 24) * 4.65661e-10;
                        vb[j + 6] = (b1[i + 1268] << 24) * 4.65661e-10;
                        vb[j + 7] = (b1[i + 2536] << 24) * 4.65661e-10;
                        vb[j + 8] = (b1[i + 3804] << 24) * 4.65661e-10;
                        vb[j + 9] = (b1[i + 5072] << 24) * 4.65661e-10;
                        vb[j + 10] = (b1[i + 6340] << 24) * 4.65661e-10;
                        vb[j + 11] = b1[i + 7608];
                        vb[j + 12] = b1[i + 8876];
                        vb[j + 13] = b1[i + 10144] * 0.00392156;
                        vb[j + 14] = b1[i + 11412] * 0.00392156;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer2 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(6264);
                    var b2 = d.decompress16(2610);
                    var vb = new Float32Array(8874);
                    for (var i = 0, j = 0; i < 522; ++i, j += 17)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 522];
                        vb[j + 2] = b2[i + 1044];
                        vb[j + 3] = b2[i + 1566] * 1.5259e-5;
                        vb[j + 4] = b2[i + 2088] * 1.5259e-5;
                        vb[j + 5] = b1[i + 0];
                        vb[j + 6] = b1[i + 522];
                        vb[j + 7] = b1[i + 1044];
                        vb[j + 8] = b1[i + 1566] * 0.00392156;
                        vb[j + 9] = b1[i + 2088] * 0.00392156;
                        vb[j + 10] = b1[i + 2610] * 0.00392156;
                        vb[j + 11] = (b1[i + 3132] << 24) * 4.65661e-10;
                        vb[j + 12] = (b1[i + 3654] << 24) * 4.65661e-10;
                        vb[j + 13] = (b1[i + 4176] << 24) * 4.65661e-10;
                        vb[j + 14] = (b1[i + 4698] << 24) * 4.65661e-10;
                        vb[j + 15] = (b1[i + 5220] << 24) * 4.65661e-10;
                        vb[j + 16] = (b1[i + 5742] << 24) * 4.65661e-10;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer3 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(4522);
                    var b2 = d.decompress16(1615);
                    var vb = new Float32Array(6137);
                    for (var i = 0, j = 0; i < 323; ++i, j += 19)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 323];
                        vb[j + 2] = b2[i + 646];
                        vb[j + 3] = b2[i + 969] * 1.5259e-5;
                        vb[j + 4] = b2[i + 1292] * 1.5259e-5;
                        vb[j + 5] = b1[i + 0];
                        vb[j + 6] = b1[i + 323];
                        vb[j + 7] = b1[i + 646];
                        vb[j + 8] = b1[i + 969];
                        vb[j + 9] = b1[i + 1292] * 0.00392156;
                        vb[j + 10] = b1[i + 1615] * 0.00392156;
                        vb[j + 11] = b1[i + 1938] * 0.00392156;
                        vb[j + 12] = b1[i + 2261] * 0.00392156;
                        vb[j + 13] = (b1[i + 2584] << 24) * 4.65661e-10;
                        vb[j + 14] = (b1[i + 2907] << 24) * 4.65661e-10;
                        vb[j + 15] = (b1[i + 3230] << 24) * 4.65661e-10;
                        vb[j + 16] = (b1[i + 3553] << 24) * 4.65661e-10;
                        vb[j + 17] = (b1[i + 3876] << 24) * 4.65661e-10;
                        vb[j + 18] = (b1[i + 4199] << 24) * 4.65661e-10;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer4 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(40854);
                    var b2 = d.decompress16(9285);
                    var vb = new Float32Array(50139);
                    for (var i = 0, j = 0; i < 1857; ++i, j += 27)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 1857];
                        vb[j + 2] = b2[i + 3714];
                        vb[j + 3] = b2[i + 5571] * 1.5259e-5;
                        vb[j + 4] = b2[i + 7428] * 1.5259e-5;
                        vb[j + 5] = b1[i + 0];
                        vb[j + 6] = b1[i + 1857];
                        vb[j + 7] = b1[i + 3714];
                        vb[j + 8] = b1[i + 5571];
                        vb[j + 9] = b1[i + 7428];
                        vb[j + 10] = b1[i + 9285];
                        vb[j + 11] = b1[i + 11142];
                        vb[j + 12] = b1[i + 12999];
                        vb[j + 13] = b1[i + 14856] * 0.00392156;
                        vb[j + 14] = b1[i + 16713] * 0.00392156;
                        vb[j + 15] = b1[i + 18570] * 0.00392156;
                        vb[j + 16] = b1[i + 20427] * 0.00392156;
                        vb[j + 17] = b1[i + 22284] * 0.00392156;
                        vb[j + 18] = b1[i + 24141] * 0.00392156;
                        vb[j + 19] = b1[i + 25998] * 0.00392156;
                        vb[j + 20] = b1[i + 27855] * 0.00392156;
                        vb[j + 21] = (b1[i + 29712] << 24) * 4.65661e-10;
                        vb[j + 22] = (b1[i + 31569] << 24) * 4.65661e-10;
                        vb[j + 23] = (b1[i + 33426] << 24) * 4.65661e-10;
                        vb[j + 24] = (b1[i + 35283] << 24) * 4.65661e-10;
                        vb[j + 25] = (b1[i + 37140] << 24) * 4.65661e-10;
                        vb[j + 26] = (b1[i + 38997] << 24) * 4.65661e-10;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer5 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);

                    var b = d.decompress16(27180);
                    var ib = new Uint16Array(27180);
                    for (var i = 0, j = 0; i < 9060; ++i, j += 3)
                    {
                        ib[j] = b[i];
                        ib[j + 1] = b[i + 9060];
                        ib[j + 2] = b[i + 18120];
                    }
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0 = gl.createBuffer());
                    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, ib, gl.STATIC_DRAW);

                    var shaders = global.shaders;
                    {
                        var shader = shaders.m_polySurface11Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface11Shape_pasted____lambert4, "mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface11Shape_pasted____lambert4, "mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_polySurface8Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface8Shape_pasted____lambert4, "mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface8Shape_pasted____lambert4, "mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.bindAttribLocation(program, 6, '_6');
                        gl.bindAttribLocation(program, 7, '_7');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_polySurface12Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface12Shape_pasted____lambert4, "mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface12Shape_pasted____lambert4, "mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461, "mesh, deformer 'pasted__polySurface238Shape', shader 'pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461, "mesh, deformer 'pasted__polySurface238Shape', shader 'pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        shader._b = gl.getUniformLocation(program, '_b');
                        shader._c = gl.getUniformLocation(program, '_c');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface253Shape_pasted____pasted____lambert2, "mesh, deformer 'pasted__polySurface253Shape', shader 'pasted__pasted__lambert2'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface253Shape_pasted____pasted____lambert2, "mesh, deformer 'pasted__polySurface253Shape', shader 'pasted__pasted__lambert2'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface250Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface250Shape', shader 'pasted__pasted__lambert5'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface250Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface250Shape', shader 'pasted__pasted__lambert5'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface252Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface252Shape', shader 'pasted__pasted__lambert5'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface252Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface252Shape', shader 'pasted__pasted__lambert5'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface239Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface239Shape', shader 'pasted__pasted__lambert5'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface239Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface239Shape', shader 'pasted__pasted__lambert5'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface251Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface251Shape', shader 'pasted__pasted__lambert5'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface251Shape_pasted____pasted____lambert5, "mesh, deformer 'pasted__polySurface251Shape', shader 'pasted__pasted__lambert5'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                },

                doneGlobal: function(global)
                {
                    gl.deleteBuffer(global.shaderInputBuffer0);
                    gl.deleteBuffer(global.shaderInputBuffer1);
                    gl.deleteBuffer(global.shaderInputBuffer2);
                    gl.deleteBuffer(global.shaderInputBuffer3);
                    gl.deleteBuffer(global.shaderInputBuffer4);
                    gl.deleteBuffer(global.shaderInputBuffer5);
                    gl.deleteBuffer(global.indexBuffer0);
                    gl.deleteProgram(global.shaders.m_polySurface11Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_polySurface8Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_polySurface12Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5.program);
                },

                render: {
                    m_polySurface11Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface11Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface11Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_polySurface8Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface8Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface8Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_polySurface12Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface12Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface12Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var transfer = instance.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _c = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _c[0] = G;
                        _c[1] = H;
                        _c[2] = I;
                        _c[4] = J;
                        _c[5] = K;
                        _c[6] = L;
                        _c[8] = M;
                        _c[9] = N;
                        _c[10] = O;
                        _c[12] = q * m + u * n + y * o + C * p;
                        _c[13] = r * m + v * n + z * o + D * p;
                        _c[14] = s * m + w * n + A * o + E * p;
                        _c[16] = P;
                        _c[17] = Q;
                        _c[18] = R;
                        _c[20] = N * I - O * H;
                        _c[21] = O * G - M * I;
                        _c[22] = M * H - N * G;
                        _c[24] = H * L - I * K;
                        _c[25] = I * J - G * L;
                        _c[26] = G * K - H * J;
                        gl.uniform4fv(shader._c, _c);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface253Shape_pasted____pasted____lambert2_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2;
                        var transfer = instance.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface250Shape_pasted____pasted____lambert5_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5;
                        var transfer = instance.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface252Shape_pasted____pasted____lambert5_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5;
                        var transfer = instance.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface239Shape_pasted____pasted____lambert5_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5;
                        var transfer = instance.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface251Shape_pasted____pasted____lambert5_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5;
                        var transfer = instance.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    }
                },
                draw: {
                    a: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer5);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 108, 84);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 108, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 108, 96);
                        gl.vertexAttribPointer(3, 4, gl.FLOAT, false, 108, 20);
                        gl.vertexAttribPointer(4, 4, gl.FLOAT, false, 108, 36);
                        gl.vertexAttribPointer(5, 4, gl.FLOAT, false, 108, 68);
                        gl.vertexAttribPointer(6, 4, gl.FLOAT, false, 108, 52);
                        gl.vertexAttribPointer(7, 2, gl.FLOAT, false, 108, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 7398, gl.UNSIGNED_SHORT, 0);
                    },
                    b: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer4);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 76, 52);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 76, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 76, 64);
                        gl.vertexAttribPointer(3, 4, gl.FLOAT, false, 76, 20);
                        gl.vertexAttribPointer(4, 4, gl.FLOAT, false, 76, 36);
                        gl.vertexAttribPointer(5, 2, gl.FLOAT, false, 76, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 1338, gl.UNSIGNED_SHORT, 14796);
                    },
                    c: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 48, 20);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 48, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 48, 32);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 48, 44);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 48, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 720, gl.UNSIGNED_SHORT, 17472);
                    },
                    d: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 48, 9824);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 48, 9792);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 48, 9812);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 48, 9836);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 48, 9804);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 1404, gl.UNSIGNED_SHORT, 18912);
                    },
                    e: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 40, 12);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 40, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 40, 24);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 40, 36);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 240, gl.UNSIGNED_SHORT, 21720);
                    },
                    f: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 48, 35444);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 48, 35424);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 48, 35456);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 48, 35468);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 48, 35436);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 10776, gl.UNSIGNED_SHORT, 22200);
                    },
                    g: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer2);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 60, 20);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 60, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 60, 32);
                        gl.vertexAttribPointer(3, 2, gl.FLOAT, false, 60, 44);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 60, 52);
                        gl.vertexAttribPointer(5, 2, gl.FLOAT, false, 60, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 2304, gl.UNSIGNED_SHORT, 43752);
                    },
                    h: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer3);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 68, 44);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 68, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 68, 56);
                        gl.vertexAttribPointer(3, 3, gl.FLOAT, false, 68, 20);
                        gl.vertexAttribPointer(4, 3, gl.FLOAT, false, 68, 32);
                        gl.vertexAttribPointer(5, 2, gl.FLOAT, false, 68, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 1500, gl.UNSIGNED_SHORT, 48360);
                    },
                    i: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer3);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 68, 17804);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 68, 17748);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 68, 17792);
                        gl.vertexAttribPointer(3, 3, gl.FLOAT, false, 68, 17768);
                        gl.vertexAttribPointer(4, 3, gl.FLOAT, false, 68, 17780);
                        gl.vertexAttribPointer(5, 2, gl.FLOAT, false, 68, 17760);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 1500, gl.UNSIGNED_SHORT, 51360);
                    }
                },

                createInstance: function(global, renderer)
                {
                    var instance = 
                    {
                        global: global,
                        renderer: renderer,
                        ids: new Uint32Array(9),
                        fstate: new Float32Array(1), ostate: [], 
                        funiforms: new Float32Array(420), ouniforms: [], 
                        shaders:
                        {
                            m_polySurface11Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(28), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_polySurface8Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(208), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_polySurface12Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(28), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461:
                            {
                                uniform: {_b: new Float32Array(28)},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface253Shape_pasted____pasted____lambert2:
                            {
                                uniform: {_b: new Float32Array(28), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface250Shape_pasted____pasted____lambert5:
                            {
                                uniform: {_b: new Float32Array(64), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface252Shape_pasted____pasted____lambert5:
                            {
                                uniform: {_b: new Float32Array(64), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface239Shape_pasted____pasted____lambert5:
                            {
                                uniform: {_b: new Float32Array(76), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface251Shape_pasted____pasted____lambert5:
                            {
                                uniform: {_b: new Float32Array(40), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            }
                        },
                        itransforms: new Int32Array(9), ftransforms: new Float32Array(144), 
                        fboundingBoxes: new Float32Array(54), 
                        sceneSequence: 0,
                        deformerSequence: 0,
                        renderSequence: 0,
                        viewProjectionMatrix: new Float32Array(16),
                        fu0_28: new Float32Array(28),
                    };

                    var particlePools = instance.particlePools = {};

                    instance.update = function()
                    {
                        ++instance.sceneSequence;

                        var fstate = instance.fstate;
                        var ostate = instance.ostate;
                        var buffers = global.buffers;
                        var funiforms = instance.funiforms;
                        var ouniforms = instance.ouniforms;
                        var itransforms = instance.itransforms;
                        var ftransforms = instance.ftransforms;
                        var fboundingBoxes = instance.fboundingBoxes;

                        var a = fstate[0];
                        var b;
                        if (a < 0.0)
                        {
                            b = 0.0;
                        }
                        else
                        {
                            if (a < 4.1665)
                            {
                                b = (engine.eCT(buffers[22], a * 24.0 + 1.0) * 3.74384e-6 + -0.0804858) * 0.5;
                            }
                            else
                            {
                                b = -0.0206246;
                            }
                        }
                        var c = fstate[0];
                        var d;
                        if (c < 0.0)
                        {
                            d = 0.0;
                        }
                        else
                        {
                            if (c < 4.1665)
                            {
                                d = (engine.eCT(buffers[21], c * 24.0 + 1.0) * 5.41759e-6 + -0.198517) * 0.5;
                            }
                            else
                            {
                                d = 0.076296;
                            }
                        }
                        var e = fstate[0];
                        var f;
                        if (e < 0.0)
                        {
                            f = 0.0;
                        }
                        else
                        {
                            if (e < 4.1665)
                            {
                                f = (engine.eCT(buffers[20], e * 24.0 + 1.0) * 3.15911e-6 + -0.147258) * 0.5;
                            }
                            else
                            {
                                f = -0.073629;
                            }
                        }
                        var g = fstate[0];
                        var h;
                        if (g < 0.0)
                        {
                            h = -0.258007;
                        }
                        else
                        {
                            if (g < 4.1665)
                            {
                                h = engine.eCT(buffers[25], g * 24.0 + 1.0) * 2.26945e-5 + -0.282034;
                            }
                            else
                            {
                                h = 0.988115;
                            }
                        }
                        var i = fstate[0];
                        var j;
                        if (i < 0.0)
                        {
                            j = 4.59072;
                        }
                        else
                        {
                            if (i < 4.1665)
                            {
                                j = engine.eCT(buffers[24], i * 24.0 + 1.0) * 2.3262e-5 + 3.06624;
                            }
                            else
                            {
                                j = 3.88377;
                            }
                        }
                        var k = fstate[0];
                        var l;
                        if (k < 0.0)
                        {
                            l = 0.0;
                        }
                        else
                        {
                            if (k < 4.1665)
                            {
                                l = engine.eCT(buffers[23], k * 24.0 + 1.0) * 1.26838e-5 + -0.724672;
                            }
                            else
                            {
                                l = -0.724672;
                            }
                        }
                        var m = Math.cos(f);
                        var n = Math.sin(f);
                        var o = Math.cos(d);
                        var p = Math.sin(d);
                        var q = Math.cos(b);
                        var r = Math.sin(b);
                        var s = q * o * n - r * p * m;
                        var t = q * p * m + r * o * n;
                        var u = q * -p * n + r * o * m;
                        var v = q * o * m - r * -p * n;
                        var w = s * 0.512508 + v * 0.48717 + u * 0.512508 - t * 0.48717;
                        var x = t * 0.512508 + v * 0.512508 + s * 0.48717 - u * 0.48717;
                        var y = u * 0.512508 + v * 0.48717 + t * 0.48717 - s * 0.512508;
                        var z = v * 0.512508 - s * 0.48717 - t * 0.512508 - u * 0.48717;
                        var A = w * w;
                        var B = x * x;
                        var C = y * y;
                        var D = z * z;
                        var E = w * x;
                        var F = x * y;
                        var G = w * y;
                        var H = z * w;
                        var I = z * x;
                        var J = z * y;
                        var K = D + A - B - C;
                        var L = (E + J) * 2.0;
                        var M = (G - I) * 2.0;
                        var N = (E - J) * 2.0;
                        var O = D - A + B - C;
                        var P = (F + H) * 2.0;
                        var Q = (G + I) * 2.0;
                        var R = (F - H) * 2.0;
                        var S = D - A - B + C;
                        var T = fstate[0];
                        var U;
                        if (T < 0.0)
                        {
                            U = -1.09813e-17;
                        }
                        else
                        {
                            if (T < 4.16666)
                            {
                                U = (engine.eCT(buffers[17], T * 24.0 + 1.0) * 1.98852e-5 + -0.0127754) * 0.5;
                            }
                            else
                            {
                                U = 0.190956;
                            }
                        }
                        var V = fstate[0];
                        var W;
                        if (V < 0.0)
                        {
                            W = 0.12385;
                        }
                        else
                        {
                            if (V < 4.16666)
                            {
                                W = (engine.eCT(buffers[16], V * 24.0 + 1.0) * 6.44697e-6 + 0.00223654) * 0.5;
                            }
                            else
                            {
                                W = 0.157759;
                            }
                        }
                        var X = fstate[0];
                        var Y;
                        if (X < 0.0)
                        {
                            Y = -1.77663e-9;
                        }
                        else
                        {
                            if (X < 4.16666)
                            {
                                Y = (engine.eCT(buffers[15], X * 24.0 + 1.0) * 1.31993e-5 + -0.0575222) * 0.5;
                            }
                            else
                            {
                                Y = -0.00569705;
                            }
                        }
                        var Z = Math.cos(Y);
                        var ab = Math.sin(Y);
                        var bb = Math.cos(W);
                        var cb = Math.sin(W);
                        var db = Math.cos(U);
                        var eb = Math.sin(U);
                        var fb = db * bb * ab - eb * cb * Z;
                        var gb = db * cb * Z + eb * bb * ab;
                        var hb = db * -cb * ab + eb * bb * Z;
                        var ib = db * bb * Z - eb * -cb * ab;
                        var jb = fb * 3.12052e-18 + ib * 0.0509619 + hb * 0.998701 - gb * 6.11528e-17;
                        var kb = gb * 3.12052e-18 + ib * 0.998701 + fb * 6.11528e-17 - hb * 0.0509619;
                        var lb = hb * 3.12052e-18 + ib * 6.11528e-17 + gb * 0.0509619 - fb * 0.998701;
                        var mb = ib * 3.12052e-18 - fb * 0.0509619 - gb * 0.998701 - hb * 6.11528e-17;
                        var nb = jb * jb;
                        var ob = kb * kb;
                        var pb = lb * lb;
                        var qb = mb * mb;
                        var rb = jb * kb;
                        var sb = kb * lb;
                        var tb = jb * lb;
                        var ub = mb * jb;
                        var vb = mb * kb;
                        var wb = mb * lb;
                        var xb = qb + nb - ob - pb;
                        var yb = (rb + wb) * 2.0;
                        var zb = (tb - vb) * 2.0;
                        var Ab = (rb - wb) * 2.0;
                        var Bb = qb - nb + ob - pb;
                        var Cb = (sb + ub) * 2.0;
                        var Db = (tb + vb) * 2.0;
                        var Eb = (sb - ub) * 2.0;
                        var Fb = qb - nb - ob + pb;
                        var Gb = K * xb + N * yb + Q * zb;
                        var Hb = L * xb + O * yb + R * zb;
                        var Ib = M * xb + P * yb + S * zb;
                        var Jb = K * Ab + N * Bb + Q * Cb;
                        var Kb = L * Ab + O * Bb + R * Cb;
                        var Lb = M * Ab + P * Bb + S * Cb;
                        var Mb = K * Db + N * Eb + Q * Fb;
                        var Nb = L * Db + O * Eb + R * Fb;
                        var Ob = M * Db + P * Eb + S * Fb;
                        var Pb = K * -0.387872 + N * 0.17076 + Q * 1.01941 + l;
                        var Qb = L * -0.387872 + O * 0.17076 + R * 1.01941 + j;
                        var Rb = M * -0.387872 + P * 0.17076 + S * 1.01941 + h;
                        var Sb = fstate[0];
                        var Tb;
                        if (Sb < 0.0)
                        {
                            Tb = 0.0;
                        }
                        else
                        {
                            if (Sb < 4.1665)
                            {
                                Tb = (engine.eCT(buffers[28], Sb * 24.0 + 1.0) * 6.29367e-6 + -0.342592) * 0.5;
                            }
                            else
                            {
                                Tb = 0.0311916;
                            }
                        }
                        var Ub = fstate[0];
                        var Vb;
                        if (Ub < 0.0)
                        {
                            Vb = 0.0;
                        }
                        else
                        {
                            if (Ub < 4.1665)
                            {
                                Vb = (engine.eCT(buffers[27], Ub * 24.0 + 1.0) * 3.57473e-6 + -0.038087) * 0.5;
                            }
                            else
                            {
                                Vb = -0.0190435;
                            }
                        }
                        var Wb = fstate[0];
                        var Xb;
                        if (Wb < 0.0)
                        {
                            Xb = 0.0;
                        }
                        else
                        {
                            if (Wb < 4.1665)
                            {
                                Xb = (engine.eCT(buffers[26], Wb * 24.0 + 1.0) * 9.23451e-7 + -0.0605183) * 0.5;
                            }
                            else
                            {
                                Xb = -0.0302591;
                            }
                        }
                        var Yb = fstate[0];
                        var Zb;
                        if (Yb < 0.0)
                        {
                            Zb = -2.78192e-16;
                        }
                        else
                        {
                            if (Yb < 4.125)
                            {
                                Zb = engine.eCT(buffers[31], Yb * 24.0 + 1.0) * 3.91047e-6 + -2.78192e-16;
                            }
                            else
                            {
                                Zb = 0.0;
                            }
                        }
                        var ac = fstate[0];
                        var bc;
                        if (ac < 0.0)
                        {
                            bc = 1.19349e-15;
                        }
                        else
                        {
                            if (ac < 4.125)
                            {
                                bc = engine.eCT(buffers[30], ac * 24.0 + 1.0) * 6.17384e-7;
                            }
                            else
                            {
                                bc = 0.0;
                            }
                        }
                        var cc = fstate[0];
                        var dc;
                        if (cc < 0.0)
                        {
                            dc = 2.50573;
                        }
                        else
                        {
                            if (cc < 4.125)
                            {
                                dc = engine.eCT(buffers[29], cc * 24.0 + 1.0) * 2.29092e-6 + 2.47858;
                            }
                            else
                            {
                                dc = 2.62871;
                            }
                        }
                        var ec = Math.cos(Xb);
                        var fc = Math.sin(Xb);
                        var gc = Math.cos(Vb);
                        var hc = Math.sin(Vb);
                        var ic = Math.cos(Tb);
                        var jc = Math.sin(Tb);
                        var kc = ic * gc * fc - jc * hc * ec;
                        var lc = ic * hc * ec + jc * gc * fc;
                        var mc = ic * -hc * fc + jc * gc * ec;
                        var nc = ic * gc * ec - jc * -hc * fc;
                        var oc = kc * 6.1194e-17 + nc * 0.999373 + mc * 0.0353989 - lc * 2.16756e-18;
                        var pc = lc * 6.1194e-17 + nc * 0.0353989 + kc * 2.16756e-18 - mc * 0.999373;
                        var qc = mc * 6.1194e-17 + nc * 2.16756e-18 + lc * 0.999373 - kc * 0.0353989;
                        var rc = nc * 6.1194e-17 - kc * 0.999373 - lc * 0.0353989 - mc * 2.16756e-18;
                        var sc = oc * oc;
                        var tc = pc * pc;
                        var uc = qc * qc;
                        var vc = rc * rc;
                        var wc = oc * pc;
                        var xc = pc * qc;
                        var yc = oc * qc;
                        var zc = rc * oc;
                        var Ac = rc * pc;
                        var Bc = rc * qc;
                        var Cc = vc + sc - tc - uc;
                        var Dc = (wc + Bc) * 2.0;
                        var Ec = (yc - Ac) * 2.0;
                        var Fc = (wc - Bc) * 2.0;
                        var Gc = vc - sc + tc - uc;
                        var Hc = (xc + zc) * 2.0;
                        var Ic = (yc + Ac) * 2.0;
                        var Jc = (xc - zc) * 2.0;
                        var Kc = vc - sc - tc + uc;
                        var Lc = K * Cc + N * Dc + Q * Ec;
                        var Mc = L * Cc + O * Dc + R * Ec;
                        var Nc = M * Cc + P * Dc + S * Ec;
                        var Oc = K * Fc + N * Gc + Q * Hc;
                        var Pc = L * Fc + O * Gc + R * Hc;
                        var Qc = M * Fc + P * Gc + S * Hc;
                        var Rc = K * Ic + N * Jc + Q * Kc;
                        var Sc = L * Ic + O * Jc + R * Kc;
                        var Tc = M * Ic + P * Jc + S * Kc;
                        var Uc = K * dc + N * bc + Q * Zb + l;
                        var Vc = L * dc + O * bc + R * Zb + j;
                        var Wc = M * dc + P * bc + S * Zb + h;
                        var Xc = fstate[0];
                        var Yc;
                        if (Xc < 0.0)
                        {
                            Yc = 0.0;
                        }
                        else
                        {
                            if (Xc < 4.1665)
                            {
                                Yc = (engine.eCT(buffers[36], Xc * 24.0 + 1.0) * 1.95031e-5 + -0.602017) * 0.5;
                            }
                            else
                            {
                                Yc = 0.338062;
                            }
                        }
                        var Zc = fstate[0];
                        var ad;
                        if (Zc < 0.0)
                        {
                            ad = 2.45571e-11;
                        }
                        else
                        {
                            if (Zc < 4.1665)
                            {
                                ad = (engine.eCT(buffers[35], Zc * 24.0 + 1.0) * 1.86881e-5 + -1.22472) * 0.5;
                            }
                            else
                            {
                                ad = -0.61236;
                            }
                        }
                        var bd = fstate[0];
                        var cd;
                        if (bd < 0.0)
                        {
                            cd = -1.79472e-9;
                        }
                        else
                        {
                            if (bd < 4.1665)
                            {
                                cd = (engine.eCT(buffers[34], bd * 24.0 + 1.0) * 1.71214e-5 + -0.890558) * 0.5;
                            }
                            else
                            {
                                cd = -0.445279;
                            }
                        }
                        var dd = Math.cos(cd);
                        var ed = Math.sin(cd);
                        var fd = Math.cos(ad);
                        var gd = Math.sin(ad);
                        var hd = Math.cos(Yc);
                        var id = Math.sin(Yc);
                        var jd = hd * fd * ed - id * gd * dd;
                        var kd = hd * gd * dd + id * fd * ed;
                        var ld = hd * -gd * ed + id * fd * dd;
                        var md = hd * fd * dd - id * -gd * ed;
                        var nd = jd * 0.427131 + md * 0.415701 + ld * 0.572007 - kd * -0.563523;
                        var od = kd * 0.427131 + md * 0.572007 + jd * -0.563523 - ld * 0.415701;
                        var pd = ld * 0.427131 + md * -0.563523 + kd * 0.415701 - jd * 0.572007;
                        var qd = md * 0.427131 - jd * 0.415701 - kd * 0.572007 - ld * -0.563523;
                        var rd = nd * nd;
                        var sd = od * od;
                        var td = pd * pd;
                        var ud = qd * qd;
                        var vd = nd * od;
                        var wd = od * pd;
                        var xd = nd * pd;
                        var yd = qd * nd;
                        var zd = qd * od;
                        var Ad = qd * pd;
                        var Bd = ud + rd - sd - td;
                        var Cd = (vd + Ad) * 2.0;
                        var Dd = (xd - zd) * 2.0;
                        var Ed = (vd - Ad) * 2.0;
                        var Fd = ud - rd + sd - td;
                        var Gd = (wd + yd) * 2.0;
                        var Hd = (xd + zd) * 2.0;
                        var Id = (wd - yd) * 2.0;
                        var Jd = ud - rd - sd + td;
                        var Kd = Lc * Bd + Oc * Cd + Rc * Dd;
                        var Ld = Mc * Bd + Pc * Cd + Sc * Dd;
                        var Md = Nc * Bd + Qc * Cd + Tc * Dd;
                        var Nd = Lc * Ed + Oc * Fd + Rc * Gd;
                        var Od = Mc * Ed + Pc * Fd + Sc * Gd;
                        var Pd = Nc * Ed + Qc * Fd + Tc * Gd;
                        var Qd = Lc * Hd + Oc * Id + Rc * Jd;
                        var Rd = Mc * Hd + Pc * Id + Sc * Jd;
                        var Sd = Nc * Hd + Qc * Id + Tc * Jd;
                        var Td = Lc * 1.62023 + Oc * -0.207425 + Rc * -1.51967 + Uc;
                        var Ud = Mc * 1.62023 + Pc * -0.207425 + Sc * -1.51967 + Vc;
                        var Vd = Nc * 1.62023 + Qc * -0.207425 + Tc * -1.51967 + Wc;
                        var Wd = Kd * 0.394071 + Nd * -0.469205 + Qd * 0.790286;
                        var Xd = Ld * 0.394071 + Od * -0.469205 + Rd * 0.790286;
                        var Yd = Md * 0.394071 + Pd * -0.469205 + Sd * 0.790286;
                        var Zd = Kd * 0.231053 + Nd * 0.882828 + Qd * 0.408935;
                        var ae = Ld * 0.231053 + Od * 0.882828 + Rd * 0.408935;
                        var be = Md * 0.231053 + Pd * 0.882828 + Sd * 0.408935;
                        var ce = Kd * -0.889562 + Nd * 0.0214481 + Qd * 0.456309;
                        var de = Ld * -0.889562 + Od * 0.0214481 + Rd * 0.456309;
                        var ee = Md * -0.889562 + Pd * 0.0214481 + Sd * 0.456309;
                        var fe = Kd * 1.98668 + Nd * 2.10899e-15 + Qd * -0.219212 + Td;
                        var ge = Ld * 1.98668 + Od * 2.10899e-15 + Rd * -0.219212 + Ud;
                        var he = Md * 1.98668 + Pd * 2.10899e-15 + Sd * -0.219212 + Vd;
                        var ie = Wd * 0.949902 + Zd * 0.312548;
                        var je = Xd * 0.949902 + ae * 0.312548;
                        var ke = Yd * 0.949902 + be * 0.312548;
                        var le = Wd * -0.312548 + Zd * 0.949902;
                        var me = Xd * -0.312548 + ae * 0.949902;
                        var ne = Yd * -0.312548 + be * 0.949902;
                        var oe = ce * 1.0;
                        var pe = de * 1.0;
                        var qe = ee * 1.0;
                        var re = fstate[0];
                        var se;
                        if (re < 0.0)
                        {
                            se = 9.12325e-16;
                        }
                        else
                        {
                            if (re < 4.16666)
                            {
                                se = (engine.eCT(buffers[11], re * 24.0 + 1.0) * 1.52739e-5 + -0.555298) * 0.5;
                            }
                            else
                            {
                                se = 0.119239;
                            }
                        }
                        var te = fstate[0];
                        var ue;
                        if (te < 0.0)
                        {
                            ue = 0.12385;
                        }
                        else
                        {
                            if (te < 4.16666)
                            {
                                ue = (engine.eCT(buffers[10], te * 24.0 + 1.0) * 4.24815e-6 + 0.183071) * 0.5;
                            }
                            else
                            {
                                ue = 0.184424;
                            }
                        }
                        var ve = fstate[0];
                        var we;
                        if (ve < 0.0)
                        {
                            we = 1.77663e-9;
                        }
                        else
                        {
                            if (ve < 4.16666)
                            {
                                we = (engine.eCT(buffers[9], ve * 24.0 + 1.0) * 9.03932e-6 + -0.178036) * 0.5;
                            }
                            else
                            {
                                we = 0.181343;
                            }
                        }
                        var xe = Math.cos(we);
                        var ye = Math.sin(we);
                        var ze = Math.cos(ue);
                        var Ae = Math.sin(ue);
                        var Be = Math.cos(se);
                        var Ce = Math.sin(se);
                        var De = Be * ze * ye - Ce * Ae * xe;
                        var Ee = Be * Ae * xe + Ce * ze * ye;
                        var Fe = Be * -Ae * ye + Ce * ze * xe;
                        var Ge = Be * ze * xe - Ce * -Ae * ye;
                        var He = De * 6.11528e-17 + Ge * -0.998701 + Fe * 0.0509619 - Ee * -3.12052e-18;
                        var Ie = Ee * 6.11528e-17 + Ge * 0.0509619 + De * -3.12052e-18 - Fe * -0.998701;
                        var Je = Fe * 6.11528e-17 + Ge * -3.12052e-18 + Ee * -0.998701 - De * 0.0509619;
                        var Ke = Ge * 6.11528e-17 - De * -0.998701 - Ee * 0.0509619 - Fe * -3.12052e-18;
                        var Le = He * He;
                        var Me = Ie * Ie;
                        var Ne = Je * Je;
                        var Oe = Ke * Ke;
                        var Pe = He * Ie;
                        var Qe = Ie * Je;
                        var Re = He * Je;
                        var Se = Ke * He;
                        var Te = Ke * Ie;
                        var Ue = Ke * Je;
                        var Ve = Oe + Le - Me - Ne;
                        var We = (Pe + Ue) * 2.0;
                        var Xe = (Re - Te) * 2.0;
                        var Ye = (Pe - Ue) * 2.0;
                        var Ze = Oe - Le + Me - Ne;
                        var af = (Qe + Se) * 2.0;
                        var bf = (Re + Te) * 2.0;
                        var cf = (Qe - Se) * 2.0;
                        var df = Oe - Le - Me + Ne;
                        var ef = K * Ve + N * We + Q * Xe;
                        var ff = L * Ve + O * We + R * Xe;
                        var gf = M * Ve + P * We + S * Xe;
                        var hf = K * Ye + N * Ze + Q * af;
                        var jf = L * Ye + O * Ze + R * af;
                        var kf = M * Ye + P * Ze + S * af;
                        var lf = K * bf + N * cf + Q * df;
                        var mf = L * bf + O * cf + R * df;
                        var nf = M * bf + P * cf + S * df;
                        var of = K * -0.387873 + N * 0.170759 + Q * -1.01942 + l;
                        var pf = L * -0.387873 + O * 0.170759 + R * -1.01942 + j;
                        var qf = M * -0.387873 + P * 0.170759 + S * -1.01942 + h;
                        var rf = fstate[0];
                        var sf;
                        if (rf < 0.0)
                        {
                            sf = 0.0;
                        }
                        else
                        {
                            if (rf < 4.16666)
                            {
                                sf = (engine.eCT(buffers[13], rf * 24.0 + 1.0) * 8.51112e-6 + -0.100882) * 0.5;
                            }
                            else
                            {
                                sf = 0.180021;
                            }
                        }
                        var tf = fstate[0];
                        var uf;
                        if (tf < 0.0)
                        {
                            uf = 0.0;
                        }
                        else
                        {
                            if (tf < 4.16666)
                            {
                                uf = (engine.eCT(buffers[12], tf * 24.0 + 1.0) * 2.06288e-5 + -0.240302) * 0.5;
                            }
                            else
                            {
                                uf = 0.437986;
                            }
                        }
                        var vf = Math.cos(uf);
                        var wf = Math.sin(uf);
                        var xf = Math.cos(sf);
                        var yf = Math.sin(sf);
                        var zf = -(yf * wf);
                        var Af = xf * wf;
                        var Bf = yf * vf;
                        var Cf = xf * vf;
                        var Df = zf * 0.551999 + Cf * -0.823689 + Bf * 0.107778 - Af * -0.0722282;
                        var Ef = Af * 0.551999 + Cf * 0.107778 + zf * -0.0722282 - Bf * -0.823689;
                        var Ff = Bf * 0.551999 + Cf * -0.0722282 + Af * -0.823689 - zf * 0.107778;
                        var Gf = Cf * 0.551999 - zf * -0.823689 - Af * 0.107778 - Bf * -0.0722282;
                        var Hf = Df * Df;
                        var If = Ef * Ef;
                        var Jf = Ff * Ff;
                        var Kf = Gf * Gf;
                        var Lf = Df * Ef;
                        var Mf = Ef * Ff;
                        var Nf = Df * Ff;
                        var Of = Gf * Df;
                        var Pf = Gf * Ef;
                        var Qf = Gf * Ff;
                        var Rf = Kf + Hf - If - Jf;
                        var Sf = (Lf + Qf) * 2.0;
                        var Tf = (Nf - Pf) * 2.0;
                        var Uf = (Lf - Qf) * 2.0;
                        var Vf = Kf - Hf + If - Jf;
                        var Wf = (Mf + Of) * 2.0;
                        var Xf = (Nf + Pf) * 2.0;
                        var Yf = (Mf - Of) * 2.0;
                        var Zf = Kf - Hf - If + Jf;
                        var ag = ef * Rf + hf * Sf + lf * Tf;
                        var bg = ff * Rf + jf * Sf + mf * Tf;
                        var cg = gf * Rf + kf * Sf + nf * Tf;
                        var dg = ef * Uf + hf * Vf + lf * Wf;
                        var eg = ff * Uf + jf * Vf + mf * Wf;
                        var fg = gf * Uf + kf * Vf + nf * Wf;
                        var gg = ef * Xf + hf * Yf + lf * Zf;
                        var hg = ff * Xf + jf * Yf + mf * Zf;
                        var ig = gf * Xf + kf * Yf + nf * Zf;
                        var jg = ef * -1.95064 + hf * -6.69052e-7 + lf * -1.01012e-6 + of;
                        var kg = ff * -1.95064 + jf * -6.69052e-7 + mf * -1.01012e-6 + pf;
                        var lg = gf * -1.95064 + kf * -6.69052e-7 + nf * -1.01012e-6 + qf;
                        var mg = ag * 2.98023e-8 + dg * 0.92492 + gg * 0.380159;
                        var ng = bg * 2.98023e-8 + eg * 0.92492 + hg * 0.380159;
                        var og = cg * 2.98023e-8 + fg * 0.92492 + ig * 0.380159;
                        var pg = ag * -0.994219 + dg * 0.0408141 + gg * -0.0993;
                        var qg = bg * -0.994219 + eg * 0.0408141 + hg * -0.0993;
                        var rg = cg * -0.994219 + fg * 0.0408141 + ig * -0.0993;
                        var sg = ag * -0.10736 + dg * -0.377961 + gg * 0.919574;
                        var tg = bg * -0.10736 + eg * -0.377961 + hg * 0.919574;
                        var ug = cg * -0.10736 + fg * -0.377961 + ig * 0.919574;
                        var vg = fstate[0];
                        var wg;
                        if (vg < 0.0)
                        {
                            wg = -2.45552e-11;
                        }
                        else
                        {
                            if (vg < 4.16666)
                            {
                                wg = (engine.eCT(buffers[14], vg * 24.0 + 1.0) * 1.83498e-5 + -1.20255) * 0.5;
                            }
                            else
                            {
                                wg = -0.601275;
                            }
                        }
                        var xg = Math.cos(wg);
                        var yg = Math.sin(wg);
                        var zg = xg * 1.79472e-9 - yg * -4.40699e-20;
                        var Ag = yg + xg * -4.40699e-20 * 1.79472e-9;
                        var Bg = yg * -1.79472e-9 + xg * -4.40699e-20;
                        var Cg = xg - yg * 4.40699e-20 * 1.79472e-9;
                        var Dg = zg * 0.563523 + Cg * -0.572007 + Bg * 0.415701 - Ag * 0.427131;
                        var Eg = Ag * 0.563523 + Cg * 0.415701 + zg * 0.427131 - Bg * -0.572007;
                        var Fg = Bg * 0.563523 + Cg * 0.427131 + Ag * -0.572007 - zg * 0.415701;
                        var Gg = Cg * 0.563523 - zg * -0.572007 - Ag * 0.415701 - Bg * 0.427131;
                        var Hg = Dg * Dg;
                        var Ig = Eg * Eg;
                        var Jg = Fg * Fg;
                        var Kg = Gg * Gg;
                        var Lg = Dg * Eg;
                        var Mg = Eg * Fg;
                        var Ng = Dg * Fg;
                        var Og = Gg * Dg;
                        var Pg = Gg * Eg;
                        var Qg = Gg * Fg;
                        var Rg = Kg + Hg - Ig - Jg;
                        var Sg = (Lg + Qg) * 2.0;
                        var Tg = (Ng - Pg) * 2.0;
                        var Ug = (Lg - Qg) * 2.0;
                        var Vg = Kg - Hg + Ig - Jg;
                        var Wg = (Mg + Og) * 2.0;
                        var Xg = (Ng + Pg) * 2.0;
                        var Yg = (Mg - Og) * 2.0;
                        var Zg = Kg - Hg - Ig + Jg;
                        var ah = Lc * Rg + Oc * Sg + Rc * Tg;
                        var bh = Mc * Rg + Pc * Sg + Sc * Tg;
                        var ch = Nc * Rg + Qc * Sg + Tc * Tg;
                        var dh = Lc * Ug + Oc * Vg + Rc * Wg;
                        var eh = Mc * Ug + Pc * Vg + Sc * Wg;
                        var fh = Nc * Ug + Qc * Vg + Tc * Wg;
                        var gh = Lc * Xg + Oc * Yg + Rc * Zg;
                        var hh = Mc * Xg + Pc * Yg + Sc * Zg;
                        var ih = Nc * Xg + Qc * Yg + Tc * Zg;
                        var jh = Lc * 1.62023 + Oc * -0.207425 + Rc * 1.51968 + Uc;
                        var kh = Mc * 1.62023 + Pc * -0.207425 + Sc * 1.51968 + Vc;
                        var lh = Nc * 1.62023 + Qc * -0.207425 + Tc * 1.51968 + Wc;
                        var mh = ah * 0.622883 + dh * -0.0150183 + gh * 0.78217;
                        var nh = bh * 0.622883 + eh * -0.0150183 + hh * 0.78217;
                        var oh = ch * 0.622883 + fh * -0.0150183 + ih * 0.78217;
                        var ph = ah * 0.024104 + dh * 0.999709;
                        var qh = bh * 0.024104 + eh * 0.999709;
                        var rh = ch * 0.024104 + fh * 0.999709;
                        var sh = ah * -0.781943 + dh * 0.0188534 + gh * 0.623064;
                        var th = bh * -0.781943 + eh * 0.0188534 + hh * 0.623064;
                        var uh = ch * -0.781943 + fh * 0.0188534 + ih * 0.623064;
                        var vh = ah * -1.98667 + dh * -4.66514e-6 + gh * 0.219212 + jh;
                        var wh = bh * -1.98667 + eh * -4.66514e-6 + hh * 0.219212 + kh;
                        var xh = ch * -1.98667 + fh * -4.66514e-6 + ih * 0.219212 + lh;
                        var yh = mh * 0.949902 + ph * 0.312548;
                        var zh = nh * 0.949902 + qh * 0.312548;
                        var Ah = oh * 0.949902 + rh * 0.312548;
                        var Bh = mh * -0.312548 + ph * 0.949902;
                        var Ch = nh * -0.312548 + qh * 0.949902;
                        var Dh = oh * -0.312548 + rh * 0.949902;
                        var Eh = sh * 1.0;
                        var Fh = th * 1.0;
                        var Gh = uh * 1.0;
                        var Hh = mh * -2.60746 + ph * -2.45135e-7 + sh * -0.219212 + vh;
                        var Ih = nh * -2.60746 + qh * -2.45135e-7 + th * -0.219212 + wh;
                        var Jh = oh * -2.60746 + rh * -2.45135e-7 + uh * -0.219212 + xh;
                        var Kh = fstate[0];
                        var Lh;
                        if (Kh < 0.0)
                        {
                            Lh = 0.0;
                        }
                        else
                        {
                            if (Kh < 4.16666)
                            {
                                Lh = (engine.eCT(buffers[19], Kh * 24.0 + 1.0) * 9.11981e-6 + -0.0295459) * 0.5;
                            }
                            else
                            {
                                Lh = 0.0729725;
                            }
                        }
                        var Mh = fstate[0];
                        var Nh;
                        if (Mh < 0.0)
                        {
                            Nh = 0.0;
                        }
                        else
                        {
                            if (Mh < 4.16666)
                            {
                                Nh = (engine.eCT(buffers[18], Mh * 24.0 + 1.0) * 2.21653e-5 + -0.0703789) * 0.5;
                            }
                            else
                            {
                                Nh = 0.17754;
                            }
                        }
                        var Oh = Math.cos(Nh);
                        var Ph = Math.sin(Nh);
                        var Qh = Math.cos(Lh);
                        var Rh = Math.sin(Lh);
                        var Sh = -(Rh * Ph);
                        var Th = Qh * Ph;
                        var Uh = Rh * Oh;
                        var Vh = Qh * Oh;
                        var Wh = Sh * 0.551999 + Vh * -0.823689 + Uh * 0.107778 - Th * -0.0722282;
                        var Xh = Th * 0.551999 + Vh * 0.107778 + Sh * -0.0722282 - Uh * -0.823689;
                        var Yh = Uh * 0.551999 + Vh * -0.0722282 + Th * -0.823689 - Sh * 0.107778;
                        var Zh = Vh * 0.551999 - Sh * -0.823689 - Th * 0.107778 - Uh * -0.0722282;
                        var ai = Wh * Wh;
                        var bi = Xh * Xh;
                        var ci = Yh * Yh;
                        var di = Zh * Zh;
                        var ei = Wh * Xh;
                        var fi = Xh * Yh;
                        var gi = Wh * Yh;
                        var hi = Zh * Wh;
                        var ii = Zh * Xh;
                        var ji = Zh * Yh;
                        var ki = di + ai - bi - ci;
                        var li = (ei + ji) * 2.0;
                        var mi = (gi - ii) * 2.0;
                        var ni = (ei - ji) * 2.0;
                        var oi = di - ai + bi - ci;
                        var pi = (fi + hi) * 2.0;
                        var qi = (gi + ii) * 2.0;
                        var ri = (fi - hi) * 2.0;
                        var si = di - ai - bi + ci;
                        var ti = Gb * ki + Jb * li + Mb * mi;
                        var ui = Hb * ki + Kb * li + Nb * mi;
                        var vi = Ib * ki + Lb * li + Ob * mi;
                        var wi = Gb * ni + Jb * oi + Mb * pi;
                        var xi = Hb * ni + Kb * oi + Nb * pi;
                        var yi = Ib * ni + Lb * oi + Ob * pi;
                        var zi = Gb * qi + Jb * ri + Mb * si;
                        var Ai = Hb * qi + Kb * ri + Nb * si;
                        var Bi = Ib * qi + Lb * ri + Ob * si;
                        var Ci = Gb * 1.95064 + Pb;
                        var Di = Hb * 1.95064 + Qb;
                        var Ei = Ib * 1.95064 + Rb;
                        var Fi = ti * 2.98023e-8 + wi * 0.92492 + zi * 0.380159;
                        var Gi = ui * 2.98023e-8 + xi * 0.92492 + Ai * 0.380159;
                        var Hi = vi * 2.98023e-8 + yi * 0.92492 + Bi * 0.380159;
                        var Ii = ti * -0.994219 + wi * 0.0408141 + zi * -0.0993;
                        var Ji = ui * -0.994219 + xi * 0.0408141 + Ai * -0.0993;
                        var Ki = vi * -0.994219 + yi * 0.0408141 + Bi * -0.0993;
                        var Li = ti * -0.10736 + wi * -0.377961 + zi * 0.919574;
                        var Mi = ui * -0.10736 + xi * -0.377961 + Ai * 0.919574;
                        var Ni = vi * -0.10736 + yi * -0.377961 + Bi * 0.919574;
                        var Oi = fstate[0];
                        var Pi;
                        if (Oi < 0.0)
                        {
                            Pi = 0.0;
                        }
                        else
                        {
                            if (Oi < 4.125)
                            {
                                Pi = engine.eCT(buffers[33], Oi * 24.0 + 1.0) * 7.56279e-7 * 0.5;
                            }
                            else
                            {
                                Pi = 0.0247813;
                            }
                        }
                        var Qi = fstate[0];
                        var Ri;
                        if (Qi < 0.0)
                        {
                            Ri = 0.0;
                        }
                        else
                        {
                            if (Qi < 4.125)
                            {
                                Ri = (engine.eCT(buffers[32], Qi * 24.0 + 1.0) * 4.52065e-6 + -0.111176) * 0.5;
                            }
                            else
                            {
                                Ri = -0.0339113;
                            }
                        }
                        var Si = Math.cos(Ri);
                        var Ti = Math.sin(Ri);
                        var Ui = Math.cos(Pi);
                        var Vi = Math.sin(Pi);
                        var Wi = -(Vi * Ti);
                        var Xi = Ui * Ti;
                        var Yi = Vi * Si;
                        var Zi = Ui * Si;
                        var aj = Wi * 0.999964 - Xi * -0.00850668;
                        var bj = Xi * 0.999964 + Wi * -0.00850668;
                        var cj = Yi * 0.999964 + Zi * -0.00850668;
                        var dj = Zi * 0.999964 - Yi * -0.00850668;
                        var ej = aj * aj;
                        var fj = bj * bj;
                        var gj = cj * cj;
                        var hj = dj * dj;
                        var ij = aj * bj;
                        var jj = bj * cj;
                        var kj = aj * cj;
                        var lj = dj * aj;
                        var mj = dj * bj;
                        var nj = dj * cj;
                        var oj = hj + ej - fj - gj;
                        var pj = (ij + nj) * 2.0;
                        var qj = (kj - mj) * 2.0;
                        var rj = (ij - nj) * 2.0;
                        var sj = hj - ej + fj - gj;
                        var tj = (jj + lj) * 2.0;
                        var uj = (kj + mj) * 2.0;
                        var vj = (jj - lj) * 2.0;
                        var wj = hj - ej - fj + gj;
                        var xj = Lc * oj + Oc * pj + Rc * qj;
                        var yj = Mc * oj + Pc * pj + Sc * qj;
                        var zj = Nc * oj + Qc * pj + Tc * qj;
                        var Aj = Lc * rj + Oc * sj + Rc * tj;
                        var Bj = Mc * rj + Pc * sj + Sc * tj;
                        var Cj = Nc * rj + Qc * sj + Tc * tj;
                        var Dj = Lc * uj + Oc * vj + Rc * wj;
                        var Ej = Mc * uj + Pc * vj + Sc * wj;
                        var Fj = Nc * uj + Qc * vj + Tc * wj;
                        var Gj = Lc * 2.70253 + Oc * 1.97758e-15 + Rc * 2.7806e-16 + Uc;
                        var Hj = Mc * 2.70253 + Pc * 1.97758e-15 + Sc * 2.7806e-16 + Vc;
                        var Ij = Nc * 2.70253 + Qc * 1.97758e-15 + Tc * 2.7806e-16 + Wc;
                        var Jj = xj * 2.98023e-8 + Dj * -1.0;
                        var Kj = yj * 2.98023e-8 + Ej * -1.0;
                        var Lj = zj * 2.98023e-8 + Fj * -1.0;
                        var Mj = xj * 0.999311 + Aj * 0.0371375;
                        var Nj = yj * 0.999311 + Bj * 0.0371375;
                        var Oj = zj * 0.999311 + Cj * 0.0371375;
                        var Pj = xj * 0.0371375 + Aj * -0.999311;
                        var Qj = yj * 0.0371375 + Bj * -0.999311;
                        var Rj = zj * 0.0371375 + Cj * -0.999311;
                        var Sj = xj * 5.37141 + Gj;
                        var Tj = yj * 5.37141 + Hj;
                        var Uj = zj * 5.37141 + Ij;
                        var Vj = fstate[0];
                        var Wj;
                        if (Vj < 0.0)
                        {
                            Wj = 0.644215;
                        }
                        else
                        {
                            if (Vj < 4.125)
                            {
                                Wj = (engine.eCT(buffers[39], Vj * 24.0 + 1.0) * 6.9925e-6 + 1.28843) * 0.5;
                            }
                            else
                            {
                                Wj = 0.67582;
                            }
                        }
                        var Xj = fstate[0];
                        var Yj;
                        if (Xj < 0.0)
                        {
                            Yj = 0.0381828;
                        }
                        else
                        {
                            if (Xj < 4.125)
                            {
                                Yj = (engine.eCT(buffers[38], Xj * 24.0 + 1.0) * 1.19827e-7 + 0.0685127) * 0.5;
                            }
                            else
                            {
                                Yj = 0.0376412;
                            }
                        }
                        var Zj = fstate[0];
                        var ak;
                        if (Zj < 0.0)
                        {
                            ak = 0.0;
                        }
                        else
                        {
                            if (Zj < 4.125)
                            {
                                ak = engine.eCT(buffers[37], Zj * 24.0 + 1.0) * 5.15089e-7 * 0.5;
                            }
                            else
                            {
                                ak = 0.00232793;
                            }
                        }
                        var bk = fstate[0];
                        var ck;
                        if (bk < 0.0)
                        {
                            ck = -0.762691;
                        }
                        else
                        {
                            if (bk < 4.125)
                            {
                                ck = engine.eCT(buffers[42], bk * 24.0 + 1.0) * 1.36998e-5 + -1.6605;
                            }
                            else
                            {
                                ck = -0.886524;
                            }
                        }
                        var dk = fstate[0];
                        var ek;
                        if (dk < 0.0)
                        {
                            ek = -1.83565;
                        }
                        else
                        {
                            if (dk < 4.125)
                            {
                                ek = engine.eCT(buffers[41], dk * 24.0 + 1.0) * 7.87824e-7 + -1.83565;
                            }
                            else
                            {
                                ek = -1.82853;
                            }
                        }
                        var fk = fstate[0];
                        var gk;
                        if (fk < 0.0)
                        {
                            gk = -0.68826;
                        }
                        else
                        {
                            if (fk < 4.125)
                            {
                                gk = engine.eCT(buffers[40], fk * 24.0 + 1.0) * 6.75325e-6 + -1.13083;
                            }
                            else
                            {
                                gk = -0.749302;
                            }
                        }
                        var hk = Math.cos(ak);
                        var ik = Math.sin(ak);
                        var jk = Math.cos(Yj);
                        var kk = Math.sin(Yj);
                        var lk = Math.cos(Wj);
                        var mk = Math.sin(Wj);
                        var nk = lk * jk * ik - mk * kk * hk;
                        var ok = lk * kk * hk + mk * jk * ik;
                        var pk = lk * -kk * ik + mk * jk * hk;
                        var qk = lk * jk * hk - mk * -kk * ik;
                        var rk = nk * -0.0103193 + qk * -0.818701 + pk * 0.223468 - ok * -0.528851;
                        var sk = ok * -0.0103193 + qk * 0.223468 + nk * -0.528851 - pk * -0.818701;
                        var tk = pk * -0.0103193 + qk * -0.528851 + ok * -0.818701 - nk * 0.223468;
                        var uk = qk * -0.0103193 - nk * -0.818701 - ok * 0.223468 - pk * -0.528851;
                        var vk = rk * rk;
                        var wk = sk * sk;
                        var xk = tk * tk;
                        var yk = uk * uk;
                        var zk = rk * sk;
                        var Ak = sk * tk;
                        var Bk = rk * tk;
                        var Ck = uk * rk;
                        var Dk = uk * sk;
                        var Ek = uk * tk;
                        var Fk = yk + vk - wk - xk;
                        var Gk = (zk + Ek) * 2.0;
                        var Hk = (Bk - Dk) * 2.0;
                        var Ik = (zk - Ek) * 2.0;
                        var Jk = yk - vk + wk - xk;
                        var Kk = (Ak + Ck) * 2.0;
                        var Lk = (Bk + Dk) * 2.0;
                        var Mk = (Ak - Ck) * 2.0;
                        var Nk = yk - vk - wk + xk;
                        var Ok = yh * Fk + Bh * Gk + Eh * Hk;
                        var Pk = zh * Fk + Ch * Gk + Fh * Hk;
                        var Qk = Ah * Fk + Dh * Gk + Gh * Hk;
                        var Rk = yh * Ik + Bh * Jk + Eh * Kk;
                        var Sk = zh * Ik + Ch * Jk + Fh * Kk;
                        var Tk = Ah * Ik + Dh * Jk + Gh * Kk;
                        var Uk = yh * Lk + Bh * Mk + Eh * Nk;
                        var Vk = zh * Lk + Ch * Mk + Fh * Nk;
                        var Wk = Ah * Lk + Dh * Mk + Gh * Nk;
                        var Xk = yh * gk + Bh * ek + Eh * ck + Hh;
                        var Yk = zh * gk + Ch * ek + Fh * ck + Ih;
                        var Zk = Ah * gk + Dh * ek + Gh * ck + Jh;
                        var al = Ok * 0.997853 + Uk * 0.065476;
                        var bl = Pk * 0.997853 + Vk * 0.065476;
                        var cl = Qk * 0.997853 + Wk * 0.065476;
                        var dl = Ok * 0.065476 + Uk * -0.997853;
                        var el = Pk * 0.065476 + Vk * -0.997853;
                        var fl = Qk * 0.065476 + Wk * -0.997853;
                        var gl = Rk * 0.999999;
                        var hl = Sk * 0.999999;
                        var il = Tk * 0.999999;
                        var jl = Ok * 10.1794 + Uk * -0.0290091 + Xk;
                        var kl = Pk * 10.1794 + Vk * -0.0290091 + Yk;
                        var ll = Qk * 10.1794 + Wk * -0.0290091 + Zk;
                        var ml = al * -0.999973 + dl * -0.00727042;
                        var nl = bl * -0.999973 + el * -0.00727042;
                        var ol = cl * -0.999973 + fl * -0.00727042;
                        var pl = gl * 1.0;
                        var ql = hl * 1.0;
                        var rl = il * 1.0;
                        var sl = al * -0.00727042 + dl * 0.999973;
                        var tl = bl * -0.00727042 + el * 0.999973;
                        var ul = cl * -0.00727042 + fl * 0.999973;
                        var vl = al * 6.23054 + jl;
                        var wl = bl * 6.23054 + kl;
                        var xl = cl * 6.23054 + ll;
                        var yl = fstate[0];
                        var zl;
                        if (yl < 0.0)
                        {
                            zl = 0.102863;
                        }
                        else
                        {
                            if (yl < 4.16666)
                            {
                                zl = (engine.eCT(buffers[43], yl * 24.0 + 1.0) * 7.06932e-6 + -0.244421) * 0.5;
                            }
                            else
                            {
                                zl = 0.0205834;
                            }
                        }
                        var Al = Math.cos(zl);
                        var Bl = Math.sin(zl);
                        var Cl = Al * -0.506124 + Bl * -0.862053;
                        var Dl = Al * -0.862053 - Bl * -0.506124;
                        var El = Bl * -0.014899 + Al * 0.0219463;
                        var Fl = Al * -0.014899 - Bl * 0.0219463;
                        var Gl = Cl * Cl;
                        var Hl = Dl * Dl;
                        var Il = El * El;
                        var Jl = Fl * Fl;
                        var Kl = Cl * Dl;
                        var Ll = Dl * El;
                        var Ml = Cl * El;
                        var Nl = Fl * Cl;
                        var Ol = Fl * Dl;
                        var Pl = Fl * El;
                        var Ql = Jl + Gl - Hl - Il;
                        var Rl = (Kl + Pl) * 2.0;
                        var Sl = (Ml - Ol) * 2.0;
                        var Tl = (Kl - Pl) * 2.0;
                        var Ul = Jl - Gl + Hl - Il;
                        var Vl = (Ll + Nl) * 2.0;
                        var Wl = (Ml + Ol) * 2.0;
                        var Xl = (Ll - Nl) * 2.0;
                        var Yl = Jl - Gl - Hl + Il;
                        var Zl = al * Ql + dl * Rl + gl * Sl;
                        var am = bl * Ql + el * Rl + hl * Sl;
                        var bm = cl * Ql + fl * Rl + il * Sl;
                        var cm = al * Tl + dl * Ul + gl * Vl;
                        var dm = bl * Tl + el * Ul + hl * Vl;
                        var em = cl * Tl + fl * Ul + il * Vl;
                        var fm = al * Wl + dl * Xl + gl * Yl;
                        var gm = bl * Wl + el * Xl + hl * Yl;
                        var hm = cl * Wl + fl * Xl + il * Yl;
                        var im = al * 0.360612 + dl * 0.604067 + gl * 4.10059e-15 + jl;
                        var jm = bl * 0.360612 + el * 0.604067 + hl * 4.10059e-15 + kl;
                        var km = cl * 0.360612 + fl * 0.604067 + il * 4.10059e-15 + ll;
                        var lm = fstate[0];
                        var mm;
                        if (lm < 0.0)
                        {
                            mm = 0.0;
                        }
                        else
                        {
                            if (lm < 4.16666)
                            {
                                mm = (engine.eCT(buffers[46], lm * 24.0 + 1.0) * 8.89537e-6 + -0.126288) * 0.5;
                            }
                            else
                            {
                                mm = 0.071312;
                            }
                        }
                        var nm = fstate[0];
                        var om;
                        if (nm < 0.0)
                        {
                            om = 0.0;
                        }
                        else
                        {
                            if (nm < 4.16666)
                            {
                                om = (engine.eCT(buffers[45], nm * 24.0 + 1.0) * 2.83991e-5 + -0.989508) * 0.5;
                            }
                            else
                            {
                                om = 0.418652;
                            }
                        }
                        var pm = fstate[0];
                        var qm;
                        if (pm < 0.0)
                        {
                            qm = 0.0;
                        }
                        else
                        {
                            if (pm < 4.16666)
                            {
                                qm = (engine.eCT(buffers[44], pm * 24.0 + 1.0) * 4.52492e-6 + -0.229717) * 0.5;
                            }
                            else
                            {
                                qm = -0.037603;
                            }
                        }
                        var rm = Math.cos(qm);
                        var sm = Math.sin(qm);
                        var tm = Math.cos(om);
                        var um = Math.sin(om);
                        var vm = Math.cos(mm);
                        var wm = Math.sin(mm);
                        var xm = vm * tm * sm - wm * um * rm;
                        var ym = vm * um * rm + wm * tm * sm;
                        var zm = vm * -um * sm + wm * tm * rm;
                        var Am = vm * tm * rm - wm * -um * sm;
                        var Bm = xm * -0.50086 + Am * 0.497225 + zm * 0.530921 - ym * 0.469072;
                        var Cm = ym * -0.50086 + Am * 0.530921 + xm * 0.469072 - zm * 0.497225;
                        var Dm = zm * -0.50086 + Am * 0.469072 + ym * 0.497225 - xm * 0.530921;
                        var Em = Am * -0.50086 - xm * 0.497225 - ym * 0.530921 - zm * 0.469072;
                        var Fm = Bm * Bm;
                        var Gm = Cm * Cm;
                        var Hm = Dm * Dm;
                        var Im = Em * Em;
                        var Jm = Bm * Cm;
                        var Km = Cm * Dm;
                        var Lm = Bm * Dm;
                        var Mm = Em * Bm;
                        var Nm = Em * Cm;
                        var Om = Em * Dm;
                        var Pm = Im + Fm - Gm - Hm;
                        var Qm = (Jm + Om) * 2.0;
                        var Rm = (Lm - Nm) * 2.0;
                        var Sm = (Jm - Om) * 2.0;
                        var Tm = Im - Fm + Gm - Hm;
                        var Um = (Km + Mm) * 2.0;
                        var Vm = (Lm + Nm) * 2.0;
                        var Wm = (Km - Mm) * 2.0;
                        var Xm = Im - Fm - Gm + Hm;
                        var Ym = al * Pm + dl * Qm + gl * Rm;
                        var Zm = bl * Pm + el * Qm + hl * Rm;
                        var an = cl * Pm + fl * Qm + il * Rm;
                        var bn = al * Sm + dl * Tm + gl * Um;
                        var cn = bl * Sm + el * Tm + hl * Um;
                        var dn = cl * Sm + fl * Tm + il * Um;
                        var en = al * Vm + dl * Wm + gl * Xm;
                        var fn = bl * Vm + el * Wm + hl * Xm;
                        var gn = cl * Vm + fl * Wm + il * Xm;
                        var hn = al * 3.44073 + dl * 2.54138 + gl * 2.49481 + jl;
                        var jn = bl * 3.44073 + el * 2.54138 + hl * 2.49481 + kl;
                        var kn = cl * 3.44073 + fl * 2.54138 + il * 2.49481 + ll;
                        var ln = fstate[0];
                        var mn;
                        if (ln < 0.0)
                        {
                            mn = 0.0;
                        }
                        else
                        {
                            if (ln < 4.16666)
                            {
                                mn = (engine.eCT(buffers[49], ln * 24.0 + 1.0) * 8.89537e-6 + -0.456669) * 0.5;
                            }
                            else
                            {
                                mn = -0.071312;
                            }
                        }
                        var nn = fstate[0];
                        var on;
                        if (nn < 0.0)
                        {
                            on = 0.0;
                        }
                        else
                        {
                            if (nn < 4.16666)
                            {
                                on = (engine.eCT(buffers[48], nn * 24.0 + 1.0) * 2.83991e-5 + -0.871628) * 0.5;
                            }
                            else
                            {
                                on = -0.418652;
                            }
                        }
                        var pn = fstate[0];
                        var qn;
                        if (pn < 0.0)
                        {
                            qn = 0.0;
                        }
                        else
                        {
                            if (pn < 4.16666)
                            {
                                qn = (engine.eCT(buffers[47], pn * 24.0 + 1.0) * 4.52492e-6 + -0.229717) * 0.5;
                            }
                            else
                            {
                                qn = -0.037603;
                            }
                        }
                        var rn = Math.cos(qn);
                        var sn = Math.sin(qn);
                        var tn = Math.cos(on);
                        var un = Math.sin(on);
                        var vn = Math.cos(mn);
                        var wn = Math.sin(mn);
                        var xn = vn * tn * sn - wn * un * rn;
                        var yn = vn * un * rn + wn * tn * sn;
                        var zn = vn * -un * sn + wn * tn * rn;
                        var An = vn * tn * rn - wn * -un * sn;
                        var Bn = xn * 0.497225 + An * 0.50086 + zn * -0.469072 - yn * 0.530921;
                        var Cn = yn * 0.497225 + An * -0.469072 + xn * 0.530921 - zn * 0.50086;
                        var Dn = zn * 0.497225 + An * 0.530921 + yn * 0.50086 - xn * -0.469072;
                        var En = An * 0.497225 - xn * 0.50086 - yn * -0.469072 - zn * 0.530921;
                        var Fn = Bn * Bn;
                        var Gn = Cn * Cn;
                        var Hn = Dn * Dn;
                        var In = En * En;
                        var Jn = Bn * Cn;
                        var Kn = Cn * Dn;
                        var Ln = Bn * Dn;
                        var Mn = En * Bn;
                        var Nn = En * Cn;
                        var On = En * Dn;
                        var Pn = In + Fn - Gn - Hn;
                        var Qn = (Jn + On) * 2.0;
                        var Rn = (Ln - Nn) * 2.0;
                        var Sn = (Jn - On) * 2.0;
                        var Tn = In - Fn + Gn - Hn;
                        var Un = (Kn + Mn) * 2.0;
                        var Vn = (Ln + Nn) * 2.0;
                        var Wn = (Kn - Mn) * 2.0;
                        var Xn = In - Fn - Gn + Hn;
                        var Yn = al * Pn + dl * Qn + gl * Rn;
                        var Zn = bl * Pn + el * Qn + hl * Rn;
                        var ao = cl * Pn + fl * Qn + il * Rn;
                        var bo = al * Sn + dl * Tn + gl * Un;
                        var co = bl * Sn + el * Tn + hl * Un;
                        var eo = cl * Sn + fl * Tn + il * Un;
                        var fo = al * Vn + dl * Wn + gl * Xn;
                        var go = bl * Vn + el * Wn + hl * Xn;
                        var ho = cl * Vn + fl * Wn + il * Xn;
                        var io = al * 3.46076 + dl * 2.23638 + gl * -2.74651 + jl;
                        var jo = bl * 3.46076 + el * 2.23638 + hl * -2.74651 + kl;
                        var ko = cl * 3.46076 + fl * 2.23638 + il * -2.74651 + ll;
                        var lo = Zl * 0.0046934 + cm * 0.00222803 + fm * -0.999986;
                        var mo = am * 0.0046934 + dm * 0.00222803 + gm * -0.999986;
                        var no = bm * 0.0046934 + em * 0.00222803 + hm * -0.999986;
                        var oo = Zl * -0.429092 + cm * 0.90326 + fm * -1.3858e-6;
                        var po = am * -0.429092 + dm * 0.90326 + gm * -1.3858e-6;
                        var qo = bm * -0.429092 + em * 0.90326 + hm * -1.3858e-6;
                        var ro = Zl * 0.903248 + cm * 0.429087 + fm * 0.00519539;
                        var so = am * 0.903248 + dm * 0.429087 + gm * 0.00519539;
                        var to = bm * 0.903248 + em * 0.429087 + hm * 0.00519539;
                        var uo = am * 5.74189 + jm;
                        var vo = bm * 5.74189 + km;
                        var wo = Rk * 0.998304 + Uk * -0.0582197;
                        var xo = Sk * 0.998304 + Vk * -0.0582197;
                        var yo = Tk * 0.998304 + Wk * -0.0582197;
                        var zo = Rk * -0.0582197 + Uk * -0.998304;
                        var Ao = Sk * -0.0582197 + Vk * -0.998304;
                        var Bo = Tk * -0.0582197 + Wk * -0.998304;
                        var Co = Ok * -8.05275 + Rk * 15.8114 + Uk * -10.8013 + Xk;
                        var Do = Pk * -8.05275 + Sk * 15.8114 + Vk * -10.8013 + Yk;
                        var Eo = Qk * -8.05275 + Tk * 15.8114 + Wk * -10.8013 + Zk;
                        var Fo = wo * -16.4322 + Ok * 11.5634 + zo * -9.86858 + Co;
                        var Go = xo * -16.4322 + Pk * 11.5634 + Ao * -9.86858 + Do;
                        var Ho = yo * -16.4322 + Qk * 11.5634 + Bo * -9.86858 + Eo;
                        var Io = Math.abs(wo) * 0.416006 + Math.abs(Ok) * 10.6418 + Math.abs(zo) * 0.416006;
                        var Jo = Math.abs(xo) * 0.416006 + Math.abs(Pk) * 10.6418 + Math.abs(Ao) * 0.416006;
                        var Ko = Math.abs(yo) * 0.416006 + Math.abs(Qk) * 10.6418 + Math.abs(Bo) * 0.416006;
                        var Lo = Fo - Io;
                        var Mo = Go - Jo;
                        var No = Ho - Ko;
                        var Oo = Fo + Io;
                        var Po = Go + Jo;
                        var Qo = Ho + Ko;
                        var Ro = Pk * 0.996666 + Qk * 0.0815906;
                        var So = Pk * -0.0815906 + Qk * 0.996666;
                        var To = Sk * 0.996666 + Tk * 0.0815906;
                        var Uo = Sk * -0.0815906 + Tk * 0.996666;
                        var Vo = Vk * 0.996666 + Wk * 0.0815906;
                        var Wo = Vk * -0.0815906 + Wk * 0.996666;
                        var Xo = Rk * 0.998304 + Uk * -0.0582197;
                        var Yo = To * 0.998304 + Vo * -0.0582197;
                        var Zo = Uo * 0.998304 + Wo * -0.0582197;
                        var ap = Ok * 0.996666 + Rk * -0.00475017 + Uk * -0.0814522;
                        var bp = Ro * 0.996666 + To * -0.00475017 + Vo * -0.0814522;
                        var cp = So * 0.996666 + Uo * -0.00475017 + Wo * -0.0814522;
                        var dp = Ok * -0.0815906 + Rk * -0.0580256 + Uk * -0.994976;
                        var ep = Ro * -0.0815906 + To * -0.0580256 + Vo * -0.994976;
                        var fp = So * -0.0815906 + Uo * -0.0580256 + Wo * -0.994976;
                        var gp = Ok * -6.90397 + Rk * 42.8571 + Uk * -1.37972 + Xk;
                        var hp = Ro * -6.90397 + To * 42.8571 + Vo * -1.37972 + Yk * 0.996666 + Zk * 0.0815906 + 0.0253191;
                        var ip = So * -6.90397 + Uo * 42.8571 + Wo * -1.37972 + Yk * -0.0815906 + Zk * 0.996666 + 1.41714;
                        var jp = bl * 0.996666 + cl * 0.0815906;
                        var kp = bl * -0.0815906 + cl * 0.996666;
                        var lp = el * 0.996666 + fl * 0.0815906;
                        var mp = el * -0.0815906 + fl * 0.996666;
                        var np = hl * 0.996666 + il * 0.0815906;
                        var op = hl * -0.0815906 + il * 0.996666;
                        var pp = al * -0.003812 + dl * 0.0580947 + gl * 0.998304;
                        var qp = jp * -0.003812 + lp * 0.0580947 + np * 0.998304;
                        var rp = kp * -0.003812 + mp * 0.0580947 + op * 0.998304;
                        var sp = al * 0.989194 + dl * 0.146535 + gl * -0.00475016;
                        var tp = jp * 0.989194 + lp * 0.146535 + np * -0.00475016;
                        var up = kp * 0.989194 + mp * 0.146535 + op * -0.00475016;
                        var vp = al * -0.146562 + dl * 0.987499 + gl * -0.0580255;
                        var wp = jp * -0.146562 + lp * 0.987499 + np * -0.0580255;
                        var xp = kp * -0.146562 + mp * 0.987499 + op * -0.0580255;
                        var yp = al * -17.1352 + dl * 0.229262 + gl * 42.8571 + jl;
                        var zp = jp * -17.1352 + lp * 0.229262 + np * 42.8571 + kl * 0.996666 + ll * 0.0815906 + 0.0253191;
                        var Ap = kp * -17.1352 + mp * 0.229262 + op * 42.8571 + kl * -0.0815906 + ll * 0.996666 + 1.41714;
                        var Bp = nl * 0.996666 + ol * 0.0815906;
                        var Cp = nl * -0.0815906 + ol * 0.996666;
                        var Dp = ql * 0.996666 + rl * 0.0815906;
                        var Ep = ql * -0.0815906 + rl * 0.996666;
                        var Fp = tl * 0.996666 + ul * 0.0815906;
                        var Gp = tl * -0.0815906 + ul * 0.996666;
                        var Hp = ml * 0.00338954 + pl * 0.998304 + sl * 0.0581209;
                        var Ip = Bp * 0.00338954 + Dp * 0.998304 + Fp * 0.0581209;
                        var Jp = Cp * 0.00338954 + Ep * 0.998304 + Gp * 0.0581209;
                        var Kp = ml * -0.990234 + pl * -0.00475017 + sl * 0.139339;
                        var Lp = Bp * -0.990234 + Dp * -0.00475017 + Fp * 0.139339;
                        var Mp = Cp * -0.990234 + Ep * -0.00475017 + Gp * 0.139339;
                        var Np = ml * 0.139379 + pl * -0.0580256 + sl * 0.988537;
                        var Op = Bp * 0.139379 + Dp * -0.0580256 + Fp * 0.988537;
                        var Pp = Cp * 0.139379 + Ep * -0.0580256 + Gp * 0.988537;
                        var Qp = ml * 23.3634 + pl * 42.8571 + sl * 0.399136 + vl;
                        var Rp = Bp * 23.3634 + Dp * 42.8571 + Fp * 0.399136 + wl * 0.996666 + xl * 0.0815906 + 0.0253191;
                        var Sp = Cp * 23.3634 + Ep * 42.8571 + Gp * 0.399136 + wl * -0.0815906 + xl * 0.996666 + 1.41714;
                        var Tp = am * 0.996666 + bm * 0.0815906;
                        var Up = am * -0.0815906 + bm * 0.996666;
                        var Vp = dm * 0.996666 + em * 0.0815906;
                        var Wp = dm * -0.0815906 + em * 0.996666;
                        var Xp = gm * 0.996666 + hm * 0.0815906;
                        var Yp = gm * -0.0815906 + hm * 0.996666;
                        var Zp = Zl * 0.00469193 + cm * 0.00222895 + fm * -0.999987;
                        var aq = Tp * 0.00469193 + Vp * 0.00222895 + Xp * -0.999987;
                        var bq = Up * 0.00469193 + Wp * 0.00222895 + Yp * -0.999987;
                        var cq = Zl * -0.353966 + cm * 0.935258 + fm * 4.2385e-4;
                        var dq = Tp * -0.353966 + Vp * 0.935258 + Xp * 4.2385e-4;
                        var eq = Up * -0.353966 + Wp * 0.935258 + Yp * 4.2385e-4;
                        var fq = Zl * 0.935246 + cm * 0.35396 + fm * 0.00517713;
                        var gq = Tp * 0.935246 + Vp * 0.35396 + Xp * 0.00517713;
                        var hq = Up * 0.935246 + Wp * 0.35396 + Yp * 0.00517713;
                        var iq = Zl * 6.14475 + cm * -16.4361 + fm * -42.8377 + im;
                        var jq = Tp * 6.14475 + Vp * -16.4361 + Xp * -42.8377 + jm * 0.996666 + km * 0.0815906 + 0.0253191;
                        var kq = Up * 6.14475 + Wp * -16.4361 + Yp * -42.8377 + jm * -0.0815906 + km * 0.996666 + 1.41714;
                        var lq = mo * 0.996666 + no * 0.0815906;
                        var mq = mo * -0.0815906 + no * 0.996666;
                        var nq = po * 0.996666 + qo * 0.0815906;
                        var oq = po * -0.0815906 + qo * 0.996666;
                        var pq = so * 0.996666 + to * 0.0815906;
                        var qq = so * -0.0815906 + to * 0.996666;
                        var rq = oo * 0.996666 + ro * 0.0815906;
                        var sq = nq * 0.996666 + pq * 0.0815906;
                        var tq = oq * 0.996666 + qq * 0.0815906;
                        var uq = oo * -0.0815906 + ro * 0.996666;
                        var vq = nq * -0.0815906 + pq * 0.996666;
                        var wq = oq * -0.0815906 + qq * 0.996666;
                        var xq = lo * 42.8024 + oo * -15.019 + ro * -6.91122 + Zl * 5.74189 + im;
                        var yq = lq * 42.8024 + nq * -15.019 + pq * -6.91122 + uo * 0.996666 + vo * 0.0815906 + 0.0253191;
                        var zq = mq * 42.8024 + oq * -15.019 + qq * -6.91122 + uo * -0.0815906 + vo * 0.996666 + 1.41714;
                        var Aq = Xo * -42.8842 + ap * 16.0318 + dp * 2.56821 + gp;
                        var Bq = Yo * -42.8842 + bp * 16.0318 + ep * 2.56821 + hp;
                        var Cq = Zo * -42.8842 + cp * 16.0318 + fp * 2.56821 + ip;
                        var Dq = Math.abs(Xo) * 4.28684 + Math.abs(ap) * 2.32166 + Math.abs(dp) * 2.90742;
                        var Eq = Math.abs(Yo) * 4.28684 + Math.abs(bp) * 2.32166 + Math.abs(ep) * 2.90742;
                        var Fq = Math.abs(Zo) * 4.28684 + Math.abs(cp) * 2.32166 + Math.abs(fp) * 2.90742;
                        var Gq = pp * -42.8842 + sp * 16.0318 + vp * 2.56821 + yp;
                        var Hq = qp * -42.8842 + tp * 16.0318 + wp * 2.56821 + zp;
                        var Iq = rp * -42.8842 + up * 16.0318 + xp * 2.56821 + Ap;
                        var Jq = Math.abs(pp) * 4.28684 + Math.abs(sp) * 2.32166 + Math.abs(vp) * 2.90742;
                        var Kq = Math.abs(qp) * 4.28684 + Math.abs(tp) * 2.32166 + Math.abs(wp) * 2.90742;
                        var Lq = Math.abs(rp) * 4.28684 + Math.abs(up) * 2.32166 + Math.abs(xp) * 2.90742;
                        var Mq = Hp * -42.8842 + Kp * 16.0318 + Np * 2.56821 + Qp;
                        var Nq = Ip * -42.8842 + Lp * 16.0318 + Op * 2.56821 + Rp;
                        var Oq = Jp * -42.8842 + Mp * 16.0318 + Pp * 2.56821 + Sp;
                        var Pq = Math.abs(Hp) * 4.28684 + Math.abs(Kp) * 2.32166 + Math.abs(Np) * 2.90742;
                        var Qq = Math.abs(Ip) * 4.28684 + Math.abs(Lp) * 2.32166 + Math.abs(Op) * 2.90742;
                        var Rq = Math.abs(Jp) * 4.28684 + Math.abs(Mp) * 2.32166 + Math.abs(Pp) * 2.90742;
                        var Sq = Zp * -42.8842 + cq * 16.0318 + fq * 2.56821 + iq;
                        var Tq = aq * -42.8842 + dq * 16.0318 + gq * 2.56821 + jq;
                        var Uq = bq * -42.8842 + eq * 16.0318 + hq * 2.56821 + kq;
                        var Vq = Math.abs(Zp) * 4.28684 + Math.abs(cq) * 2.32166 + Math.abs(fq) * 2.90742;
                        var Wq = Math.abs(aq) * 4.28684 + Math.abs(dq) * 2.32166 + Math.abs(gq) * 2.90742;
                        var Xq = Math.abs(bq) * 4.28684 + Math.abs(eq) * 2.32166 + Math.abs(hq) * 2.90742;
                        var Yq = lo * -42.8842 + rq * 16.0318 + uq * 2.56821 + xq;
                        var Zq = lq * -42.8842 + sq * 16.0318 + vq * 2.56821 + yq;
                        var ar = mq * -42.8842 + tq * 16.0318 + wq * 2.56821 + zq;
                        var br = Math.abs(lo) * 4.28684 + Math.abs(rq) * 2.32166 + Math.abs(uq) * 2.90742;
                        var cr = Math.abs(lq) * 4.28684 + Math.abs(sq) * 2.32166 + Math.abs(vq) * 2.90742;
                        var dr = Math.abs(mq) * 4.28684 + Math.abs(tq) * 2.32166 + Math.abs(wq) * 2.90742;
                        var er = Math.min(Math.min(Math.min(Math.min(Aq - Dq, Gq - Jq), Mq - Pq), Sq - Vq), Yq - br);
                        var fr = Math.min(Math.min(Math.min(Math.min(Bq - Eq, Hq - Kq), Nq - Qq), Tq - Wq), Zq - cr);
                        var gr = Math.min(Math.min(Math.min(Math.min(Cq - Fq, Iq - Lq), Oq - Rq), Uq - Xq), ar - dr);
                        var hr = Math.max(Math.max(Math.max(Math.max(Aq + Dq, Gq + Jq), Mq + Pq), Sq + Vq), Yq + br);
                        var ir = Math.max(Math.max(Math.max(Math.max(Bq + Eq, Hq + Kq), Nq + Qq), Tq + Wq), Zq + cr);
                        var jr = Math.max(Math.max(Math.max(Math.max(Cq + Fq, Iq + Lq), Oq + Rq), Uq + Xq), ar + dr);
                        var kr = al * -0.003812 + dl * 0.0580947 + gl * 0.998304;
                        var lr = bl * -0.003812 + el * 0.0580947 + hl * 0.998304;
                        var mr = cl * -0.003812 + fl * 0.0580947 + il * 0.998304;
                        var nr = al * 0.997854 + dl * 0.0654762 + gl * 4.11073e-9;
                        var or = bl * 0.997854 + el * 0.0654762 + hl * 4.11073e-9;
                        var pr = cl * 0.997854 + fl * 0.0654762 + il * 4.11073e-9;
                        var qr = al * -0.0653651 + dl * 0.996162 + gl * -0.0582196;
                        var rr = bl * -0.0653651 + el * 0.996162 + hl * -0.0582196;
                        var sr = cl * -0.0653651 + fl * 0.996162 + il * -0.0582196;
                        var tr = al * -17.3178 + dl * 1.63239 + gl * 42.7747 + jl;
                        var ur = bl * -17.3178 + el * 1.63239 + hl * 42.7747 + kl;
                        var vr = cl * -17.3178 + fl * 1.63239 + il * 42.7747 + ll;
                        var wr = ml * 0.00338954 + pl * 0.998304 + sl * 0.0581209;
                        var xr = nl * 0.00338954 + ql * 0.998304 + tl * 0.0581209;
                        var yr = ol * 0.00338954 + rl * 0.998304 + ul * 0.0581209;
                        var zr = ml * -0.998304 + pl * 9.59328e-10 + sl * 0.0582197;
                        var Ar = nl * -0.998304 + ql * 9.59328e-10 + tl * 0.0582197;
                        var Br = ol * -0.998304 + rl * 9.59328e-10 + ul * 0.0582197;
                        var Cr = ml * 0.058121 + pl * -0.0582197 + sl * 0.99661;
                        var Dr = nl * 0.058121 + ql * -0.0582197 + tl * 0.99661;
                        var Er = ol * 0.058121 + rl * -0.0582197 + ul * 0.99661;
                        var Fr = ml * 23.5359 + pl * 42.7747 + sl * 1.80356 + vl;
                        var Gr = nl * 23.5359 + ql * 42.7747 + tl * 1.80356 + wl;
                        var Hr = ol * 23.5359 + rl * 42.7747 + ul * 1.80356 + xl;
                        var Ir = Ym * 40.2379 + bn * -20.7735 + en * -1.89369 + hn;
                        var Jr = Zm * 40.2379 + cn * -20.7735 + fn * -1.89369 + jn;
                        var Kr = an * 40.2379 + dn * -20.7735 + gn * -1.89369 + kn;
                        var Lr = bo * -1.0;
                        var Mr = co * -1.0;
                        var Nr = eo * -1.0;
                        var Or = fo * -1.0;
                        var Pr = go * -1.0;
                        var Qr = ho * -1.0;
                        var Rr = Yn * 45.4882 + bo * 20.7736 + fo * 1.8937 + io;
                        var Sr = Zn * 45.4882 + co * 20.7736 + go * 1.8937 + jo;
                        var Tr = ao * 45.4882 + eo * 20.7736 + ho * 1.8937 + ko;
                        var Ur = kr * -40.2379 + nr * 20.7735 + qr * 2.0246 + tr;
                        var Vr = lr * -40.2379 + or * 20.7735 + rr * 2.0246 + ur;
                        var Wr = mr * -40.2379 + pr * 20.7735 + sr * 2.0246 + vr;
                        var Xr = Math.abs(kr) * 1.06448 + Math.abs(nr) * 1.06448 + Math.abs(qr) * 0.773878;
                        var Yr = Math.abs(lr) * 1.06448 + Math.abs(or) * 1.06448 + Math.abs(rr) * 0.773878;
                        var Zr = Math.abs(mr) * 1.06448 + Math.abs(pr) * 1.06448 + Math.abs(sr) * 0.773878;
                        var as = wr * -40.2379 + zr * 20.7735 + Cr * 2.0246 + Fr;
                        var bs = xr * -40.2379 + Ar * 20.7735 + Dr * 2.0246 + Gr;
                        var cs = yr * -40.2379 + Br * 20.7735 + Er * 2.0246 + Hr;
                        var ds = Math.abs(wr) * 1.06448 + Math.abs(zr) * 1.06448 + Math.abs(Cr) * 0.773878;
                        var es = Math.abs(xr) * 1.06448 + Math.abs(Ar) * 1.06448 + Math.abs(Dr) * 0.773878;
                        var fs = Math.abs(yr) * 1.06448 + Math.abs(Br) * 1.06448 + Math.abs(Er) * 0.773878;
                        var gs = Ym * -40.2379 + bn * 20.7735 + en * 2.0246 + Ir;
                        var hs = Zm * -40.2379 + cn * 20.7735 + fn * 2.0246 + Jr;
                        var js = an * -40.2379 + dn * 20.7735 + gn * 2.0246 + Kr;
                        var ks = Math.abs(Ym) * 1.06448 + Math.abs(bn) * 1.06448 + Math.abs(en) * 0.773878;
                        var ls = Math.abs(Zm) * 1.06448 + Math.abs(cn) * 1.06448 + Math.abs(fn) * 0.773878;
                        var ms = Math.abs(an) * 1.06448 + Math.abs(dn) * 1.06448 + Math.abs(gn) * 0.773878;
                        var ns = Yn * -40.2379 + Lr * 20.7735 + Or * 2.0246 + Rr;
                        var os = Zn * -40.2379 + Mr * 20.7735 + Pr * 2.0246 + Sr;
                        var ps = ao * -40.2379 + Nr * 20.7735 + Qr * 2.0246 + Tr;
                        var qs = Math.abs(Yn) * 1.06448 + Math.abs(Lr) * 1.06448 + Math.abs(Or) * 0.773878;
                        var rs = Math.abs(Zn) * 1.06448 + Math.abs(Mr) * 1.06448 + Math.abs(Pr) * 0.773878;
                        var ss = Math.abs(ao) * 1.06448 + Math.abs(Nr) * 1.06448 + Math.abs(Qr) * 0.773878;
                        var ts = Math.min(Math.min(Math.min(Ur - Xr, as - ds), gs - ks), ns - qs);
                        var us = Math.min(Math.min(Math.min(Vr - Yr, bs - es), hs - ls), os - rs);
                        var vs = Math.min(Math.min(Math.min(Wr - Zr, cs - fs), js - ms), ps - ss);
                        var ws = Math.max(Math.max(Math.max(Ur + Xr, as + ds), gs + ks), ns + qs);
                        var xs = Math.max(Math.max(Math.max(Vr + Yr, bs + es), hs + ls), os + rs);
                        var ys = Math.max(Math.max(Math.max(Wr + Zr, cs + fs), js + ms), ps + ss);
                        var zs = Rk * 0.998304 + Uk * -0.0582197;
                        var As = Sk * 0.998304 + Vk * -0.0582197;
                        var Bs = Tk * 0.998304 + Wk * -0.0582197;
                        var Cs = Rk * -0.0582197 + Uk * -0.998304;
                        var Ds = Sk * -0.0582197 + Vk * -0.998304;
                        var Es = Tk * -0.0582197 + Wk * -0.998304;
                        var Fs = Ok * -6.99436 + Rk * 42.7747 + Uk * -2.79181 + Xk;
                        var Gs = Pk * -6.99436 + Sk * 42.7747 + Vk * -2.79181 + Yk;
                        var Hs = Qk * -6.99436 + Tk * 42.7747 + Wk * -2.79181 + Zk;
                        var Is = al * -0.003812 + dl * 0.0580947 + gl * 0.998304;
                        var Js = bl * -0.003812 + el * 0.0580947 + hl * 0.998304;
                        var Ks = cl * -0.003812 + fl * 0.0580947 + il * 0.998304;
                        var Ls = al * 0.997854 + dl * 0.0654762 + gl * 4.11073e-9;
                        var Ms = bl * 0.997854 + el * 0.0654762 + hl * 4.11073e-9;
                        var Ns = cl * 0.997854 + fl * 0.0654762 + il * 4.11073e-9;
                        var Os = al * -0.0653651 + dl * 0.996162 + gl * -0.0582196;
                        var Ps = bl * -0.0653651 + el * 0.996162 + hl * -0.0582196;
                        var Qs = cl * -0.0653651 + fl * 0.996162 + il * -0.0582196;
                        var Rs = al * -17.3178 + dl * 1.63239 + gl * 42.7747 + jl;
                        var Ss = bl * -17.3178 + el * 1.63239 + hl * 42.7747 + kl;
                        var Ts = cl * -17.3178 + fl * 1.63239 + il * 42.7747 + ll;
                        var Us = zs * -42.8843 + Ok * 19.781 + Cs * -0.284616 + Fs;
                        var Vs = As * -42.8843 + Pk * 19.781 + Ds * -0.284616 + Gs;
                        var Ws = Bs * -42.8843 + Qk * 19.781 + Es * -0.284616 + Hs;
                        var Xs = Math.abs(zs) * 5.07301 + Math.abs(Ok) * 4.95432 + Math.abs(Cs) * 5.65923;
                        var Ys = Math.abs(As) * 5.07301 + Math.abs(Pk) * 4.95432 + Math.abs(Ds) * 5.65923;
                        var Zs = Math.abs(Bs) * 5.07301 + Math.abs(Qk) * 4.95432 + Math.abs(Es) * 5.65923;
                        var at = Is * -42.8843 + Ls * 19.781 + Os * -0.284616 + Rs;
                        var bt = Js * -42.8843 + Ms * 19.781 + Ps * -0.284616 + Ss;
                        var ct = Ks * -42.8843 + Ns * 19.781 + Qs * -0.284616 + Ts;
                        var dt = Math.abs(Is) * 5.07301 + Math.abs(Ls) * 4.95432 + Math.abs(Os) * 5.65923;
                        var et = Math.abs(Js) * 5.07301 + Math.abs(Ms) * 4.95432 + Math.abs(Ps) * 5.65923;
                        var ft = Math.abs(Ks) * 5.07301 + Math.abs(Ns) * 4.95432 + Math.abs(Qs) * 5.65923;
                        var gt = Math.min(Us - Xs, at - dt);
                        var ht = Math.min(Vs - Ys, bt - et);
                        var it = Math.min(Ws - Zs, ct - ft);
                        var jt = Math.max(Us + Xs, at + dt);
                        var kt = Math.max(Vs + Ys, bt + et);
                        var lt = Math.max(Ws + Zs, ct + ft);
                        var mt = al * -0.003812 + dl * 0.0580947 + gl * 0.998304;
                        var nt = bl * -0.003812 + el * 0.0580947 + hl * 0.998304;
                        var ot = cl * -0.003812 + fl * 0.0580947 + il * 0.998304;
                        var pt = al * 0.997854 + dl * 0.0654762 + gl * 4.11073e-9;
                        var qt = bl * 0.997854 + el * 0.0654762 + hl * 4.11073e-9;
                        var rt = cl * 0.997854 + fl * 0.0654762 + il * 4.11073e-9;
                        var st = al * -0.0653651 + dl * 0.996162 + gl * -0.0582196;
                        var tt = bl * -0.0653651 + el * 0.996162 + hl * -0.0582196;
                        var ut = cl * -0.0653651 + fl * 0.996162 + il * -0.0582196;
                        var vt = al * -17.3178 + dl * 1.63239 + gl * 42.7747 + jl;
                        var wt = bl * -17.3178 + el * 1.63239 + hl * 42.7747 + kl;
                        var xt = cl * -17.3178 + fl * 1.63239 + il * 42.7747 + ll;
                        var yt = ml * 0.00338954 + pl * 0.998304 + sl * 0.0581209;
                        var zt = nl * 0.00338954 + ql * 0.998304 + tl * 0.0581209;
                        var At = ol * 0.00338954 + rl * 0.998304 + ul * 0.0581209;
                        var Bt = ml * -0.998304 + pl * 9.59328e-10 + sl * 0.0582197;
                        var Ct = nl * -0.998304 + ql * 9.59328e-10 + tl * 0.0582197;
                        var Dt = ol * -0.998304 + rl * 9.59328e-10 + ul * 0.0582197;
                        var Et = ml * 0.058121 + pl * -0.0582197 + sl * 0.99661;
                        var Ft = nl * 0.058121 + ql * -0.0582197 + tl * 0.99661;
                        var Gt = ol * 0.058121 + rl * -0.0582197 + ul * 0.99661;
                        var Ht = ml * 23.5359 + pl * 42.7747 + sl * 1.80356 + vl;
                        var It = nl * 23.5359 + ql * 42.7747 + tl * 1.80356 + wl;
                        var Jt = ol * 23.5359 + rl * 42.7747 + ul * 1.80356 + xl;
                        var Kt = Ym * 40.2379 + bn * -20.7735 + en * -1.89369 + hn;
                        var Lt = Zm * 40.2379 + cn * -20.7735 + fn * -1.89369 + jn;
                        var Mt = an * 40.2379 + dn * -20.7735 + gn * -1.89369 + kn;
                        var Nt = bo * -1.0;
                        var Ot = co * -1.0;
                        var Pt = eo * -1.0;
                        var Qt = fo * -1.0;
                        var Rt = go * -1.0;
                        var St = ho * -1.0;
                        var Tt = Yn * 45.4882 + bo * 20.7736 + fo * 1.8937 + io;
                        var Ut = Zn * 45.4882 + co * 20.7736 + go * 1.8937 + jo;
                        var Vt = ao * 45.4882 + eo * 20.7736 + ho * 1.8937 + ko;
                        var Wt = mt * -45.4888 + pt * 20.7735 + st * 2.0246 + vt;
                        var Xt = nt * -45.4888 + qt * 20.7735 + tt * 2.0246 + wt;
                        var Yt = ot * -45.4888 + rt * 20.7735 + ut * 2.0246 + xt;
                        var Zt = Math.abs(mt) * 1.06448 + Math.abs(pt) * 1.06448 + Math.abs(st) * 0.773878;
                        var au = Math.abs(nt) * 1.06448 + Math.abs(qt) * 1.06448 + Math.abs(tt) * 0.773878;
                        var bu = Math.abs(ot) * 1.06448 + Math.abs(rt) * 1.06448 + Math.abs(ut) * 0.773878;
                        var cu = yt * -45.4888 + Bt * 20.7735 + Et * 2.0246 + Ht;
                        var du = zt * -45.4888 + Ct * 20.7735 + Ft * 2.0246 + It;
                        var eu = At * -45.4888 + Dt * 20.7735 + Gt * 2.0246 + Jt;
                        var fu = Math.abs(yt) * 1.06448 + Math.abs(Bt) * 1.06448 + Math.abs(Et) * 0.773878;
                        var gu = Math.abs(zt) * 1.06448 + Math.abs(Ct) * 1.06448 + Math.abs(Ft) * 0.773878;
                        var hu = Math.abs(At) * 1.06448 + Math.abs(Dt) * 1.06448 + Math.abs(Gt) * 0.773878;
                        var iu = Ym * -45.4888 + bn * 20.7735 + en * 2.0246 + Kt;
                        var ju = Zm * -45.4888 + cn * 20.7735 + fn * 2.0246 + Lt;
                        var ku = an * -45.4888 + dn * 20.7735 + gn * 2.0246 + Mt;
                        var lu = Math.abs(Ym) * 1.06448 + Math.abs(bn) * 1.06448 + Math.abs(en) * 0.773878;
                        var mu = Math.abs(Zm) * 1.06448 + Math.abs(cn) * 1.06448 + Math.abs(fn) * 0.773878;
                        var nu = Math.abs(an) * 1.06448 + Math.abs(dn) * 1.06448 + Math.abs(gn) * 0.773878;
                        var ou = Yn * -45.4888 + Nt * 20.7735 + Qt * 2.0246 + Tt;
                        var pu = Zn * -45.4888 + Ot * 20.7735 + Rt * 2.0246 + Ut;
                        var qu = ao * -45.4888 + Pt * 20.7735 + St * 2.0246 + Vt;
                        var ru = Math.abs(Yn) * 1.06448 + Math.abs(Nt) * 1.06448 + Math.abs(Qt) * 0.773878;
                        var su = Math.abs(Zn) * 1.06448 + Math.abs(Ot) * 1.06448 + Math.abs(Rt) * 0.773878;
                        var tu = Math.abs(ao) * 1.06448 + Math.abs(Pt) * 1.06448 + Math.abs(St) * 0.773878;
                        var uu = Math.min(Math.min(Math.min(Wt - Zt, cu - fu), iu - lu), ou - ru);
                        var vu = Math.min(Math.min(Math.min(Xt - au, du - gu), ju - mu), pu - su);
                        var wu = Math.min(Math.min(Math.min(Yt - bu, eu - hu), ku - nu), qu - tu);
                        var xu = Math.max(Math.max(Math.max(Wt + Zt, cu + fu), iu + lu), ou + ru);
                        var yu = Math.max(Math.max(Math.max(Xt + au, du + gu), ju + mu), pu + su);
                        var zu = Math.max(Math.max(Math.max(Yt + bu, eu + hu), ku + nu), qu + tu);
                        var Au = Jj * 0.990998 + Kj * 0.133877;
                        var Bu = Jj * -0.133877 + Kj * 0.990998;
                        var Cu = Mj * 0.990998 + Nj * 0.133877;
                        var Du = Mj * -0.133877 + Nj * 0.990998;
                        var Eu = Pj * 0.990998 + Qj * 0.133877;
                        var Fu = Pj * -0.133877 + Qj * 0.990998;
                        var Gu = Au * 0.999732 + Cu * 0.0231227 + Eu * -2.64306e-4;
                        var Hu = Bu * 0.999732 + Du * 0.0231227 + Fu * -2.64306e-4;
                        var Iu = Lj * 0.999732 + Oj * 0.0231227 + Rj * -2.64306e-4;
                        var Ju = Au * -0.0231061 + Cu * 0.999317 + Eu * 0.0288193;
                        var Ku = Bu * -0.0231061 + Du * 0.999317 + Fu * 0.0288193;
                        var Lu = Lj * -0.0231061 + Oj * 0.999317 + Rj * 0.0288193;
                        var Mu = Au * 9.30517e-4 + Cu * -0.0288055 + Eu * 0.999585;
                        var Nu = Bu * 9.30517e-4 + Du * -0.0288055 + Fu * 0.999585;
                        var Ou = Lj * 9.30517e-4 + Oj * -0.0288055 + Rj * 0.999585;
                        var Pu = Au * 0.367704 + Cu * -15.0501 + Eu * -0.232455 + Sj * 0.990998 + Tj * 0.133877 + -1.00876;
                        var Qu = Bu * 0.367704 + Du * -15.0501 + Fu * -0.232455 + Sj * -0.133877 + Tj * 0.990998 + -0.0269786;
                        var Ru = Lj * 0.367704 + Oj * -15.0501 + Rj * -0.232455 + Uj;
                        var Su = Gu * 0.0151095 + Ju * 18.1969 + Mu * -0.0961347 + Pu;
                        var Tu = Hu * 0.0151095 + Ku * 18.1969 + Nu * -0.0961347 + Qu;
                        var Uu = Iu * 0.0151095 + Lu * 18.1969 + Ou * -0.0961347 + Ru;
                        var Vu = Math.abs(Gu) * 8.25598 + Math.abs(Ju) * 3.45125 + Math.abs(Mu) * 4.58112;
                        var Wu = Math.abs(Hu) * 8.25598 + Math.abs(Ku) * 3.45125 + Math.abs(Nu) * 4.58112;
                        var Xu = Math.abs(Iu) * 8.25598 + Math.abs(Lu) * 3.45125 + Math.abs(Ou) * 4.58112;
                        var Yu = Su - Vu;
                        var Zu = Tu - Wu;
                        var av = Uu - Xu;
                        var bv = Su + Vu;
                        var cv = Tu + Wu;
                        var dv = Uu + Xu;
                        var ev = K * 0.998716 + N * 0.0506595;
                        var fv = L * 0.998716 + O * 0.0506595;
                        var gv = M * 0.998716 + P * 0.0506595;
                        var hv = K * -0.0506595 + N * 0.998716;
                        var iv = L * -0.0506595 + O * 0.998716;
                        var jv = M * -0.0506595 + P * 0.998716;
                        var kv = K * -4.59896 + N * 0.046149 + l;
                        var lv = L * -4.59896 + O * 0.046149 + j;
                        var mv = M * -4.59896 + P * 0.046149 + h + -0.0210635;
                        var nv = Q * -2.24024e-4 + ev * 4.99203 + hv * 1.60806 + kv;
                        var ov = R * -2.24024e-4 + fv * 4.99203 + iv * 1.60806 + lv;
                        var pv = S * -2.24024e-4 + gv * 4.99203 + jv * 1.60806 + mv;
                        var qv = Math.abs(Q) * 0.912526 + Math.abs(ev) * 0.91179 + Math.abs(hv) * 0.169205;
                        var rv = Math.abs(R) * 0.912526 + Math.abs(fv) * 0.91179 + Math.abs(iv) * 0.169205;
                        var sv = Math.abs(S) * 0.912526 + Math.abs(gv) * 0.91179 + Math.abs(jv) * 0.169205;
                        var tv = nv - qv;
                        var uv = ov - rv;
                        var vv = pv - sv;
                        var wv = nv + qv;
                        var xv = ov + rv;
                        var yv = pv + sv;
                        var zv = Dj * -1.0;
                        var Av = Ej * -1.0;
                        var Bv = Fj * -1.0;
                        var Cv = xj * 0.99931 + Aj * 0.0371365;
                        var Dv = yj * 0.99931 + Bj * 0.0371365;
                        var Ev = zj * 0.99931 + Cj * 0.0371365;
                        var Fv = xj * 0.0371365 + Aj * -0.99931;
                        var Gv = yj * 0.0371365 + Bj * -0.99931;
                        var Hv = zj * 0.0371365 + Cj * -0.99931;
                        var Iv = xj * -9.7762 + Aj * -0.694077 + Gj;
                        var Jv = yj * -9.7762 + Bj * -0.694077 + Hj;
                        var Kv = zj * -9.7762 + Cj * -0.694077 + Ij;
                        var Lv = zv * -4.77552e-4 + Cv * 13.5195 + Fv * -0.182161 + Iv;
                        var Mv = Av * -4.77552e-4 + Dv * 13.5195 + Gv * -0.182161 + Jv;
                        var Nv = Bv * -4.77552e-4 + Ev * 13.5195 + Hv * -0.182161 + Kv;
                        var Ov = Math.abs(zv) * 7.37218 + Math.abs(Cv) * 3.91181 + Math.abs(Fv) * 1.78532;
                        var Pv = Math.abs(Av) * 7.37218 + Math.abs(Dv) * 3.91181 + Math.abs(Gv) * 1.78532;
                        var Qv = Math.abs(Bv) * 7.37218 + Math.abs(Ev) * 3.91181 + Math.abs(Hv) * 1.78532;
                        var Rv = Lv - Ov;
                        var Sv = Mv - Pv;
                        var Tv = Nv - Qv;
                        var Uv = Lv + Ov;
                        var Vv = Mv + Pv;
                        var Wv = Nv + Qv;
                        var Xv = K * 0.998716 + N * 0.0506595;
                        var Yv = L * 0.998716 + O * 0.0506595;
                        var Zv = M * 0.998716 + P * 0.0506595;
                        var aw = K * -0.0506595 + N * 0.998716;
                        var bw = L * -0.0506595 + O * 0.998716;
                        var cw = M * -0.0506595 + P * 0.998716;
                        var dw = K * -4.5979 + N * 0.0251126 + l;
                        var ew = L * -4.5979 + O * 0.0251126 + j;
                        var fw = M * -4.5979 + P * 0.0251126 + h;
                        var gw = Rc * -1.0;
                        var hw = Sc * -1.0;
                        var iw = Tc * -1.0;
                        var jw = Lc * 0.999797 + Oc * 0.0201301;
                        var kw = Mc * 0.999797 + Pc * 0.0201301;
                        var lw = Nc * 0.999797 + Qc * 0.0201301;
                        var mw = Lc * 0.0201301 + Oc * -0.999797;
                        var nw = Mc * 0.0201301 + Pc * -0.999797;
                        var ow = Nc * 0.0201301 + Qc * -0.999797;
                        var pw = Lc * -7.08405 + Oc * -0.527657 + Uc;
                        var qw = Mc * -7.08405 + Pc * -0.527657 + Vc;
                        var rw = Nc * -7.08405 + Qc * -0.527657 + Wc;
                        var sw = Dj * -1.0;
                        var tw = Ej * -1.0;
                        var uw = Fj * -1.0;
                        var vw = xj * 0.99931 + Aj * 0.0371365;
                        var Aw = yj * 0.99931 + Bj * 0.0371365;
                        var Bw = zj * 0.99931 + Cj * 0.0371365;
                        var Cw = xj * 0.0371365 + Aj * -0.99931;
                        var Dw = yj * 0.0371365 + Bj * -0.99931;
                        var Ew = zj * 0.0371365 + Cj * -0.99931;
                        var Fw = xj * -9.7762 + Aj * -0.694077 + Gj;
                        var Gw = yj * -9.7762 + Bj * -0.694077 + Hj;
                        var Hw = zj * -9.7762 + Cj * -0.694077 + Ij;
                        var Iw = Mj * -15.1629 + Pj * 0.131069 + Sj;
                        var Jw = Nj * -15.1629 + Qj * 0.131069 + Tj;
                        var Kw = Oj * -15.1629 + Rj * 0.131069 + Uj;
                        var Lw = ah * 0.95716 + dh * 0.289561;
                        var Mw = bh * 0.95716 + eh * 0.289561;
                        var Nw = ch * 0.95716 + fh * 0.289561;
                        var Ow = ah * 0.289561 + dh * -0.95716;
                        var Pw = bh * 0.289561 + eh * -0.95716;
                        var Qw = ch * 0.289561 + fh * -0.95716;
                        var Rw = gh * -1.0;
                        var Sw = hh * -1.0;
                        var Tw = ih * -1.0;
                        var Uw = ah * -1.0672 + dh * 8.77591 + gh * -0.144948 + jh;
                        var Vw = bh * -1.0672 + eh * 8.77591 + hh * -0.144948 + kh;
                        var Ww = ch * -1.0672 + fh * 8.77591 + ih * -0.144948 + lh;
                        var Xw = mh * 0.949902 + ph * 0.312548;
                        var Yw = nh * 0.949902 + qh * 0.312548;
                        var Zw = oh * 0.949902 + rh * 0.312548;
                        var ax = mh * 0.312548 + ph * -0.949902;
                        var bx = nh * 0.312548 + qh * -0.949902;
                        var cx = oh * 0.312548 + rh * -0.949902;
                        var dx = sh * -1.0;
                        var ex = th * -1.0;
                        var fx = uh * -1.0;
                        var gx = mh * 0.707674 + ph * 8.79553 + sh * -0.36416 + vh;
                        var hx = nh * 0.707674 + qh * 8.79553 + th * -0.36416 + wh;
                        var ix = oh * 0.707674 + rh * 8.79553 + uh * -0.36416 + xh;
                        var jx = Bh * -1.0;
                        var kx = Ch * -1.0;
                        var lx = Dh * -1.0;
                        var mx = Eh * -1.0;
                        var nx = Fh * -1.0;
                        var ox = Gh * -1.0;
                        var px = yh * 5.89809 + Bh * 7.31875 + Eh * -0.144948 + Hh;
                        var qx = zh * 5.89809 + Ch * 7.31875 + Fh * -0.144948 + Ih;
                        var rx = Ah * 5.89809 + Dh * 7.31875 + Gh * -0.144948 + Jh;
                        var sx = Kd * 0.95716 + Nd * 0.289561;
                        var tx = Ld * 0.95716 + Od * 0.289561;
                        var ux = Md * 0.95716 + Pd * 0.289561;
                        var vx = Kd * -0.289561 + Nd * 0.95716;
                        var Ax = Ld * -0.289561 + Od * 0.95716;
                        var Bx = Md * -0.289561 + Pd * 0.95716;
                        var Cx = Kd * 1.0672 + Nd * -8.77592 + Qd * 0.144948 + Td;
                        var Dx = Ld * 1.0672 + Od * -8.77592 + Rd * 0.144948 + Ud;
                        var Ex = Md * 1.0672 + Pd * -8.77592 + Sd * 0.144948 + Vd;
                        var Fx = Wd * 0.949902 + Zd * 0.312548;
                        var Gx = Xd * 0.949902 + ae * 0.312548;
                        var Hx = Yd * 0.949902 + be * 0.312548;
                        var Ix = Wd * -0.312548 + Zd * 0.949902;
                        var Jx = Xd * -0.312548 + ae * 0.949902;
                        var Kx = Yd * -0.312548 + be * 0.949902;
                        var Lx = Wd * -0.707676 + Zd * -8.79553 + ce * 0.36416 + fe;
                        var Mx = Xd * -0.707676 + ae * -8.79553 + de * 0.36416 + ge;
                        var Nx = Yd * -0.707676 + be * -8.79553 + ee * 0.36416 + he;
                        var Ox = ie * -5.89809 + le * -7.31874 + oe * 0.144948 + Wd * 2.60746 + ce * 0.219212 + fe;
                        var Px = je * -5.89809 + me * -7.31874 + pe * 0.144948 + Xd * 2.60746 + de * 0.219212 + ge;
                        var Qx = ke * -5.89809 + ne * -7.31874 + qe * 0.144948 + Yd * 2.60746 + ee * 0.219212 + he;
                        var Rx = ef * 0.245176 + hf * 5.41454e-8 + lf * -0.969479;
                        var Sx = ff * 0.245176 + jf * 5.41454e-8 + mf * -0.969479;
                        var Tx = gf * 0.245176 + kf * 5.41454e-8 + nf * -0.969479;
                        var Ux = ef * 0.958205 + hf * -0.152057 + lf * 0.242325;
                        var Vx = ff * 0.958205 + jf * -0.152057 + mf * 0.242325;
                        var Wx = gf * 0.958205 + kf * -0.152057 + nf * 0.242325;
                        var Xx = ef * -0.147416 + hf * -0.988372 + lf * -0.0372808;
                        var Yx = ff * -0.147416 + jf * -0.988372 + mf * -0.0372808;
                        var Zx = gf * -0.147416 + kf * -0.988372 + nf * -0.0372808;
                        var ay = ef * -3.79602 + hf * 0.573436 + lf * -2.0115 + of;
                        var by = ff * -3.79602 + jf * 0.573436 + mf * -2.0115 + pf;
                        var cy = gf * -3.79602 + kf * 0.573436 + nf * -2.0115 + qf;
                        var dy = ag * 0.236921 + dg * 0.87271 + gg * 0.426903;
                        var ey = bg * 0.236921 + eg * 0.87271 + hg * 0.426903;
                        var fy = cg * 0.236921 + fg * 0.87271 + ig * 0.426903;
                        var gy = ag * 0.965069 + dg * -0.261995 + gg * 1.40328e-8;
                        var hy = bg * 0.965069 + eg * -0.261995 + hg * 1.40328e-8;
                        var iy = cg * 0.965069 + fg * -0.261995 + ig * 1.40328e-8;
                        var jy = ag * 0.111846 + dg * 0.411991 + gg * -0.904297;
                        var ky = bg * 0.111846 + eg * 0.411991 + hg * -0.904297;
                        var ly = cg * 0.111846 + fg * 0.411991 + ig * -0.904297;
                        var my = ag * -1.93078 + dg * 1.83032 + gg * 0.83807 + jg;
                        var ny = bg * -1.93078 + eg * 1.83032 + hg * 0.83807 + kg;
                        var oy = cg * -1.93078 + fg * 1.83032 + ig * 0.83807 + lg;
                        var py = mg * 0.969479 + pg * -0.242325 + sg * 0.0372807;
                        var qy = ng * 0.969479 + qg * -0.242325 + tg * 0.0372807;
                        var ry = og * 0.969479 + rg * -0.242325 + ug * 0.0372807;
                        var sy = mg * -0.242325 + pg * -0.970184 + sg * -0.00458704;
                        var ty = ng * -0.242325 + qg * -0.970184 + tg * -0.00458704;
                        var uy = og * -0.242325 + rg * -0.970184 + ug * -0.00458704;
                        var vy = mg * 0.0372807 + pg * -0.00458701 + sg * -0.999294;
                        var Ay = ng * 0.0372807 + qg * -0.00458701 + tg * -0.999294;
                        var By = og * 0.0372807 + rg * -0.00458701 + ug * -0.999294;
                        var Cy = mg * 2.0115 + pg * -0.443247 + sg * 0.0319283 + ag * -2.36804 + dg * 7.25483e-7 + gg * 5.71139e-7 + jg;
                        var Dy = ng * 2.0115 + qg * -0.443247 + tg * 0.0319283 + bg * -2.36804 + eg * 7.25483e-7 + hg * 5.71139e-7 + kg;
                        var Ey = og * 2.0115 + rg * -0.443247 + ug * 0.0319283 + cg * -2.36804 + fg * 7.25483e-7 + ig * 5.71139e-7 + lg;
                        var Fy = Gb * 0.245176 + Jb * 5.41454e-8 + Mb * -0.969479;
                        var Gy = Hb * 0.245176 + Kb * 5.41454e-8 + Nb * -0.969479;
                        var Hy = Ib * 0.245176 + Lb * 5.41454e-8 + Ob * -0.969479;
                        var Iy = Gb * -0.958205 + Jb * 0.152057 + Mb * -0.242325;
                        var Jy = Hb * -0.958205 + Kb * 0.152057 + Nb * -0.242325;
                        var Ky = Ib * -0.958205 + Lb * 0.152057 + Ob * -0.242325;
                        var Ly = Gb * 0.147416 + Jb * 0.988372 + Mb * 0.0372808;
                        var My = Hb * 0.147416 + Kb * 0.988372 + Nb * 0.0372808;
                        var Ny = Ib * 0.147416 + Lb * 0.988372 + Ob * 0.0372808;
                        var Oy = Gb * 3.79602 + Jb * -0.573436 + Mb * 2.0115 + Pb;
                        var Py = Hb * 3.79602 + Kb * -0.573436 + Nb * 2.0115 + Qb;
                        var Qy = Ib * 3.79602 + Lb * -0.573436 + Ob * 2.0115 + Rb;
                        var Ry = ti * 0.236921 + wi * 0.87271 + zi * 0.426903;
                        var Sy = ui * 0.236921 + xi * 0.87271 + Ai * 0.426903;
                        var Ty = vi * 0.236921 + yi * 0.87271 + Bi * 0.426903;
                        var Uy = ti * -0.965069 + wi * 0.261995 + zi * -1.14556e-8;
                        var Vy = ui * -0.965069 + xi * 0.261995 + Ai * -1.14556e-8;
                        var Wy = vi * -0.965069 + yi * 0.261995 + Bi * -1.14556e-8;
                        var Xy = ti * -0.111846 + wi * -0.411991 + zi * 0.904297;
                        var Yy = ui * -0.111846 + xi * -0.411991 + Ai * 0.904297;
                        var Zy = vi * -0.111846 + yi * -0.411991 + Bi * 0.904297;
                        var az = ti * 1.93078 + wi * -1.83032 + zi * -0.838069 + Ci;
                        var bz = ui * 1.93078 + xi * -1.83032 + Ai * -0.838069 + Di;
                        var cz = vi * 1.93078 + yi * -1.83032 + Bi * -0.838069 + Ei;
                        var dz = Fi * 0.969479 + Ii * -0.242325 + Li * 0.0372807;
                        var ez = Gi * 0.969479 + Ji * -0.242325 + Mi * 0.0372807;
                        var fz = Hi * 0.969479 + Ki * -0.242325 + Ni * 0.0372807;
                        var gz = Fi * 0.242325 + Ii * 0.970184 + Li * 0.00458704;
                        var hz = Gi * 0.242325 + Ji * 0.970184 + Mi * 0.00458704;
                        var iz = Hi * 0.242325 + Ki * 0.970184 + Ni * 0.00458704;
                        var jz = Fi * -0.0372807 + Ii * 0.00458701 + Li * 0.999294;
                        var kz = Gi * -0.0372807 + Ji * 0.00458701 + Mi * 0.999294;
                        var lz = Hi * -0.0372807 + Ki * 0.00458701 + Ni * 0.999294;
                        var mz = Fi * -2.0115 + Ii * 0.443247 + Li * -0.0319283 + ti * 2.36804 + Ci;
                        var nz = Gi * -2.0115 + Ji * 0.443247 + Mi * -0.0319283 + ui * 2.36804 + Di;
                        var oz = Hi * -2.0115 + Ki * 0.443247 + Ni * -0.0319283 + vi * 2.36804 + Ei;
                        var pz = Q * 7.15256e-7 + Xv * 4.93876 + aw * -0.150521 + dw;
                        var qz = R * 7.15256e-7 + Yv * 4.93876 + bw * -0.150521 + ew;
                        var rz = S * 7.15256e-7 + Zv * 4.93876 + cw * -0.150521 + fw;
                        var sz = Math.abs(Q) * 5.99336 + Math.abs(Xv) * 4.91501 + Math.abs(aw) * 1.88726;
                        var tz = Math.abs(R) * 5.99336 + Math.abs(Yv) * 4.91501 + Math.abs(bw) * 1.88726;
                        var uz = Math.abs(S) * 5.99336 + Math.abs(Zv) * 4.91501 + Math.abs(cw) * 1.88726;
                        var vz = gw * 7.15256e-7 + jw * 4.93876 + mw * -0.150521 + pw;
                        var Az = hw * 7.15256e-7 + kw * 4.93876 + nw * -0.150521 + qw;
                        var Bz = iw * 7.15256e-7 + lw * 4.93876 + ow * -0.150521 + rw;
                        var Cz = Math.abs(gw) * 5.99336 + Math.abs(jw) * 4.91501 + Math.abs(mw) * 1.88726;
                        var Dz = Math.abs(hw) * 5.99336 + Math.abs(kw) * 4.91501 + Math.abs(nw) * 1.88726;
                        var Ez = Math.abs(iw) * 5.99336 + Math.abs(lw) * 4.91501 + Math.abs(ow) * 1.88726;
                        var Fz = sw * 7.15256e-7 + vw * 4.93876 + Cw * -0.150521 + Fw;
                        var Gz = tw * 7.15256e-7 + Aw * 4.93876 + Dw * -0.150521 + Gw;
                        var Hz = uw * 7.15256e-7 + Bw * 4.93876 + Ew * -0.150521 + Hw;
                        var Iz = Math.abs(sw) * 5.99336 + Math.abs(vw) * 4.91501 + Math.abs(Cw) * 1.88726;
                        var Jz = Math.abs(tw) * 5.99336 + Math.abs(Aw) * 4.91501 + Math.abs(Dw) * 1.88726;
                        var Kz = Math.abs(uw) * 5.99336 + Math.abs(Bw) * 4.91501 + Math.abs(Ew) * 1.88726;
                        var Lz = Jj * 7.15256e-7 + Mj * 4.93876 + Pj * -0.150521 + Iw;
                        var Mz = Kj * 7.15256e-7 + Nj * 4.93876 + Qj * -0.150521 + Jw;
                        var Nz = Lj * 7.15256e-7 + Oj * 4.93876 + Rj * -0.150521 + Kw;
                        var Oz = Math.abs(Jj) * 5.99336 + Math.abs(Mj) * 4.91501 + Math.abs(Pj) * 1.88726;
                        var Pz = Math.abs(Kj) * 5.99336 + Math.abs(Nj) * 4.91501 + Math.abs(Qj) * 1.88726;
                        var Qz = Math.abs(Lj) * 5.99336 + Math.abs(Oj) * 4.91501 + Math.abs(Rj) * 1.88726;
                        var Rz = Lw * 7.15256e-7 + Ow * 4.93876 + Rw * -0.150521 + Uw;
                        var Sz = Mw * 7.15256e-7 + Pw * 4.93876 + Sw * -0.150521 + Vw;
                        var Tz = Nw * 7.15256e-7 + Qw * 4.93876 + Tw * -0.150521 + Ww;
                        var Uz = Math.abs(Lw) * 5.99336 + Math.abs(Ow) * 4.91501 + Math.abs(Rw) * 1.88726;
                        var Vz = Math.abs(Mw) * 5.99336 + Math.abs(Pw) * 4.91501 + Math.abs(Sw) * 1.88726;
                        var Wz = Math.abs(Nw) * 5.99336 + Math.abs(Qw) * 4.91501 + Math.abs(Tw) * 1.88726;
                        var Xz = Xw * 7.15256e-7 + ax * 4.93876 + dx * -0.150521 + gx;
                        var Yz = Yw * 7.15256e-7 + bx * 4.93876 + ex * -0.150521 + hx;
                        var Zz = Zw * 7.15256e-7 + cx * 4.93876 + fx * -0.150521 + ix;
                        var aA = Math.abs(Xw) * 5.99336 + Math.abs(ax) * 4.91501 + Math.abs(dx) * 1.88726;
                        var bA = Math.abs(Yw) * 5.99336 + Math.abs(bx) * 4.91501 + Math.abs(ex) * 1.88726;
                        var cA = Math.abs(Zw) * 5.99336 + Math.abs(cx) * 4.91501 + Math.abs(fx) * 1.88726;
                        var dA = yh * 7.15256e-7 + jx * 4.93876 + mx * -0.150521 + px;
                        var eA = zh * 7.15256e-7 + kx * 4.93876 + nx * -0.150521 + qx;
                        var fA = Ah * 7.15256e-7 + lx * 4.93876 + ox * -0.150521 + rx;
                        var gA = Math.abs(yh) * 5.99336 + Math.abs(jx) * 4.91501 + Math.abs(mx) * 1.88726;
                        var hA = Math.abs(zh) * 5.99336 + Math.abs(kx) * 4.91501 + Math.abs(nx) * 1.88726;
                        var iA = Math.abs(Ah) * 5.99336 + Math.abs(lx) * 4.91501 + Math.abs(ox) * 1.88726;
                        var jA = sx * 7.15256e-7 + vx * 4.93876 + Qd * -0.150521 + Cx;
                        var kA = tx * 7.15256e-7 + Ax * 4.93876 + Rd * -0.150521 + Dx;
                        var lA = ux * 7.15256e-7 + Bx * 4.93876 + Sd * -0.150521 + Ex;
                        var mA = Math.abs(sx) * 5.99336 + Math.abs(vx) * 4.91501 + Math.abs(Qd) * 1.88726;
                        var nA = Math.abs(tx) * 5.99336 + Math.abs(Ax) * 4.91501 + Math.abs(Rd) * 1.88726;
                        var oA = Math.abs(ux) * 5.99336 + Math.abs(Bx) * 4.91501 + Math.abs(Sd) * 1.88726;
                        var pA = Fx * 7.15256e-7 + Ix * 4.93876 + ce * -0.150521 + Lx;
                        var qA = Gx * 7.15256e-7 + Jx * 4.93876 + de * -0.150521 + Mx;
                        var rA = Hx * 7.15256e-7 + Kx * 4.93876 + ee * -0.150521 + Nx;
                        var sA = Math.abs(Fx) * 5.99336 + Math.abs(Ix) * 4.91501 + Math.abs(ce) * 1.88726;
                        var tA = Math.abs(Gx) * 5.99336 + Math.abs(Jx) * 4.91501 + Math.abs(de) * 1.88726;
                        var uA = Math.abs(Hx) * 5.99336 + Math.abs(Kx) * 4.91501 + Math.abs(ee) * 1.88726;
                        var vA = ie * 7.15256e-7 + le * 4.93876 + oe * -0.150521 + Ox;
                        var wA = je * 7.15256e-7 + me * 4.93876 + pe * -0.150521 + Px;
                        var xA = ke * 7.15256e-7 + ne * 4.93876 + qe * -0.150521 + Qx;
                        var yA = Math.abs(ie) * 5.99336 + Math.abs(le) * 4.91501 + Math.abs(oe) * 1.88726;
                        var zA = Math.abs(je) * 5.99336 + Math.abs(me) * 4.91501 + Math.abs(pe) * 1.88726;
                        var AA = Math.abs(ke) * 5.99336 + Math.abs(ne) * 4.91501 + Math.abs(qe) * 1.88726;
                        var BA = Rx * 7.15256e-7 + Ux * 4.93876 + Xx * -0.150521 + ay;
                        var CA = Sx * 7.15256e-7 + Vx * 4.93876 + Yx * -0.150521 + by;
                        var DA = Tx * 7.15256e-7 + Wx * 4.93876 + Zx * -0.150521 + cy;
                        var EA = Math.abs(Rx) * 5.99336 + Math.abs(Ux) * 4.91501 + Math.abs(Xx) * 1.88726;
                        var FA = Math.abs(Sx) * 5.99336 + Math.abs(Vx) * 4.91501 + Math.abs(Yx) * 1.88726;
                        var GA = Math.abs(Tx) * 5.99336 + Math.abs(Wx) * 4.91501 + Math.abs(Zx) * 1.88726;
                        var HA = dy * 7.15256e-7 + gy * 4.93876 + jy * -0.150521 + my;
                        var IA = ey * 7.15256e-7 + hy * 4.93876 + ky * -0.150521 + ny;
                        var JA = fy * 7.15256e-7 + iy * 4.93876 + ly * -0.150521 + oy;
                        var KA = Math.abs(dy) * 5.99336 + Math.abs(gy) * 4.91501 + Math.abs(jy) * 1.88726;
                        var LA = Math.abs(ey) * 5.99336 + Math.abs(hy) * 4.91501 + Math.abs(ky) * 1.88726;
                        var MA = Math.abs(fy) * 5.99336 + Math.abs(iy) * 4.91501 + Math.abs(ly) * 1.88726;
                        var NA = py * 7.15256e-7 + sy * 4.93876 + vy * -0.150521 + Cy;
                        var OA = qy * 7.15256e-7 + ty * 4.93876 + Ay * -0.150521 + Dy;
                        var PA = ry * 7.15256e-7 + uy * 4.93876 + By * -0.150521 + Ey;
                        var QA = Math.abs(py) * 5.99336 + Math.abs(sy) * 4.91501 + Math.abs(vy) * 1.88726;
                        var RA = Math.abs(qy) * 5.99336 + Math.abs(ty) * 4.91501 + Math.abs(Ay) * 1.88726;
                        var SA = Math.abs(ry) * 5.99336 + Math.abs(uy) * 4.91501 + Math.abs(By) * 1.88726;
                        var TA = Fy * 7.15256e-7 + Iy * 4.93876 + Ly * -0.150521 + Oy;
                        var UA = Gy * 7.15256e-7 + Jy * 4.93876 + My * -0.150521 + Py;
                        var VA = Hy * 7.15256e-7 + Ky * 4.93876 + Ny * -0.150521 + Qy;
                        var WA = Math.abs(Fy) * 5.99336 + Math.abs(Iy) * 4.91501 + Math.abs(Ly) * 1.88726;
                        var XA = Math.abs(Gy) * 5.99336 + Math.abs(Jy) * 4.91501 + Math.abs(My) * 1.88726;
                        var YA = Math.abs(Hy) * 5.99336 + Math.abs(Ky) * 4.91501 + Math.abs(Ny) * 1.88726;
                        var ZA = Ry * 7.15256e-7 + Uy * 4.93876 + Xy * -0.150521 + az;
                        var aB = Sy * 7.15256e-7 + Vy * 4.93876 + Yy * -0.150521 + bz;
                        var bB = Ty * 7.15256e-7 + Wy * 4.93876 + Zy * -0.150521 + cz;
                        var cB = Math.abs(Ry) * 5.99336 + Math.abs(Uy) * 4.91501 + Math.abs(Xy) * 1.88726;
                        var dB = Math.abs(Sy) * 5.99336 + Math.abs(Vy) * 4.91501 + Math.abs(Yy) * 1.88726;
                        var eB = Math.abs(Ty) * 5.99336 + Math.abs(Wy) * 4.91501 + Math.abs(Zy) * 1.88726;
                        var fB = dz * 7.15256e-7 + gz * 4.93876 + jz * -0.150521 + mz;
                        var gB = ez * 7.15256e-7 + hz * 4.93876 + kz * -0.150521 + nz;
                        var hB = fz * 7.15256e-7 + iz * 4.93876 + lz * -0.150521 + oz;
                        var iB = Math.abs(dz) * 5.99336 + Math.abs(gz) * 4.91501 + Math.abs(jz) * 1.88726;
                        var jB = Math.abs(ez) * 5.99336 + Math.abs(hz) * 4.91501 + Math.abs(kz) * 1.88726;
                        var kB = Math.abs(fz) * 5.99336 + Math.abs(iz) * 4.91501 + Math.abs(lz) * 1.88726;
                        var lB = Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(pz - sz, vz - Cz), Fz - Iz), Lz - Oz), Rz - Uz), Xz - aA), dA - gA), jA - mA), pA - sA), vA - yA), BA - EA), HA - KA), NA - QA), TA - WA), ZA - cB), fB - iB);
                        var mB = Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(qz - tz, Az - Dz), Gz - Jz), Mz - Pz), Sz - Vz), Yz - bA), eA - hA), kA - nA), qA - tA), wA - zA), CA - FA), IA - LA), OA - RA), UA - XA), aB - dB), gB - jB);
                        var nB = Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(rz - uz, Bz - Ez), Hz - Kz), Nz - Qz), Tz - Wz), Zz - cA), fA - iA), lA - oA), rA - uA), xA - AA), DA - GA), JA - MA), PA - SA), VA - YA), bB - eB), hB - kB);
                        var oB = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(pz + sz, vz + Cz), Fz + Iz), Lz + Oz), Rz + Uz), Xz + aA), dA + gA), jA + mA), pA + sA), vA + yA), BA + EA), HA + KA), NA + QA), TA + WA), ZA + cB), fB + iB);
                        var pB = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(qz + tz, Az + Dz), Gz + Jz), Mz + Pz), Sz + Vz), Yz + bA), eA + hA), kA + nA), qA + tA), wA + zA), CA + FA), IA + LA), OA + RA), UA + XA), aB + dB), gB + jB);
                        var qB = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(rz + uz, Bz + Ez), Hz + Kz), Nz + Qz), Tz + Wz), Zz + cA), fA + iA), lA + oA), rA + uA), xA + AA), DA + GA), JA + MA), PA + SA), VA + YA), bB + eB), hB + kB);
                        ftransforms[128] = 0.990998;
                        ftransforms[129] = 0.133875;
                        ftransforms[130] = 0.0;
                        ftransforms[131] = 0.0;
                        ftransforms[132] = -0.133875;
                        ftransforms[133] = 0.990998;
                        ftransforms[134] = 0.0;
                        ftransforms[135] = 0.0;
                        ftransforms[136] = 0.0;
                        ftransforms[137] = 0.0;
                        ftransforms[138] = 1.0;
                        ftransforms[139] = 0.0;
                        ftransforms[140] = 0.996062;
                        ftransforms[141] = 0.161783;
                        ftransforms[142] = 0.0;
                        ftransforms[143] = 1.0;
                        itransforms[8] = 1;
                        ftransforms[32] = 1.0;
                        ftransforms[33] = 0.0;
                        ftransforms[34] = 0.0;
                        ftransforms[35] = 0.0;
                        ftransforms[36] = 0.0;
                        ftransforms[37] = 1.0;
                        ftransforms[38] = 0.0;
                        ftransforms[39] = 0.0;
                        ftransforms[40] = 0.0;
                        ftransforms[41] = 0.0;
                        ftransforms[42] = 1.0;
                        ftransforms[43] = 0.0;
                        ftransforms[44] = 0.0;
                        ftransforms[45] = 0.0;
                        ftransforms[46] = 0.0;
                        ftransforms[47] = 1.0;
                        itransforms[2] = 1;
                        ftransforms[96] = 1.0;
                        ftransforms[97] = 0.0;
                        ftransforms[98] = 0.0;
                        ftransforms[99] = 0.0;
                        ftransforms[100] = 0.0;
                        ftransforms[101] = 1.0;
                        ftransforms[102] = 0.0;
                        ftransforms[103] = 0.0;
                        ftransforms[104] = 0.0;
                        ftransforms[105] = 0.0;
                        ftransforms[106] = 1.0;
                        ftransforms[107] = 0.0;
                        ftransforms[108] = 0.0;
                        ftransforms[109] = 0.0;
                        ftransforms[110] = 0.0;
                        ftransforms[111] = 1.0;
                        itransforms[6] = 1;
                        ftransforms[112] = 1.0;
                        ftransforms[113] = 0.0;
                        ftransforms[114] = 0.0;
                        ftransforms[115] = 0.0;
                        ftransforms[116] = 0.0;
                        ftransforms[117] = 1.0;
                        ftransforms[118] = 0.0;
                        ftransforms[119] = 0.0;
                        ftransforms[120] = 0.0;
                        ftransforms[121] = 0.0;
                        ftransforms[122] = 1.0;
                        ftransforms[123] = 0.0;
                        ftransforms[124] = 0.0;
                        ftransforms[125] = 0.0;
                        ftransforms[126] = 0.0;
                        ftransforms[127] = 1.0;
                        itransforms[7] = 1;
                        ftransforms[80] = 1.0;
                        ftransforms[81] = 0.0;
                        ftransforms[82] = 0.0;
                        ftransforms[83] = 0.0;
                        ftransforms[84] = 0.0;
                        ftransforms[85] = 1.0;
                        ftransforms[86] = 0.0;
                        ftransforms[87] = 0.0;
                        ftransforms[88] = 0.0;
                        ftransforms[89] = 0.0;
                        ftransforms[90] = 1.0;
                        ftransforms[91] = 0.0;
                        ftransforms[92] = 0.0;
                        ftransforms[93] = 0.0;
                        ftransforms[94] = 0.0;
                        ftransforms[95] = 1.0;
                        itransforms[5] = 1;
                        ftransforms[48] = 1.0;
                        ftransforms[49] = 0.0;
                        ftransforms[50] = 0.0;
                        ftransforms[51] = 0.0;
                        ftransforms[52] = 0.0;
                        ftransforms[53] = 0.996666;
                        ftransforms[54] = 0.0815906;
                        ftransforms[55] = 0.0;
                        ftransforms[56] = 0.0;
                        ftransforms[57] = -0.0815906;
                        ftransforms[58] = 0.996666;
                        ftransforms[59] = 0.0;
                        ftransforms[60] = 0.0;
                        ftransforms[61] = 0.0903893;
                        ftransforms[62] = -1.41448;
                        ftransforms[63] = 1.0;
                        itransforms[3] = 1;
                        ftransforms[0] = 1.0;
                        ftransforms[1] = 0.0;
                        ftransforms[2] = 0.0;
                        ftransforms[3] = 0.0;
                        ftransforms[4] = 0.0;
                        ftransforms[5] = 1.0;
                        ftransforms[6] = 0.0;
                        ftransforms[7] = 0.0;
                        ftransforms[8] = 0.0;
                        ftransforms[9] = 0.0;
                        ftransforms[10] = 1.0;
                        ftransforms[11] = 0.0;
                        ftransforms[12] = 0.0;
                        ftransforms[13] = 0.0;
                        ftransforms[14] = 0.0;
                        ftransforms[15] = 1.0;
                        itransforms[0] = 1;
                        ftransforms[16] = 1.0;
                        ftransforms[17] = 0.0;
                        ftransforms[18] = 0.0;
                        ftransforms[19] = 0.0;
                        ftransforms[20] = 0.0;
                        ftransforms[21] = 1.0;
                        ftransforms[22] = 0.0;
                        ftransforms[23] = 0.0;
                        ftransforms[24] = 0.0;
                        ftransforms[25] = 0.0;
                        ftransforms[26] = 1.0;
                        ftransforms[27] = 0.0;
                        ftransforms[28] = 0.0;
                        ftransforms[29] = 0.0;
                        ftransforms[30] = 0.0210634;
                        ftransforms[31] = 1.0;
                        itransforms[1] = 1;
                        ftransforms[64] = 1.0;
                        ftransforms[65] = 0.0;
                        ftransforms[66] = 0.0;
                        ftransforms[67] = 0.0;
                        ftransforms[68] = 0.0;
                        ftransforms[69] = 1.0;
                        ftransforms[70] = 0.0;
                        ftransforms[71] = 0.0;
                        ftransforms[72] = 0.0;
                        ftransforms[73] = 0.0;
                        ftransforms[74] = 1.0;
                        ftransforms[75] = 0.0;
                        ftransforms[76] = 0.0;
                        ftransforms[77] = 0.0;
                        ftransforms[78] = 0.0;
                        ftransforms[79] = 1.0;
                        itransforms[4] = 1;
                        fboundingBoxes[0] = (Uv + Rv) * 0.5;
                        fboundingBoxes[1] = (Vv + Sv) * 0.5;
                        fboundingBoxes[2] = (Wv + Tv) * 0.5;
                        fboundingBoxes[3] = (Uv - Rv) * 0.5;
                        fboundingBoxes[4] = (Vv - Sv) * 0.5;
                        fboundingBoxes[5] = (Wv - Tv) * 0.5;
                        fboundingBoxes[6] = (wv + tv) * 0.5;
                        fboundingBoxes[7] = (xv + uv) * 0.5;
                        fboundingBoxes[8] = (yv + vv) * 0.5;
                        fboundingBoxes[9] = (wv - tv) * 0.5;
                        fboundingBoxes[10] = (xv - uv) * 0.5;
                        fboundingBoxes[11] = (yv - vv) * 0.5;
                        fboundingBoxes[12] = (oB + lB) * 0.5;
                        fboundingBoxes[13] = (pB + mB) * 0.5;
                        fboundingBoxes[14] = (qB + nB) * 0.5;
                        fboundingBoxes[15] = (oB - lB) * 0.5;
                        fboundingBoxes[16] = (pB - mB) * 0.5;
                        fboundingBoxes[17] = (qB - nB) * 0.5;
                        fboundingBoxes[18] = (hr + er) * 0.5;
                        fboundingBoxes[19] = (ir + fr) * 0.5;
                        fboundingBoxes[20] = (jr + gr) * 0.5;
                        fboundingBoxes[21] = (hr - er) * 0.5;
                        fboundingBoxes[22] = (ir - fr) * 0.5;
                        fboundingBoxes[23] = (jr - gr) * 0.5;
                        fboundingBoxes[24] = (Oo + Lo) * 0.5;
                        fboundingBoxes[25] = (Po + Mo) * 0.5;
                        fboundingBoxes[26] = (Qo + No) * 0.5;
                        fboundingBoxes[27] = (Oo - Lo) * 0.5;
                        fboundingBoxes[28] = (Po - Mo) * 0.5;
                        fboundingBoxes[29] = (Qo - No) * 0.5;
                        fboundingBoxes[30] = (xu + uu) * 0.5;
                        fboundingBoxes[31] = (yu + vu) * 0.5;
                        fboundingBoxes[32] = (zu + wu) * 0.5;
                        fboundingBoxes[33] = (xu - uu) * 0.5;
                        fboundingBoxes[34] = (yu - vu) * 0.5;
                        fboundingBoxes[35] = (zu - wu) * 0.5;
                        fboundingBoxes[36] = (jt + gt) * 0.5;
                        fboundingBoxes[37] = (kt + ht) * 0.5;
                        fboundingBoxes[38] = (lt + it) * 0.5;
                        fboundingBoxes[39] = (jt - gt) * 0.5;
                        fboundingBoxes[40] = (kt - ht) * 0.5;
                        fboundingBoxes[41] = (lt - it) * 0.5;
                        fboundingBoxes[42] = (ws + ts) * 0.5;
                        fboundingBoxes[43] = (xs + us) * 0.5;
                        fboundingBoxes[44] = (ys + vs) * 0.5;
                        fboundingBoxes[45] = (ws - ts) * 0.5;
                        fboundingBoxes[46] = (xs - us) * 0.5;
                        fboundingBoxes[47] = (ys - vs) * 0.5;
                        fboundingBoxes[48] = (bv + Yu) * 0.5;
                        fboundingBoxes[49] = (cv + Zu) * 0.5;
                        fboundingBoxes[50] = (dv + av) * 0.5;
                        fboundingBoxes[51] = (bv - Yu) * 0.5;
                        fboundingBoxes[52] = (cv - Zu) * 0.5;
                        fboundingBoxes[53] = (dv - av) * 0.5;
                        funiforms[0] = Q;
                        funiforms[1] = R;
                        funiforms[2] = S;
                        funiforms[3] = kv;
                        funiforms[4] = ev;
                        funiforms[5] = fv;
                        funiforms[6] = gv;
                        funiforms[7] = lv;
                        funiforms[8] = hv;
                        funiforms[9] = iv;
                        funiforms[10] = jv;
                        funiforms[11] = mv;
                        funiforms[12] = kr;
                        funiforms[13] = lr;
                        funiforms[14] = mr;
                        funiforms[15] = tr;
                        funiforms[16] = nr;
                        funiforms[17] = or;
                        funiforms[18] = pr;
                        funiforms[19] = ur;
                        funiforms[20] = qr;
                        funiforms[21] = rr;
                        funiforms[22] = sr;
                        funiforms[23] = vr;
                        funiforms[24] = wr;
                        funiforms[25] = xr;
                        funiforms[26] = yr;
                        funiforms[27] = Fr;
                        funiforms[28] = zr;
                        funiforms[29] = Ar;
                        funiforms[30] = Br;
                        funiforms[31] = Gr;
                        funiforms[32] = Cr;
                        funiforms[33] = Dr;
                        funiforms[34] = Er;
                        funiforms[35] = Hr;
                        funiforms[36] = Ym;
                        funiforms[37] = Zm;
                        funiforms[38] = an;
                        funiforms[39] = Ir;
                        funiforms[40] = bn;
                        funiforms[41] = cn;
                        funiforms[42] = dn;
                        funiforms[43] = Jr;
                        funiforms[44] = en;
                        funiforms[45] = fn;
                        funiforms[46] = gn;
                        funiforms[47] = Kr;
                        funiforms[48] = Yn;
                        funiforms[49] = Zn;
                        funiforms[50] = ao;
                        funiforms[51] = Rr;
                        funiforms[52] = Lr;
                        funiforms[53] = Mr;
                        funiforms[54] = Nr;
                        funiforms[55] = Sr;
                        funiforms[56] = Or;
                        funiforms[57] = Pr;
                        funiforms[58] = Qr;
                        funiforms[59] = Tr;
                        funiforms[60] = Q;
                        funiforms[61] = R;
                        funiforms[62] = S;
                        funiforms[63] = dw;
                        funiforms[64] = Xv;
                        funiforms[65] = Yv;
                        funiforms[66] = Zv;
                        funiforms[67] = ew;
                        funiforms[68] = aw;
                        funiforms[69] = bw;
                        funiforms[70] = cw;
                        funiforms[71] = fw;
                        funiforms[180] = Rx;
                        funiforms[181] = Sx;
                        funiforms[182] = Tx;
                        funiforms[183] = ay;
                        funiforms[184] = Ux;
                        funiforms[185] = Vx;
                        funiforms[186] = Wx;
                        funiforms[187] = by;
                        funiforms[188] = Xx;
                        funiforms[189] = Yx;
                        funiforms[190] = Zx;
                        funiforms[191] = cy;
                        funiforms[192] = dy;
                        funiforms[193] = ey;
                        funiforms[194] = fy;
                        funiforms[195] = my;
                        funiforms[196] = gy;
                        funiforms[197] = hy;
                        funiforms[198] = iy;
                        funiforms[199] = ny;
                        funiforms[200] = jy;
                        funiforms[201] = ky;
                        funiforms[202] = ly;
                        funiforms[203] = oy;
                        funiforms[204] = py;
                        funiforms[205] = qy;
                        funiforms[206] = ry;
                        funiforms[207] = Cy;
                        funiforms[208] = sy;
                        funiforms[209] = ty;
                        funiforms[210] = uy;
                        funiforms[211] = Dy;
                        funiforms[212] = vy;
                        funiforms[213] = Ay;
                        funiforms[214] = By;
                        funiforms[215] = Ey;
                        funiforms[216] = Fy;
                        funiforms[217] = Gy;
                        funiforms[218] = Hy;
                        funiforms[219] = Oy;
                        funiforms[220] = Iy;
                        funiforms[221] = Jy;
                        funiforms[222] = Ky;
                        funiforms[223] = Py;
                        funiforms[224] = Ly;
                        funiforms[225] = My;
                        funiforms[226] = Ny;
                        funiforms[227] = Qy;
                        funiforms[228] = Ry;
                        funiforms[229] = Sy;
                        funiforms[230] = Ty;
                        funiforms[231] = az;
                        funiforms[232] = Uy;
                        funiforms[233] = Vy;
                        funiforms[234] = Wy;
                        funiforms[235] = bz;
                        funiforms[236] = Xy;
                        funiforms[237] = Yy;
                        funiforms[238] = Zy;
                        funiforms[239] = cz;
                        funiforms[240] = dz;
                        funiforms[241] = ez;
                        funiforms[242] = fz;
                        funiforms[243] = mz;
                        funiforms[244] = gz;
                        funiforms[245] = hz;
                        funiforms[246] = iz;
                        funiforms[247] = nz;
                        funiforms[248] = jz;
                        funiforms[249] = kz;
                        funiforms[250] = lz;
                        funiforms[251] = oz;
                        funiforms[72] = gw;
                        funiforms[73] = hw;
                        funiforms[74] = iw;
                        funiforms[75] = pw;
                        funiforms[76] = jw;
                        funiforms[77] = kw;
                        funiforms[78] = lw;
                        funiforms[79] = qw;
                        funiforms[80] = mw;
                        funiforms[81] = nw;
                        funiforms[82] = ow;
                        funiforms[83] = rw;
                        funiforms[84] = sw;
                        funiforms[85] = tw;
                        funiforms[86] = uw;
                        funiforms[87] = Fw;
                        funiforms[88] = vw;
                        funiforms[89] = Aw;
                        funiforms[90] = Bw;
                        funiforms[91] = Gw;
                        funiforms[92] = Cw;
                        funiforms[93] = Dw;
                        funiforms[94] = Ew;
                        funiforms[95] = Hw;
                        funiforms[96] = Jj;
                        funiforms[97] = Kj;
                        funiforms[98] = Lj;
                        funiforms[99] = Iw;
                        funiforms[100] = Mj;
                        funiforms[101] = Nj;
                        funiforms[102] = Oj;
                        funiforms[103] = Jw;
                        funiforms[104] = Pj;
                        funiforms[105] = Qj;
                        funiforms[106] = Rj;
                        funiforms[107] = Kw;
                        funiforms[108] = Lw;
                        funiforms[109] = Mw;
                        funiforms[110] = Nw;
                        funiforms[111] = Uw;
                        funiforms[112] = Ow;
                        funiforms[113] = Pw;
                        funiforms[114] = Qw;
                        funiforms[115] = Vw;
                        funiforms[116] = Rw;
                        funiforms[117] = Sw;
                        funiforms[118] = Tw;
                        funiforms[119] = Ww;
                        funiforms[120] = Xw;
                        funiforms[121] = Yw;
                        funiforms[122] = Zw;
                        funiforms[123] = gx;
                        funiforms[124] = ax;
                        funiforms[125] = bx;
                        funiforms[126] = cx;
                        funiforms[127] = hx;
                        funiforms[128] = dx;
                        funiforms[129] = ex;
                        funiforms[130] = fx;
                        funiforms[131] = ix;
                        funiforms[132] = yh;
                        funiforms[133] = zh;
                        funiforms[134] = Ah;
                        funiforms[135] = px;
                        funiforms[136] = jx;
                        funiforms[137] = kx;
                        funiforms[138] = lx;
                        funiforms[139] = qx;
                        funiforms[140] = mx;
                        funiforms[141] = nx;
                        funiforms[142] = ox;
                        funiforms[143] = rx;
                        funiforms[144] = sx;
                        funiforms[145] = tx;
                        funiforms[146] = ux;
                        funiforms[147] = Cx;
                        funiforms[148] = vx;
                        funiforms[149] = Ax;
                        funiforms[150] = Bx;
                        funiforms[151] = Dx;
                        funiforms[152] = Qd;
                        funiforms[153] = Rd;
                        funiforms[154] = Sd;
                        funiforms[155] = Ex;
                        funiforms[156] = Fx;
                        funiforms[157] = Gx;
                        funiforms[158] = Hx;
                        funiforms[159] = Lx;
                        funiforms[160] = Ix;
                        funiforms[161] = Jx;
                        funiforms[162] = Kx;
                        funiforms[163] = Mx;
                        funiforms[164] = ce;
                        funiforms[165] = de;
                        funiforms[166] = ee;
                        funiforms[167] = Nx;
                        funiforms[168] = ie;
                        funiforms[169] = je;
                        funiforms[170] = ke;
                        funiforms[171] = Ox;
                        funiforms[172] = le;
                        funiforms[173] = me;
                        funiforms[174] = ne;
                        funiforms[175] = Px;
                        funiforms[176] = oe;
                        funiforms[177] = pe;
                        funiforms[178] = qe;
                        funiforms[179] = Qx;
                        funiforms[252] = mt;
                        funiforms[253] = nt;
                        funiforms[254] = ot;
                        funiforms[255] = vt;
                        funiforms[256] = pt;
                        funiforms[257] = qt;
                        funiforms[258] = rt;
                        funiforms[259] = wt;
                        funiforms[260] = st;
                        funiforms[261] = tt;
                        funiforms[262] = ut;
                        funiforms[263] = xt;
                        funiforms[264] = yt;
                        funiforms[265] = zt;
                        funiforms[266] = At;
                        funiforms[267] = Ht;
                        funiforms[268] = Bt;
                        funiforms[269] = Ct;
                        funiforms[270] = Dt;
                        funiforms[271] = It;
                        funiforms[272] = Et;
                        funiforms[273] = Ft;
                        funiforms[274] = Gt;
                        funiforms[275] = Jt;
                        funiforms[276] = Ym;
                        funiforms[277] = Zm;
                        funiforms[278] = an;
                        funiforms[279] = Kt;
                        funiforms[280] = bn;
                        funiforms[281] = cn;
                        funiforms[282] = dn;
                        funiforms[283] = Lt;
                        funiforms[284] = en;
                        funiforms[285] = fn;
                        funiforms[286] = gn;
                        funiforms[287] = Mt;
                        funiforms[288] = Yn;
                        funiforms[289] = Zn;
                        funiforms[290] = ao;
                        funiforms[291] = Tt;
                        funiforms[292] = Nt;
                        funiforms[293] = Ot;
                        funiforms[294] = Pt;
                        funiforms[295] = Ut;
                        funiforms[296] = Qt;
                        funiforms[297] = Rt;
                        funiforms[298] = St;
                        funiforms[299] = Vt;
                        funiforms[300] = Gu;
                        funiforms[301] = Hu;
                        funiforms[302] = Iu;
                        funiforms[303] = Pu;
                        funiforms[304] = Ju;
                        funiforms[305] = Ku;
                        funiforms[306] = Lu;
                        funiforms[307] = Qu;
                        funiforms[308] = Mu;
                        funiforms[309] = Nu;
                        funiforms[310] = Ou;
                        funiforms[311] = Ru;
                        funiforms[312] = Xo;
                        funiforms[313] = Yo;
                        funiforms[314] = Zo;
                        funiforms[315] = gp;
                        funiforms[316] = ap;
                        funiforms[317] = bp;
                        funiforms[318] = cp;
                        funiforms[319] = hp;
                        funiforms[320] = dp;
                        funiforms[321] = ep;
                        funiforms[322] = fp;
                        funiforms[323] = ip;
                        funiforms[324] = pp;
                        funiforms[325] = qp;
                        funiforms[326] = rp;
                        funiforms[327] = yp;
                        funiforms[328] = sp;
                        funiforms[329] = tp;
                        funiforms[330] = up;
                        funiforms[331] = zp;
                        funiforms[332] = vp;
                        funiforms[333] = wp;
                        funiforms[334] = xp;
                        funiforms[335] = Ap;
                        funiforms[336] = Hp;
                        funiforms[337] = Ip;
                        funiforms[338] = Jp;
                        funiforms[339] = Qp;
                        funiforms[340] = Kp;
                        funiforms[341] = Lp;
                        funiforms[342] = Mp;
                        funiforms[343] = Rp;
                        funiforms[344] = Np;
                        funiforms[345] = Op;
                        funiforms[346] = Pp;
                        funiforms[347] = Sp;
                        funiforms[348] = Zp;
                        funiforms[349] = aq;
                        funiforms[350] = bq;
                        funiforms[351] = iq;
                        funiforms[352] = cq;
                        funiforms[353] = dq;
                        funiforms[354] = eq;
                        funiforms[355] = jq;
                        funiforms[356] = fq;
                        funiforms[357] = gq;
                        funiforms[358] = hq;
                        funiforms[359] = kq;
                        funiforms[360] = lo;
                        funiforms[361] = lq;
                        funiforms[362] = mq;
                        funiforms[363] = xq;
                        funiforms[364] = rq;
                        funiforms[365] = sq;
                        funiforms[366] = tq;
                        funiforms[367] = yq;
                        funiforms[368] = uq;
                        funiforms[369] = vq;
                        funiforms[370] = wq;
                        funiforms[371] = zq;
                        funiforms[372] = zs;
                        funiforms[373] = As;
                        funiforms[374] = Bs;
                        funiforms[375] = Fs;
                        funiforms[376] = Ok;
                        funiforms[377] = Pk;
                        funiforms[378] = Qk;
                        funiforms[379] = Gs;
                        funiforms[380] = Cs;
                        funiforms[381] = Ds;
                        funiforms[382] = Es;
                        funiforms[383] = Hs;
                        funiforms[384] = Is;
                        funiforms[385] = Js;
                        funiforms[386] = Ks;
                        funiforms[387] = Rs;
                        funiforms[388] = Ls;
                        funiforms[389] = Ms;
                        funiforms[390] = Ns;
                        funiforms[391] = Ss;
                        funiforms[392] = Os;
                        funiforms[393] = Ps;
                        funiforms[394] = Qs;
                        funiforms[395] = Ts;
                        funiforms[396] = zv;
                        funiforms[397] = Av;
                        funiforms[398] = Bv;
                        funiforms[399] = Iv;
                        funiforms[400] = Cv;
                        funiforms[401] = Dv;
                        funiforms[402] = Ev;
                        funiforms[403] = Jv;
                        funiforms[404] = Fv;
                        funiforms[405] = Gv;
                        funiforms[406] = Hv;
                        funiforms[407] = Kv;
                        funiforms[408] = wo;
                        funiforms[409] = xo;
                        funiforms[410] = yo;
                        funiforms[411] = Co;
                        funiforms[412] = Ok;
                        funiforms[413] = Pk;
                        funiforms[414] = Qk;
                        funiforms[415] = Do;
                        funiforms[416] = zo;
                        funiforms[417] = Ao;
                        funiforms[418] = Bo;
                        funiforms[419] = Eo;
                        ouniforms[0] = ostate[0];
                        ouniforms[1] = ostate[1];
                        ouniforms[2] = ostate[2];
                    };

                    instance.render = function(viewMatrix, projectionMatrix, layerName, renderQueues)
                    {
                        instance.renderSequence = ++global.sequence;
                        var viewProjectionMatrix = instance.viewProjectionMatrix;
                        engine.matrix4x4Mul(projectionMatrix, viewMatrix, viewProjectionMatrix);
                        var funiforms = instance.funiforms;
                        var ouniforms = instance.ouniforms;
                        var itransforms = instance.itransforms;
                        var ftransforms = instance.ftransforms;
                        var fboundingBoxes = instance.fboundingBoxes;

                        // mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface11Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[8];
                        _b[25] = funiforms[9];
                        _b[26] = funiforms[10];
                        _b[27] = funiforms[11];
                        _b[20] = funiforms[4];
                        _b[21] = funiforms[5];
                        _b[22] = funiforms[6];
                        _b[23] = funiforms[7];
                        _b[16] = funiforms[0];
                        _b[17] = funiforms[1];
                        _b[18] = funiforms[2];
                        _b[19] = funiforms[3];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface8Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[144] = funiforms[68];
                        _b[145] = funiforms[69];
                        _b[146] = funiforms[70];
                        _b[147] = funiforms[71];
                        _b[148] = funiforms[80];
                        _b[149] = funiforms[81];
                        _b[150] = funiforms[82];
                        _b[151] = funiforms[83];
                        _b[152] = funiforms[92];
                        _b[153] = funiforms[93];
                        _b[154] = funiforms[94];
                        _b[155] = funiforms[95];
                        _b[156] = funiforms[104];
                        _b[157] = funiforms[105];
                        _b[158] = funiforms[106];
                        _b[159] = funiforms[107];
                        _b[160] = funiforms[116];
                        _b[161] = funiforms[117];
                        _b[162] = funiforms[118];
                        _b[163] = funiforms[119];
                        _b[164] = funiforms[128];
                        _b[165] = funiforms[129];
                        _b[166] = funiforms[130];
                        _b[167] = funiforms[131];
                        _b[168] = funiforms[140];
                        _b[169] = funiforms[141];
                        _b[170] = funiforms[142];
                        _b[171] = funiforms[143];
                        _b[172] = funiforms[152];
                        _b[173] = funiforms[153];
                        _b[174] = funiforms[154];
                        _b[175] = funiforms[155];
                        _b[176] = funiforms[164];
                        _b[177] = funiforms[165];
                        _b[178] = funiforms[166];
                        _b[179] = funiforms[167];
                        _b[180] = funiforms[176];
                        _b[181] = funiforms[177];
                        _b[182] = funiforms[178];
                        _b[183] = funiforms[179];
                        _b[184] = funiforms[188];
                        _b[185] = funiforms[189];
                        _b[186] = funiforms[190];
                        _b[187] = funiforms[191];
                        _b[188] = funiforms[200];
                        _b[189] = funiforms[201];
                        _b[190] = funiforms[202];
                        _b[191] = funiforms[203];
                        _b[192] = funiforms[212];
                        _b[193] = funiforms[213];
                        _b[194] = funiforms[214];
                        _b[195] = funiforms[215];
                        _b[196] = funiforms[224];
                        _b[197] = funiforms[225];
                        _b[198] = funiforms[226];
                        _b[199] = funiforms[227];
                        _b[200] = funiforms[236];
                        _b[201] = funiforms[237];
                        _b[202] = funiforms[238];
                        _b[203] = funiforms[239];
                        _b[204] = funiforms[248];
                        _b[205] = funiforms[249];
                        _b[206] = funiforms[250];
                        _b[207] = funiforms[251];
                        _b[80] = funiforms[64];
                        _b[81] = funiforms[65];
                        _b[82] = funiforms[66];
                        _b[83] = funiforms[67];
                        _b[84] = funiforms[76];
                        _b[85] = funiforms[77];
                        _b[86] = funiforms[78];
                        _b[87] = funiforms[79];
                        _b[88] = funiforms[88];
                        _b[89] = funiforms[89];
                        _b[90] = funiforms[90];
                        _b[91] = funiforms[91];
                        _b[92] = funiforms[100];
                        _b[93] = funiforms[101];
                        _b[94] = funiforms[102];
                        _b[95] = funiforms[103];
                        _b[96] = funiforms[112];
                        _b[97] = funiforms[113];
                        _b[98] = funiforms[114];
                        _b[99] = funiforms[115];
                        _b[100] = funiforms[124];
                        _b[101] = funiforms[125];
                        _b[102] = funiforms[126];
                        _b[103] = funiforms[127];
                        _b[104] = funiforms[136];
                        _b[105] = funiforms[137];
                        _b[106] = funiforms[138];
                        _b[107] = funiforms[139];
                        _b[108] = funiforms[148];
                        _b[109] = funiforms[149];
                        _b[110] = funiforms[150];
                        _b[111] = funiforms[151];
                        _b[112] = funiforms[160];
                        _b[113] = funiforms[161];
                        _b[114] = funiforms[162];
                        _b[115] = funiforms[163];
                        _b[116] = funiforms[172];
                        _b[117] = funiforms[173];
                        _b[118] = funiforms[174];
                        _b[119] = funiforms[175];
                        _b[120] = funiforms[184];
                        _b[121] = funiforms[185];
                        _b[122] = funiforms[186];
                        _b[123] = funiforms[187];
                        _b[124] = funiforms[196];
                        _b[125] = funiforms[197];
                        _b[126] = funiforms[198];
                        _b[127] = funiforms[199];
                        _b[128] = funiforms[208];
                        _b[129] = funiforms[209];
                        _b[130] = funiforms[210];
                        _b[131] = funiforms[211];
                        _b[132] = funiforms[220];
                        _b[133] = funiforms[221];
                        _b[134] = funiforms[222];
                        _b[135] = funiforms[223];
                        _b[136] = funiforms[232];
                        _b[137] = funiforms[233];
                        _b[138] = funiforms[234];
                        _b[139] = funiforms[235];
                        _b[140] = funiforms[244];
                        _b[141] = funiforms[245];
                        _b[142] = funiforms[246];
                        _b[143] = funiforms[247];
                        _b[16] = funiforms[60];
                        _b[17] = funiforms[61];
                        _b[18] = funiforms[62];
                        _b[19] = funiforms[63];
                        _b[20] = funiforms[72];
                        _b[21] = funiforms[73];
                        _b[22] = funiforms[74];
                        _b[23] = funiforms[75];
                        _b[24] = funiforms[84];
                        _b[25] = funiforms[85];
                        _b[26] = funiforms[86];
                        _b[27] = funiforms[87];
                        _b[28] = funiforms[96];
                        _b[29] = funiforms[97];
                        _b[30] = funiforms[98];
                        _b[31] = funiforms[99];
                        _b[32] = funiforms[108];
                        _b[33] = funiforms[109];
                        _b[34] = funiforms[110];
                        _b[35] = funiforms[111];
                        _b[36] = funiforms[120];
                        _b[37] = funiforms[121];
                        _b[38] = funiforms[122];
                        _b[39] = funiforms[123];
                        _b[40] = funiforms[132];
                        _b[41] = funiforms[133];
                        _b[42] = funiforms[134];
                        _b[43] = funiforms[135];
                        _b[44] = funiforms[144];
                        _b[45] = funiforms[145];
                        _b[46] = funiforms[146];
                        _b[47] = funiforms[147];
                        _b[48] = funiforms[156];
                        _b[49] = funiforms[157];
                        _b[50] = funiforms[158];
                        _b[51] = funiforms[159];
                        _b[52] = funiforms[168];
                        _b[53] = funiforms[169];
                        _b[54] = funiforms[170];
                        _b[55] = funiforms[171];
                        _b[56] = funiforms[180];
                        _b[57] = funiforms[181];
                        _b[58] = funiforms[182];
                        _b[59] = funiforms[183];
                        _b[60] = funiforms[192];
                        _b[61] = funiforms[193];
                        _b[62] = funiforms[194];
                        _b[63] = funiforms[195];
                        _b[64] = funiforms[204];
                        _b[65] = funiforms[205];
                        _b[66] = funiforms[206];
                        _b[67] = funiforms[207];
                        _b[68] = funiforms[216];
                        _b[69] = funiforms[217];
                        _b[70] = funiforms[218];
                        _b[71] = funiforms[219];
                        _b[72] = funiforms[228];
                        _b[73] = funiforms[229];
                        _b[74] = funiforms[230];
                        _b[75] = funiforms[231];
                        _b[76] = funiforms[240];
                        _b[77] = funiforms[241];
                        _b[78] = funiforms[242];
                        _b[79] = funiforms[243];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface12Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[404];
                        _b[25] = funiforms[405];
                        _b[26] = funiforms[406];
                        _b[27] = funiforms[407];
                        _b[20] = funiforms[400];
                        _b[21] = funiforms[401];
                        _b[22] = funiforms[402];
                        _b[23] = funiforms[403];
                        _b[16] = funiforms[396];
                        _b[17] = funiforms[397];
                        _b[18] = funiforms[398];
                        _b[19] = funiforms[399];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface238Shape', shader 'pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'
                        var s_ = instance.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[416];
                        _b[25] = funiforms[417];
                        _b[26] = funiforms[418];
                        _b[27] = funiforms[419];
                        _b[20] = funiforms[412];
                        _b[21] = funiforms[413];
                        _b[22] = funiforms[414];
                        _b[23] = funiforms[415];
                        _b[16] = funiforms[408];
                        _b[17] = funiforms[409];
                        _b[18] = funiforms[410];
                        _b[19] = funiforms[411];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface253Shape', shader 'pasted__pasted__lambert2'
                        var s_ = instance.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[308];
                        _b[25] = funiforms[309];
                        _b[26] = funiforms[310];
                        _b[27] = funiforms[311];
                        _b[20] = funiforms[304];
                        _b[21] = funiforms[305];
                        _b[22] = funiforms[306];
                        _b[23] = funiforms[307];
                        _b[16] = funiforms[300];
                        _b[17] = funiforms[301];
                        _b[18] = funiforms[302];
                        _b[19] = funiforms[303];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[1];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface250Shape', shader 'pasted__pasted__lambert5'
                        var s_ = instance.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[48] = funiforms[20];
                        _b[49] = funiforms[21];
                        _b[50] = funiforms[22];
                        _b[51] = funiforms[23];
                        _b[52] = funiforms[32];
                        _b[53] = funiforms[33];
                        _b[54] = funiforms[34];
                        _b[55] = funiforms[35];
                        _b[56] = funiforms[44];
                        _b[57] = funiforms[45];
                        _b[58] = funiforms[46];
                        _b[59] = funiforms[47];
                        _b[60] = funiforms[56];
                        _b[61] = funiforms[57];
                        _b[62] = funiforms[58];
                        _b[63] = funiforms[59];
                        _b[32] = funiforms[16];
                        _b[33] = funiforms[17];
                        _b[34] = funiforms[18];
                        _b[35] = funiforms[19];
                        _b[36] = funiforms[28];
                        _b[37] = funiforms[29];
                        _b[38] = funiforms[30];
                        _b[39] = funiforms[31];
                        _b[40] = funiforms[40];
                        _b[41] = funiforms[41];
                        _b[42] = funiforms[42];
                        _b[43] = funiforms[43];
                        _b[44] = funiforms[52];
                        _b[45] = funiforms[53];
                        _b[46] = funiforms[54];
                        _b[47] = funiforms[55];
                        _b[16] = funiforms[12];
                        _b[17] = funiforms[13];
                        _b[18] = funiforms[14];
                        _b[19] = funiforms[15];
                        _b[20] = funiforms[24];
                        _b[21] = funiforms[25];
                        _b[22] = funiforms[26];
                        _b[23] = funiforms[27];
                        _b[24] = funiforms[36];
                        _b[25] = funiforms[37];
                        _b[26] = funiforms[38];
                        _b[27] = funiforms[39];
                        _b[28] = funiforms[48];
                        _b[29] = funiforms[49];
                        _b[30] = funiforms[50];
                        _b[31] = funiforms[51];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[2];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface252Shape', shader 'pasted__pasted__lambert5'
                        var s_ = instance.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[48] = funiforms[260];
                        _b[49] = funiforms[261];
                        _b[50] = funiforms[262];
                        _b[51] = funiforms[263];
                        _b[52] = funiforms[272];
                        _b[53] = funiforms[273];
                        _b[54] = funiforms[274];
                        _b[55] = funiforms[275];
                        _b[56] = funiforms[284];
                        _b[57] = funiforms[285];
                        _b[58] = funiforms[286];
                        _b[59] = funiforms[287];
                        _b[60] = funiforms[296];
                        _b[61] = funiforms[297];
                        _b[62] = funiforms[298];
                        _b[63] = funiforms[299];
                        _b[32] = funiforms[256];
                        _b[33] = funiforms[257];
                        _b[34] = funiforms[258];
                        _b[35] = funiforms[259];
                        _b[36] = funiforms[268];
                        _b[37] = funiforms[269];
                        _b[38] = funiforms[270];
                        _b[39] = funiforms[271];
                        _b[40] = funiforms[280];
                        _b[41] = funiforms[281];
                        _b[42] = funiforms[282];
                        _b[43] = funiforms[283];
                        _b[44] = funiforms[292];
                        _b[45] = funiforms[293];
                        _b[46] = funiforms[294];
                        _b[47] = funiforms[295];
                        _b[16] = funiforms[252];
                        _b[17] = funiforms[253];
                        _b[18] = funiforms[254];
                        _b[19] = funiforms[255];
                        _b[20] = funiforms[264];
                        _b[21] = funiforms[265];
                        _b[22] = funiforms[266];
                        _b[23] = funiforms[267];
                        _b[24] = funiforms[276];
                        _b[25] = funiforms[277];
                        _b[26] = funiforms[278];
                        _b[27] = funiforms[279];
                        _b[28] = funiforms[288];
                        _b[29] = funiforms[289];
                        _b[30] = funiforms[290];
                        _b[31] = funiforms[291];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[2];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface239Shape', shader 'pasted__pasted__lambert5'
                        var s_ = instance.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[56] = funiforms[320];
                        _b[57] = funiforms[321];
                        _b[58] = funiforms[322];
                        _b[59] = funiforms[323];
                        _b[60] = funiforms[332];
                        _b[61] = funiforms[333];
                        _b[62] = funiforms[334];
                        _b[63] = funiforms[335];
                        _b[64] = funiforms[344];
                        _b[65] = funiforms[345];
                        _b[66] = funiforms[346];
                        _b[67] = funiforms[347];
                        _b[68] = funiforms[356];
                        _b[69] = funiforms[357];
                        _b[70] = funiforms[358];
                        _b[71] = funiforms[359];
                        _b[72] = funiforms[368];
                        _b[73] = funiforms[369];
                        _b[74] = funiforms[370];
                        _b[75] = funiforms[371];
                        _b[36] = funiforms[316];
                        _b[37] = funiforms[317];
                        _b[38] = funiforms[318];
                        _b[39] = funiforms[319];
                        _b[40] = funiforms[328];
                        _b[41] = funiforms[329];
                        _b[42] = funiforms[330];
                        _b[43] = funiforms[331];
                        _b[44] = funiforms[340];
                        _b[45] = funiforms[341];
                        _b[46] = funiforms[342];
                        _b[47] = funiforms[343];
                        _b[48] = funiforms[352];
                        _b[49] = funiforms[353];
                        _b[50] = funiforms[354];
                        _b[51] = funiforms[355];
                        _b[52] = funiforms[364];
                        _b[53] = funiforms[365];
                        _b[54] = funiforms[366];
                        _b[55] = funiforms[367];
                        _b[16] = funiforms[312];
                        _b[17] = funiforms[313];
                        _b[18] = funiforms[314];
                        _b[19] = funiforms[315];
                        _b[20] = funiforms[324];
                        _b[21] = funiforms[325];
                        _b[22] = funiforms[326];
                        _b[23] = funiforms[327];
                        _b[24] = funiforms[336];
                        _b[25] = funiforms[337];
                        _b[26] = funiforms[338];
                        _b[27] = funiforms[339];
                        _b[28] = funiforms[348];
                        _b[29] = funiforms[349];
                        _b[30] = funiforms[350];
                        _b[31] = funiforms[351];
                        _b[32] = funiforms[360];
                        _b[33] = funiforms[361];
                        _b[34] = funiforms[362];
                        _b[35] = funiforms[363];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[2];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface251Shape', shader 'pasted__pasted__lambert5'
                        var s_ = instance.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[32] = funiforms[380];
                        _b[33] = funiforms[381];
                        _b[34] = funiforms[382];
                        _b[35] = funiforms[383];
                        _b[36] = funiforms[392];
                        _b[37] = funiforms[393];
                        _b[38] = funiforms[394];
                        _b[39] = funiforms[395];
                        _b[24] = funiforms[376];
                        _b[25] = funiforms[377];
                        _b[26] = funiforms[378];
                        _b[27] = funiforms[379];
                        _b[28] = funiforms[388];
                        _b[29] = funiforms[389];
                        _b[30] = funiforms[390];
                        _b[31] = funiforms[391];
                        _b[16] = funiforms[372];
                        _b[17] = funiforms[373];
                        _b[18] = funiforms[374];
                        _b[19] = funiforms[375];
                        _b[20] = funiforms[384];
                        _b[21] = funiforms[385];
                        _b[22] = funiforms[386];
                        _b[23] = funiforms[387];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[2];
                        s_.renderJobs = null;

                        var jobIt = renderQueues.begin;
                        var jobEnd = renderQueues.end;
                        if (itransforms[0])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface12Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface12Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[0];
                                data[1] = ftransforms[1];
                                data[2] = ftransforms[2];
                                data[3] = ftransforms[3];
                                data[4] = ftransforms[4];
                                data[5] = ftransforms[5];
                                data[6] = ftransforms[6];
                                data[7] = ftransforms[7];
                                data[8] = ftransforms[8];
                                data[9] = ftransforms[9];
                                data[10] = ftransforms[10];
                                data[11] = ftransforms[11];
                                data[12] = ftransforms[12];
                                data[13] = ftransforms[13];
                                data[14] = ftransforms[14];
                                data[15] = ftransforms[15];
                                renderJob.draw = global.draw.d;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[1])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface11Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface11Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[16];
                                data[1] = ftransforms[17];
                                data[2] = ftransforms[18];
                                data[3] = ftransforms[19];
                                data[4] = ftransforms[20];
                                data[5] = ftransforms[21];
                                data[6] = ftransforms[22];
                                data[7] = ftransforms[23];
                                data[8] = ftransforms[24];
                                data[9] = ftransforms[25];
                                data[10] = ftransforms[26];
                                data[11] = ftransforms[27];
                                data[12] = ftransforms[28];
                                data[13] = ftransforms[29];
                                data[14] = ftransforms[30];
                                data[15] = ftransforms[31];
                                renderJob.draw = global.draw.c;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[2])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface8Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface8Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[32];
                                data[1] = ftransforms[33];
                                data[2] = ftransforms[34];
                                data[3] = ftransforms[35];
                                data[4] = ftransforms[36];
                                data[5] = ftransforms[37];
                                data[6] = ftransforms[38];
                                data[7] = ftransforms[39];
                                data[8] = ftransforms[40];
                                data[9] = ftransforms[41];
                                data[10] = ftransforms[42];
                                data[11] = ftransforms[43];
                                data[12] = ftransforms[44];
                                data[13] = ftransforms[45];
                                data[14] = ftransforms[46];
                                data[15] = ftransforms[47];
                                renderJob.draw = global.draw.a;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[3])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface239Shape_pasted____pasted____lambert5_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[48];
                                data[1] = ftransforms[49];
                                data[2] = ftransforms[50];
                                data[3] = ftransforms[51];
                                data[4] = ftransforms[52];
                                data[5] = ftransforms[53];
                                data[6] = ftransforms[54];
                                data[7] = ftransforms[55];
                                data[8] = ftransforms[56];
                                data[9] = ftransforms[57];
                                data[10] = ftransforms[58];
                                data[11] = ftransforms[59];
                                data[12] = ftransforms[60];
                                data[13] = ftransforms[61];
                                data[14] = ftransforms[62];
                                data[15] = ftransforms[63];
                                renderJob.draw = global.draw.b;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[4])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[64];
                                data[1] = ftransforms[65];
                                data[2] = ftransforms[66];
                                data[3] = ftransforms[67];
                                data[4] = ftransforms[68];
                                data[5] = ftransforms[69];
                                data[6] = ftransforms[70];
                                data[7] = ftransforms[71];
                                data[8] = ftransforms[72];
                                data[9] = ftransforms[73];
                                data[10] = ftransforms[74];
                                data[11] = ftransforms[75];
                                data[12] = ftransforms[76];
                                data[13] = ftransforms[77];
                                data[14] = ftransforms[78];
                                data[15] = ftransforms[79];
                                renderJob.draw = global.draw.e;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[5])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface252Shape_pasted____pasted____lambert5_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[80];
                                data[1] = ftransforms[81];
                                data[2] = ftransforms[82];
                                data[3] = ftransforms[83];
                                data[4] = ftransforms[84];
                                data[5] = ftransforms[85];
                                data[6] = ftransforms[86];
                                data[7] = ftransforms[87];
                                data[8] = ftransforms[88];
                                data[9] = ftransforms[89];
                                data[10] = ftransforms[90];
                                data[11] = ftransforms[91];
                                data[12] = ftransforms[92];
                                data[13] = ftransforms[93];
                                data[14] = ftransforms[94];
                                data[15] = ftransforms[95];
                                renderJob.draw = global.draw.i;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[6])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface251Shape_pasted____pasted____lambert5_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[96];
                                data[1] = ftransforms[97];
                                data[2] = ftransforms[98];
                                data[3] = ftransforms[99];
                                data[4] = ftransforms[100];
                                data[5] = ftransforms[101];
                                data[6] = ftransforms[102];
                                data[7] = ftransforms[103];
                                data[8] = ftransforms[104];
                                data[9] = ftransforms[105];
                                data[10] = ftransforms[106];
                                data[11] = ftransforms[107];
                                data[12] = ftransforms[108];
                                data[13] = ftransforms[109];
                                data[14] = ftransforms[110];
                                data[15] = ftransforms[111];
                                renderJob.draw = global.draw.g;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[7])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface250Shape_pasted____pasted____lambert5_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[112];
                                data[1] = ftransforms[113];
                                data[2] = ftransforms[114];
                                data[3] = ftransforms[115];
                                data[4] = ftransforms[116];
                                data[5] = ftransforms[117];
                                data[6] = ftransforms[118];
                                data[7] = ftransforms[119];
                                data[8] = ftransforms[120];
                                data[9] = ftransforms[121];
                                data[10] = ftransforms[122];
                                data[11] = ftransforms[123];
                                data[12] = ftransforms[124];
                                data[13] = ftransforms[125];
                                data[14] = ftransforms[126];
                                data[15] = ftransforms[127];
                                renderJob.draw = global.draw.h;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[8])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface253Shape_pasted____pasted____lambert2_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[128];
                                data[1] = ftransforms[129];
                                data[2] = ftransforms[130];
                                data[3] = ftransforms[131];
                                data[4] = ftransforms[132];
                                data[5] = ftransforms[133];
                                data[6] = ftransforms[134];
                                data[7] = ftransforms[135];
                                data[8] = ftransforms[136];
                                data[9] = ftransforms[137];
                                data[10] = ftransforms[138];
                                data[11] = ftransforms[139];
                                data[12] = ftransforms[140];
                                data[13] = ftransforms[141];
                                data[14] = ftransforms[142];
                                data[15] = ftransforms[143];
                                renderJob.draw = global.draw.f;
                                renderJob.instance = instance;
                            }
                        }
                        renderQueues.begin = jobIt;
                        var shader = global.shaders.m_polySurface11Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface11Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface11Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(2);
                        gl.enableVertexAttribArray(3);
                        gl.enableVertexAttribArray(4);
                        var current = instance.shaders.m_polySurface11Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_polySurface8Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface8Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface8Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(5);
                        gl.enableVertexAttribArray(6);
                        gl.enableVertexAttribArray(7);
                        var current = instance.shaders.m_polySurface8Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_polySurface12Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface12Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface12Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.disableVertexAttribArray(7);
                        gl.disableVertexAttribArray(6);
                        gl.disableVertexAttribArray(5);
                        var current = instance.shaders.m_polySurface12Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var shader = global.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.enable(gl.CULL_FACE);
                        gl.disableVertexAttribArray(4);
                        var current = instance.shaders.m_pasted____polySurface238Shape_pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        var shader = global.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2;
                        var shader = global.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(4);
                        var current = instance.shaders.m_pasted____polySurface253Shape_pasted____pasted____lambert2.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5;
                        var shader = global.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(5);
                        var current = instance.shaders.m_pasted____polySurface250Shape_pasted____pasted____lambert5.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5;
                        var shader = global.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        var current = instance.shaders.m_pasted____polySurface252Shape_pasted____pasted____lambert5.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5;
                        var shader = global.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        var current = instance.shaders.m_pasted____polySurface239Shape_pasted____pasted____lambert5.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5;
                        var shader = global.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        var current = instance.shaders.m_pasted____polySurface251Shape_pasted____pasted____lambert5.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        gl.disableVertexAttribArray(5);
                        gl.disableVertexAttribArray(4);
                        gl.disableVertexAttribArray(3);
                        gl.disableVertexAttribArray(2);
                    };

                    var fstate = instance.fstate;
                    var ostate = instance.ostate;

                    return instance;
                },

                doneInstance: function(instance)
                {
                },

                sequence: 0,

                attributes:
                {
                    "time": {t: 1, b: 0, e: 1}
                },

                textureBindings:
                [
                    {n: "gold3", b: 0},
                    {n: "j", b: 1},
                    {n: "shizitou", b: 2}
                ],

                objects:
                {
                    "pasted__polySurface238Shape[0]": 4,
                    "pasted__polySurface239Shape[0]": 3,
                    "pasted__polySurface250Shape[0]": 7,
                    "pasted__polySurface251Shape[0]": 6,
                    "pasted__polySurface252Shape[0]": 5,
                    "pasted__polySurface253Shape[0]": 8,
                    "polySurface11Shape[0]": 1,
                    "polySurface12Shape[0]": 0,
                    "polySurface8Shape[0]": 2
                }

            }

        },

        numFiles: 4,
        check: function (){
            return 0;
        }
    };
    return s;
}

M3.modelName = "model_three";
M3.startTime = 0.041666666666666664;
M3.endTime = 8.3333333333333339;