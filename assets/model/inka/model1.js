var model_one = "";

window.M1 = function(engine)
{
    var s = {
        textures:
        {
            "gold":
            {
                initGlobal: function (global, url, index, loaded)
                {
                    var texture = global.texture = gl.createTexture();

                    var im = global.image = new Image();


                    im.crossOrigin = "Anonymous";
                    im.src = '//gw.alicdn.com/mt/TB1bnkTOVXXXXXlXVXXXXXXXXXX-1024-1024.png?t=' + Date.now();

                    if (im.complete || (im.width + im.height > 0)) {

                        gl.bindTexture(gl.TEXTURE_2D, texture);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, im);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                        gl.generateMipmap(gl.TEXTURE_2D);
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        loaded();
                    } else {
                        im.onload = function ()
                        {
                            gl.bindTexture(gl.TEXTURE_2D, texture);
                            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, im);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                            gl.generateMipmap(gl.TEXTURE_2D);
                            gl.bindTexture(gl.TEXTURE_2D, null);
                            loaded();
                        };
                        im.src = '//gw.alicdn.com/mt/TB1bnkTOVXXXXXlXVXXXXXXXXXX-1024-1024.png?t=' + Date.now();
                    }

                },

                doneGlobal: function (global)
                {
                    gl.deleteTexture(global.texture);
                },

                copy: function (global, ostate, b)
                {
                    ostate[b] = global.texture;
                }
            }

        },

        scenes:
        {
            "model_one":
            {
                shaders:
                {
                    // mesh, deformer 'polySurface13Shape', shader 'pasted__lambert4'
                    m_polySurface13Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'
                    m_polySurface8Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'
                    m_polySurface12Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'
                    m_polySurface11Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'pasted__pasted__polySurface248Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'
                    m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461:
                    {
                    },
                    // mesh, deformer 'pasted__pasted__polySurface32Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'
                    m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461:
                    {
                    },
                    // mesh, deformer 'pasted__pasted__polySurface248Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_1'
                    m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1:
                    {
                    },
                    // mesh, deformer 'pasted__pasted__polySurface32Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_1'
                    m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1:
                    {
                    },
                    // mesh, deformer 'pasted__pasted__polySurface66Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_2'
                    m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2:
                    {
                    }
                },

                initGlobal: function(global, data)
                {
                    // mesh, deformer 'polySurface13Shape', shader 'pasted__lambert4'
                    var vsm_polySurface13Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
attribute vec2 _4;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(3.12489e-4, 1.05971e-4, 1.2365e-4) + vec3(-10.2954, 15.2536, -3.71162);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _d[0].xyz * h.x + _d[1].xyz * h.y + _d[2].xyz * h.z + _d[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _e = _d[4].xyz * k.x + _d[5].xyz * k.y + _d[6].xyz * k.z;\n\
    _f = _4;\n\
}\n\
';
                    var psm_polySurface13Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'
                    var vsm_polySurface8Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[52];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec4 _3;\n\
attribute vec4 _4;\n\
attribute vec4 _5;\n\
attribute vec4 _6;\n\
attribute vec2 _7;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.82902e-4, 1.49994e-4, 5.75946e-5) + vec3(-5.99327, 0.0238238, -2.03775);\n\
    vec3 c = _2;\n\
    ivec4 d = ivec4(_3);\n\
    ivec4 e = ivec4(_4);\n\
    vec4 f = _5;\n\
    vec4 g = _6;\n\
    int h = d.x;\n\
    int i = d.y;\n\
    int j = d.z;\n\
    int k = d.w;\n\
    int l = e.x;\n\
    int m = e.y;\n\
    int n = e.z;\n\
    int o = e.w;\n\
    vec4 p = f.x * _b[4 + h] + f.y * _b[4 + i] + f.z * _b[4 + j] + f.w * _b[4 + k] + g.x * _b[4 + l] + g.y * _b[4 + m] + g.z * _b[4 + n] + g.w * _b[4 + o];\n\
    vec4 q = f.x * _b[20 + h] + f.y * _b[20 + i] + f.z * _b[20 + j] + f.w * _b[20 + k] + g.x * _b[20 + l] + g.y * _b[20 + m] + g.z * _b[20 + n] + g.w * _b[20 + o];\n\
    vec4 r = f.x * _b[36 + h] + f.y * _b[36 + i] + f.z * _b[36 + j] + f.w * _b[36 + k] + g.x * _b[36 + l] + g.y * _b[36 + m] + g.z * _b[36 + n] + g.w * _b[36 + o];\n\
    vec3 s = p.xyz * b.x + q.xyz * b.y + r.xyz * b.z + vec3(p.w, q.w, r.w);\n\
    vec3 t = p.xyz * c.x + q.xyz * c.y + r.xyz * c.z;\n\
    vec3 u = p.xyz * a.x + q.xyz * a.y + r.xyz * a.z;\n\
    vec3 v = t.yzx * u.zxy - t.zxy * u.yzx;\n\
    vec3 w = _d[0].xyz * s.x + _d[1].xyz * s.y + _d[2].xyz * s.z + _d[3].xyz;\n\
    gl_Position = _b[0] * w.x + _b[1] * w.y + _b[2] * w.z + _b[3];\n\
    _e = _d[4].xyz * v.x + _d[5].xyz * v.y + _d[6].xyz * v.z;\n\
    _f = _7;\n\
}\n\
';
                    var psm_polySurface8Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'
                    var vsm_polySurface12Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
attribute vec2 _4;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(2.24981e-4, 1.19379e-4, 5.44838e-5) + vec3(-7.37254, 9.60781, -1.96746);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _d[0].xyz * h.x + _d[1].xyz * h.y + _d[2].xyz * h.z + _d[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _e = _d[4].xyz * k.x + _d[5].xyz * k.y + _d[6].xyz * k.z;\n\
    _f = _4;\n\
}\n\
';
                    var psm_polySurface12Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'
                    var vsm_polySurface11Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
attribute vec2 _4;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(2.7848e-5, 2.78256e-5, 5.16374e-6) + vec3(-0.912736, 4.08025, 1.43886);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _d[0].xyz * h.x + _d[1].xyz * h.y + _d[2].xyz * h.z + _d[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _e = _d[4].xyz * k.x + _d[5].xyz * k.y + _d[6].xyz * k.z;\n\
    _f = _4;\n\
}\n\
';
                    var psm_polySurface11Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__pasted__polySurface248Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'
                    var vsm_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _c[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.12308e-4, 1.10228e-4, 1.86877e-5) + vec3(4.8641, 6.35264, -0.756088);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _c[0].xyz * h.x + _c[1].xyz * h.y + _c[2].xyz * h.z + _c[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _d = _c[4].xyz * k.x + _c[5].xyz * k.y + _c[6].xyz * k.z;\n\
    _e = l;\n\
}\n\
';
                    var psm_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461 =
'precision highp float;\n\
uniform float f_f;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = (_d);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f;\n\
    vec3 d = _e;\n\
    vec3 e = d * d;\n\
    vec3 f = c * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 g = c * vec3(0.408248, -0.408248, -0.816497);\n\
    vec3 h = (vec3(0.408248, -0.408248, -0.816497) - (g.x + g.y + g.z) * 2.0 * c) * -(d * inversesqrt(e.x + e.y + e.z));\n\
    vec3 i = max(f.x + f.y + f.z, 0.0) * vec3(1.0, 0.881884, 0.291303) + vec3(pow(max(h.x + h.y + h.z, 0.0), 50.0) * 0.2);\n\
    gl_FragColor = vec4(i, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__pasted__polySurface32Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'
                    var vsm_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _c[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.00049e-4, 1.21229e-4, 1.86877e-5) + vec3(-11.4444, 6.61806, -0.756088);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _c[0].xyz * h.x + _c[1].xyz * h.y + _c[2].xyz * h.z + _c[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _d = _c[4].xyz * k.x + _c[5].xyz * k.y + _c[6].xyz * k.z;\n\
    _e = l;\n\
}\n\
';
                    var psm_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461 =
'precision highp float;\n\
uniform float f_f;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = (_d);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f;\n\
    vec3 d = _e;\n\
    vec3 e = d * d;\n\
    vec3 f = c * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 g = c * vec3(0.408248, -0.408248, -0.816497);\n\
    vec3 h = (vec3(0.408248, -0.408248, -0.816497) - (g.x + g.y + g.z) * 2.0 * c) * -(d * inversesqrt(e.x + e.y + e.z));\n\
    vec3 i = max(f.x + f.y + f.z, 0.0) * vec3(1.0, 0.881884, 0.291303) + vec3(pow(max(h.x + h.y + h.z, 0.0), 50.0) * 0.2);\n\
    gl_FragColor = vec4(i, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__pasted__polySurface248Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_1'
                    var vsm_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _c[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.12308e-4, 1.10228e-4, 1.86877e-5) + vec3(4.8641, 6.35264, -0.756088);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _c[0].xyz * h.x + _c[1].xyz * h.y + _c[2].xyz * h.z + _c[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _d = _c[4].xyz * k.x + _c[5].xyz * k.y + _c[6].xyz * k.z;\n\
    _e = l;\n\
}\n\
';
                    var psm_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1 =
'precision highp float;\n\
uniform float f_f;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = (_d);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f;\n\
    vec3 d = _e;\n\
    vec3 e = d * d;\n\
    vec3 f = c * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 g = c * vec3(0.408248, -0.408248, -0.816497);\n\
    vec3 h = (vec3(0.408248, -0.408248, -0.816497) - (g.x + g.y + g.z) * 2.0 * c) * -(d * inversesqrt(e.x + e.y + e.z));\n\
    vec3 i = max(f.x + f.y + f.z, 0.0) * vec3(0.979695, 0.198922, 0.381103) + vec3(pow(max(h.x + h.y + h.z, 0.0), 50.0) * 0.2);\n\
    gl_FragColor = vec4(i, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__pasted__polySurface32Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_1'
                    var vsm_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _c[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.00049e-4, 1.21229e-4, 1.86877e-5) + vec3(-11.4444, 6.61806, -0.756088);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _c[0].xyz * h.x + _c[1].xyz * h.y + _c[2].xyz * h.z + _c[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _d = _c[4].xyz * k.x + _c[5].xyz * k.y + _c[6].xyz * k.z;\n\
    _e = l;\n\
}\n\
';
                    var psm_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1 =
'precision highp float;\n\
uniform float f_f;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = (_d);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f;\n\
    vec3 d = _e;\n\
    vec3 e = d * d;\n\
    vec3 f = c * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 g = c * vec3(0.408248, -0.408248, -0.816497);\n\
    vec3 h = (vec3(0.408248, -0.408248, -0.816497) - (g.x + g.y + g.z) * 2.0 * c) * -(d * inversesqrt(e.x + e.y + e.z));\n\
    vec3 i = max(f.x + f.y + f.z, 0.0) * vec3(0.979695, 0.198922, 0.381103) + vec3(pow(max(h.x + h.y + h.z, 0.0), 50.0) * 0.2);\n\
    gl_FragColor = vec4(i, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__pasted__polySurface66Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_2'
                    var vsm_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _c[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(3.27618e-4, 1.7249e-4, 2.27607e-4) + vec3(-7.5517, 0.74406, 27.8353);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _c[0].xyz * h.x + _c[1].xyz * h.y + _c[2].xyz * h.z + _c[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _d = _c[4].xyz * k.x + _c[5].xyz * k.y + _c[6].xyz * k.z;\n\
    _e = l;\n\
}\n\
';
                    var psm_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2 =
'precision highp float;\n\
uniform float f_f;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = (_d);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f;\n\
    vec3 d = _e;\n\
    vec3 e = d * d;\n\
    vec3 f = c * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 g = c * vec3(0.408248, -0.408248, -0.816497);\n\
    vec3 h = (vec3(0.408248, -0.408248, -0.816497) - (g.x + g.y + g.z) * 2.0 * c) * -(d * inversesqrt(e.x + e.y + e.z));\n\
    vec3 i = max(f.x + f.y + f.z, 0.0) * vec3(1.0, 0.802467, 0.209866) + vec3(pow(max(h.x + h.y + h.z, 0.0), 50.0) * 0.2);\n\
    gl_FragColor = vec4(i, 1.0);\n\
}\n\
';

                    var d = new engine.Decompressor(new Uint8Array(data, 0));
                    global.buffers = 
                    [
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                    ];
                    var b1 = d.decompress8(52668);
                    var b2 = d.decompress16(22572);
                    var vb = new Float32Array(75240);
                    for (var i = 0, j = 0; i < 7524; ++i, j += 10)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 7524];
                        vb[j + 2] = b2[i + 15048];
                        vb[j + 3] = (b1[i + 0] << 24) * 4.65661e-10;
                        vb[j + 4] = (b1[i + 7524] << 24) * 4.65661e-10;
                        vb[j + 5] = (b1[i + 15048] << 24) * 4.65661e-10;
                        vb[j + 6] = (b1[i + 22572] << 24) * 4.65661e-10;
                        vb[j + 7] = (b1[i + 30096] << 24) * 4.65661e-10;
                        vb[j + 8] = (b1[i + 37620] << 24) * 4.65661e-10;
                        vb[j + 9] = b1[i + 45144];
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(21609);
                    var b2 = d.decompress16(15435);
                    var vb = new Float32Array(37044);
                    for (var i = 0, j = 0; i < 3087; ++i, j += 12)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 3087];
                        vb[j + 2] = b2[i + 6174];
                        vb[j + 3] = b2[i + 9261] * 1.5259e-5;
                        vb[j + 4] = b2[i + 12348] * 1.5259e-5;
                        vb[j + 5] = (b1[i + 0] << 24) * 4.65661e-10;
                        vb[j + 6] = (b1[i + 3087] << 24) * 4.65661e-10;
                        vb[j + 7] = (b1[i + 6174] << 24) * 4.65661e-10;
                        vb[j + 8] = (b1[i + 9261] << 24) * 4.65661e-10;
                        vb[j + 9] = (b1[i + 12348] << 24) * 4.65661e-10;
                        vb[j + 10] = (b1[i + 15435] << 24) * 4.65661e-10;
                        vb[j + 11] = b1[i + 18522];
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(40964);
                    var b2 = d.decompress16(9310);
                    var vb = new Float32Array(50274);
                    for (var i = 0, j = 0; i < 1862; ++i, j += 27)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 1862];
                        vb[j + 2] = b2[i + 3724];
                        vb[j + 3] = b2[i + 5586] * 1.5259e-5;
                        vb[j + 4] = b2[i + 7448] * 1.5259e-5;
                        vb[j + 5] = b1[i + 0];
                        vb[j + 6] = b1[i + 1862];
                        vb[j + 7] = b1[i + 3724];
                        vb[j + 8] = b1[i + 5586];
                        vb[j + 9] = b1[i + 7448];
                        vb[j + 10] = b1[i + 9310];
                        vb[j + 11] = b1[i + 11172];
                        vb[j + 12] = b1[i + 13034];
                        vb[j + 13] = b1[i + 14896] * 0.00392156;
                        vb[j + 14] = b1[i + 16758] * 0.00392156;
                        vb[j + 15] = b1[i + 18620] * 0.00392156;
                        vb[j + 16] = b1[i + 20482] * 0.00392156;
                        vb[j + 17] = b1[i + 22344] * 0.00392156;
                        vb[j + 18] = b1[i + 24206] * 0.00392156;
                        vb[j + 19] = b1[i + 26068] * 0.00392156;
                        vb[j + 20] = b1[i + 27930] * 0.00392156;
                        vb[j + 21] = (b1[i + 29792] << 24) * 4.65661e-10;
                        vb[j + 22] = (b1[i + 31654] << 24) * 4.65661e-10;
                        vb[j + 23] = (b1[i + 33516] << 24) * 4.65661e-10;
                        vb[j + 24] = (b1[i + 35378] << 24) * 4.65661e-10;
                        vb[j + 25] = (b1[i + 37240] << 24) * 4.65661e-10;
                        vb[j + 26] = (b1[i + 39102] << 24) * 4.65661e-10;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer2 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);

                    var b = d.decompress16(30882);
                    var ib = new Uint16Array(30882);
                    for (var i = 0, j = 0; i < 10294; ++i, j += 3)
                    {
                        ib[j] = b[i];
                        ib[j + 1] = b[i + 10294];
                        ib[j + 2] = b[i + 20588];
                    }
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0 = gl.createBuffer());
                    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, ib, gl.STATIC_DRAW);

                    var shaders = global.shaders;
                    {
                        var shader = shaders.m_polySurface13Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface13Shape_pasted____lambert4, "mesh, deformer 'polySurface13Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface13Shape_pasted____lambert4, "mesh, deformer 'polySurface13Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_polySurface8Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface8Shape_pasted____lambert4, "mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface8Shape_pasted____lambert4, "mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.bindAttribLocation(program, 6, '_6');
                        gl.bindAttribLocation(program, 7, '_7');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_polySurface12Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface12Shape_pasted____lambert4, "mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface12Shape_pasted____lambert4, "mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_polySurface11Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface11Shape_pasted____lambert4, "mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface11Shape_pasted____lambert4, "mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var vertexShader = engine.createVertexShader(vsm_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461, "mesh, deformer 'pasted__pasted__polySurface248Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'");
                        var pixelShader = engine.createPixelShader(psm_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461, "mesh, deformer 'pasted__pasted__polySurface248Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        shader._b = gl.getUniformLocation(program, '_b');
                        shader._c = gl.getUniformLocation(program, '_c');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var vertexShader = engine.createVertexShader(vsm_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461, "mesh, deformer 'pasted__pasted__polySurface32Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'");
                        var pixelShader = engine.createPixelShader(psm_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461, "mesh, deformer 'pasted__pasted__polySurface32Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        shader._b = gl.getUniformLocation(program, '_b');
                        shader._c = gl.getUniformLocation(program, '_c');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1;
                        var vertexShader = engine.createVertexShader(vsm_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1, "mesh, deformer 'pasted__pasted__polySurface248Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_1'");
                        var pixelShader = engine.createPixelShader(psm_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1, "mesh, deformer 'pasted__pasted__polySurface248Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_1'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        shader._b = gl.getUniformLocation(program, '_b');
                        shader._c = gl.getUniformLocation(program, '_c');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1;
                        var vertexShader = engine.createVertexShader(vsm_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1, "mesh, deformer 'pasted__pasted__polySurface32Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_1'");
                        var pixelShader = engine.createPixelShader(psm_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1, "mesh, deformer 'pasted__pasted__polySurface32Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_1'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        shader._b = gl.getUniformLocation(program, '_b');
                        shader._c = gl.getUniformLocation(program, '_c');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2;
                        var vertexShader = engine.createVertexShader(vsm_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2, "mesh, deformer 'pasted__pasted__polySurface66Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_2'");
                        var pixelShader = engine.createPixelShader(psm_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2, "mesh, deformer 'pasted__pasted__polySurface66Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_2'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        shader._b = gl.getUniformLocation(program, '_b');
                        shader._c = gl.getUniformLocation(program, '_c');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                },

                doneGlobal: function(global)
                {
                    gl.deleteBuffer(global.shaderInputBuffer0);
                    gl.deleteBuffer(global.shaderInputBuffer1);
                    gl.deleteBuffer(global.shaderInputBuffer2);
                    gl.deleteBuffer(global.indexBuffer0);
                    gl.deleteProgram(global.shaders.m_polySurface13Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_polySurface8Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_polySurface12Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_polySurface11Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.program);
                    gl.deleteProgram(global.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.program);
                    gl.deleteProgram(global.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1.program);
                    gl.deleteProgram(global.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1.program);
                    gl.deleteProgram(global.shaders.m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2.program);
                },

                render: {
                    m_polySurface13Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface13Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface13Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_polySurface8Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface8Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface8Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_polySurface12Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface12Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface12Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_polySurface11Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface11Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface11Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var transfer = instance.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _c = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _c[0] = G;
                        _c[1] = H;
                        _c[2] = I;
                        _c[4] = J;
                        _c[5] = K;
                        _c[6] = L;
                        _c[8] = M;
                        _c[9] = N;
                        _c[10] = O;
                        _c[12] = q * m + u * n + y * o + C * p;
                        _c[13] = r * m + v * n + z * o + D * p;
                        _c[14] = s * m + w * n + A * o + E * p;
                        _c[16] = P;
                        _c[17] = Q;
                        _c[18] = R;
                        _c[20] = N * I - O * H;
                        _c[21] = O * G - M * I;
                        _c[22] = M * H - N * G;
                        _c[24] = H * L - I * K;
                        _c[25] = I * J - G * L;
                        _c[26] = G * K - H * J;
                        gl.uniform4fv(shader._c, _c);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var transfer = instance.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _c = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _c[0] = G;
                        _c[1] = H;
                        _c[2] = I;
                        _c[4] = J;
                        _c[5] = K;
                        _c[6] = L;
                        _c[8] = M;
                        _c[9] = N;
                        _c[10] = O;
                        _c[12] = q * m + u * n + y * o + C * p;
                        _c[13] = r * m + v * n + z * o + D * p;
                        _c[14] = s * m + w * n + A * o + E * p;
                        _c[16] = P;
                        _c[17] = Q;
                        _c[18] = R;
                        _c[20] = N * I - O * H;
                        _c[21] = O * G - M * I;
                        _c[22] = M * H - N * G;
                        _c[24] = H * L - I * K;
                        _c[25] = I * J - G * L;
                        _c[26] = G * K - H * J;
                        gl.uniform4fv(shader._c, _c);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1;
                        var transfer = instance.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _c = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _c[0] = G;
                        _c[1] = H;
                        _c[2] = I;
                        _c[4] = J;
                        _c[5] = K;
                        _c[6] = L;
                        _c[8] = M;
                        _c[9] = N;
                        _c[10] = O;
                        _c[12] = q * m + u * n + y * o + C * p;
                        _c[13] = r * m + v * n + z * o + D * p;
                        _c[14] = s * m + w * n + A * o + E * p;
                        _c[16] = P;
                        _c[17] = Q;
                        _c[18] = R;
                        _c[20] = N * I - O * H;
                        _c[21] = O * G - M * I;
                        _c[22] = M * H - N * G;
                        _c[24] = H * L - I * K;
                        _c[25] = I * J - G * L;
                        _c[26] = G * K - H * J;
                        gl.uniform4fv(shader._c, _c);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1;
                        var transfer = instance.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _c = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _c[0] = G;
                        _c[1] = H;
                        _c[2] = I;
                        _c[4] = J;
                        _c[5] = K;
                        _c[6] = L;
                        _c[8] = M;
                        _c[9] = N;
                        _c[10] = O;
                        _c[12] = q * m + u * n + y * o + C * p;
                        _c[13] = r * m + v * n + z * o + D * p;
                        _c[14] = s * m + w * n + A * o + E * p;
                        _c[16] = P;
                        _c[17] = Q;
                        _c[18] = R;
                        _c[20] = N * I - O * H;
                        _c[21] = O * G - M * I;
                        _c[22] = M * H - N * G;
                        _c[24] = H * L - I * K;
                        _c[25] = I * J - G * L;
                        _c[26] = G * K - H * J;
                        gl.uniform4fv(shader._c, _c);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2;
                        var transfer = instance.shaders.m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _c = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _c[0] = G;
                        _c[1] = H;
                        _c[2] = I;
                        _c[4] = J;
                        _c[5] = K;
                        _c[6] = L;
                        _c[8] = M;
                        _c[9] = N;
                        _c[10] = O;
                        _c[12] = q * m + u * n + y * o + C * p;
                        _c[13] = r * m + v * n + z * o + D * p;
                        _c[14] = s * m + w * n + A * o + E * p;
                        _c[16] = P;
                        _c[17] = Q;
                        _c[18] = R;
                        _c[20] = N * I - O * H;
                        _c[21] = O * G - M * I;
                        _c[22] = M * H - N * G;
                        _c[24] = H * L - I * K;
                        _c[25] = I * J - G * L;
                        _c[26] = G * K - H * J;
                        gl.uniform4fv(shader._c, _c);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    }
                },
                draw: {
                    a: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 40, 12);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 40, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 40, 24);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 40, 36);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 240, gl.UNSIGNED_SHORT, 0);
                    },
                    b: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 40, 135772);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 40, 135760);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 40, 135784);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 40, 135796);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 4752, gl.UNSIGNED_SHORT, 9984);
                    },
                    c: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 40, 268252);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 40, 268240);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 40, 268264);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 40, 268276);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 240, gl.UNSIGNED_SHORT, 19488);
                    },
                    d: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 40, 3292);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 40, 3280);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 40, 3304);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 40, 3316);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 4752, gl.UNSIGNED_SHORT, 480);
                    },
                    e: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer2);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 108, 96);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 108, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 108, 84);
                        gl.vertexAttribPointer(3, 4, gl.FLOAT, false, 108, 20);
                        gl.vertexAttribPointer(4, 4, gl.FLOAT, false, 108, 36);
                        gl.vertexAttribPointer(5, 4, gl.FLOAT, false, 108, 68);
                        gl.vertexAttribPointer(6, 4, gl.FLOAT, false, 108, 52);
                        gl.vertexAttribPointer(7, 2, gl.FLOAT, false, 108, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 7398, gl.UNSIGNED_SHORT, 19968);
                    },
                    f: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 48, 20);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 48, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 48, 32);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 48, 44);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 48, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 6984, gl.UNSIGNED_SHORT, 34764);
                    },
                    g: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 40, 271532);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 40, 271520);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 40, 271544);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 40, 271556);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 4392, gl.UNSIGNED_SHORT, 48732);
                    },
                    h: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 48, 112784);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 48, 112752);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 48, 112772);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 48, 112796);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 48, 112764);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 720, gl.UNSIGNED_SHORT, 57516);
                    },
                    i: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 48, 122576);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 48, 122544);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 48, 122564);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 48, 122588);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 48, 122556);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 1404, gl.UNSIGNED_SHORT, 58956);
                    }
                },

                createInstance: function(global, renderer)
                {
                    var instance = 
                    {
                        global: global,
                        renderer: renderer,
                        ids: new Uint32Array(7),
                        fstate: new Float32Array(1), ostate: [], 
                        funiforms: new Float32Array(264), ouniforms: [], 
                        shaders:
                        {
                            m_polySurface13Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(28), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_polySurface8Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(208), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_polySurface12Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(28), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_polySurface11Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(28), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461:
                            {
                                uniform: {_b: new Float32Array(28)},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461:
                            {
                                uniform: {_b: new Float32Array(28)},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1:
                            {
                                uniform: {_b: new Float32Array(28)},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1:
                            {
                                uniform: {_b: new Float32Array(28)},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2:
                            {
                                uniform: {_b: new Float32Array(28)},
                                transfer: {_a: new Float32Array(16)},
                            }
                        },
                        itransforms: new Int32Array(7), ftransforms: new Float32Array(112), 
                        fboundingBoxes: new Float32Array(42), 
                        sceneSequence: 0,
                        deformerSequence: 0,
                        renderSequence: 0,
                        viewProjectionMatrix: new Float32Array(16),
                        fu0_28: new Float32Array(28),
                    };

                    var particlePools = instance.particlePools = {};

                    instance.update = function()
                    {
                        ++instance.sceneSequence;

                        var fstate = instance.fstate;
                        var ostate = instance.ostate;
                        var buffers = global.buffers;
                        var funiforms = instance.funiforms;
                        var ouniforms = instance.ouniforms;
                        var itransforms = instance.itransforms;
                        var ftransforms = instance.ftransforms;
                        var fboundingBoxes = instance.fboundingBoxes;

                        var a = fstate[0];
                        var b;
                        if (a < 0.0)
                        {
                            b = 0.0;
                        }
                        else
                        {
                            if (a < 4.125)
                            {
                                b = (engine.eCT(buffers[36], a * 24.0 + 1.0) * 8.38306e-6 + -0.202528) * 0.5;
                            }
                            else
                            {
                                b = 0.0337288;
                            }
                        }
                        var c = fstate[0];
                        var d;
                        if (c < 0.0)
                        {
                            d = 0.0;
                        }
                        else
                        {
                            if (c < 4.125)
                            {
                                d = (engine.eCT(buffers[35], c * 24.0 + 1.0) * 6.26896e-6 + -0.1244) * 0.5;
                            }
                            else
                            {
                                d = -0.00346522;
                            }
                        }
                        var e = fstate[0];
                        var f;
                        if (e < 0.0)
                        {
                            f = 0.0;
                        }
                        else
                        {
                            if (e < 4.125)
                            {
                                f = engine.eCT(buffers[34], e * 24.0 + 1.0) * 6.78166e-6 * 0.5;
                            }
                            else
                            {
                                f = 0.00494122;
                            }
                        }
                        var g = fstate[0];
                        var h;
                        if (g < 0.0)
                        {
                            h = -0.258007;
                        }
                        else
                        {
                            if (g < 4.125)
                            {
                                h = engine.eCT(buffers[39], g * 24.0 + 1.0) * 2.46776e-4 + -0.676674;
                            }
                            else
                            {
                                h = 15.2677;
                            }
                        }
                        var i = fstate[0];
                        var j;
                        if (i < 0.0)
                        {
                            j = 4.59072;
                        }
                        else
                        {
                            if (i < 4.125)
                            {
                                j = engine.eCT(buffers[38], i * 24.0 + 1.0) * 8.65511e-5 + 3.36369;
                            }
                            else
                            {
                                j = 4.24194;
                            }
                        }
                        var k = fstate[0];
                        var l;
                        if (k < 0.0)
                        {
                            l = 0.0;
                        }
                        else
                        {
                            if (k < 4.125)
                            {
                                l = engine.eCT(buffers[37], k * 24.0 + 1.0) * 1.35e-4 + -6.38233;
                            }
                            else
                            {
                                l = 2.44535;
                            }
                        }
                        var m = Math.cos(f);
                        var n = Math.sin(f);
                        var o = Math.cos(d);
                        var p = Math.sin(d);
                        var q = Math.cos(b);
                        var r = Math.sin(b);
                        var s = q * o * n - r * p * m;
                        var t = q * p * m + r * o * n;
                        var u = q * -p * n + r * o * m;
                        var v = q * o * m - r * -p * n;
                        var w = s * 0.512508 + v * 0.48717 + u * 0.512508 - t * 0.48717;
                        var x = t * 0.512508 + v * 0.512508 + s * 0.48717 - u * 0.48717;
                        var y = u * 0.512508 + v * 0.48717 + t * 0.48717 - s * 0.512508;
                        var z = v * 0.512508 - s * 0.48717 - t * 0.512508 - u * 0.48717;
                        var A = w * w;
                        var B = x * x;
                        var C = y * y;
                        var D = z * z;
                        var E = w * x;
                        var F = x * y;
                        var G = w * y;
                        var H = z * w;
                        var I = z * x;
                        var J = z * y;
                        var K = D + A - B - C;
                        var L = (E + J) * 2.0;
                        var M = (G - I) * 2.0;
                        var N = (E - J) * 2.0;
                        var O = D - A + B - C;
                        var P = (F + H) * 2.0;
                        var Q = (G + I) * 2.0;
                        var R = (F - H) * 2.0;
                        var S = D - A - B + C;
                        var T = fstate[0];
                        var U;
                        if (T < 0.0)
                        {
                            U = -1.09813e-17;
                        }
                        else
                        {
                            if (T < 4.16666)
                            {
                                U = (engine.eCT(buffers[31], T * 24.0 + 1.0) * 3.13231e-5 + -0.774645) * 0.5;
                            }
                            else
                            {
                                U = 0.140653;
                            }
                        }
                        var V = fstate[0];
                        var W;
                        if (V < 0.0)
                        {
                            W = 0.12385;
                        }
                        else
                        {
                            if (V < 4.16666)
                            {
                                W = (engine.eCT(buffers[30], V * 24.0 + 1.0) * 9.2319e-6 + 0.0106559) * 0.5;
                            }
                            else
                            {
                                W = 0.049719;
                            }
                        }
                        var X = fstate[0];
                        var Y;
                        if (X < 0.0)
                        {
                            Y = -1.77663e-9;
                        }
                        else
                        {
                            if (X < 4.16666)
                            {
                                Y = (engine.eCT(buffers[29], X * 24.0 + 1.0) * 1.04514e-5 + -0.173703) * 0.5;
                            }
                            else
                            {
                                Y = 0.0220803;
                            }
                        }
                        var Z = Math.cos(Y);
                        var ab = Math.sin(Y);
                        var bb = Math.cos(W);
                        var cb = Math.sin(W);
                        var db = Math.cos(U);
                        var eb = Math.sin(U);
                        var fb = db * bb * ab - eb * cb * Z;
                        var gb = db * cb * Z + eb * bb * ab;
                        var hb = db * -cb * ab + eb * bb * Z;
                        var ib = db * bb * Z - eb * -cb * ab;
                        var jb = fb * 3.12052e-18 + ib * 0.0509619 + hb * 0.998701 - gb * 6.11528e-17;
                        var kb = gb * 3.12052e-18 + ib * 0.998701 + fb * 6.11528e-17 - hb * 0.0509619;
                        var lb = hb * 3.12052e-18 + ib * 6.11528e-17 + gb * 0.0509619 - fb * 0.998701;
                        var mb = ib * 3.12052e-18 - fb * 0.0509619 - gb * 0.998701 - hb * 6.11528e-17;
                        var nb = jb * jb;
                        var ob = kb * kb;
                        var pb = lb * lb;
                        var qb = mb * mb;
                        var rb = jb * kb;
                        var sb = kb * lb;
                        var tb = jb * lb;
                        var ub = mb * jb;
                        var vb = mb * kb;
                        var wb = mb * lb;
                        var xb = qb + nb - ob - pb;
                        var yb = (rb + wb) * 2.0;
                        var zb = (tb - vb) * 2.0;
                        var Ab = (rb - wb) * 2.0;
                        var Bb = qb - nb + ob - pb;
                        var Cb = (sb + ub) * 2.0;
                        var Db = (tb + vb) * 2.0;
                        var Eb = (sb - ub) * 2.0;
                        var Fb = qb - nb - ob + pb;
                        var Gb = K * xb + N * yb + Q * zb;
                        var Hb = L * xb + O * yb + R * zb;
                        var Ib = M * xb + P * yb + S * zb;
                        var Jb = K * Ab + N * Bb + Q * Cb;
                        var Kb = L * Ab + O * Bb + R * Cb;
                        var Lb = M * Ab + P * Bb + S * Cb;
                        var Mb = K * Db + N * Eb + Q * Fb;
                        var Nb = L * Db + O * Eb + R * Fb;
                        var Ob = M * Db + P * Eb + S * Fb;
                        var Pb = K * -0.387872 + N * 0.17076 + Q * 1.01941 + l;
                        var Qb = L * -0.387872 + O * 0.17076 + R * 1.01941 + j;
                        var Rb = M * -0.387872 + P * 0.17076 + S * 1.01941 + h;
                        var Sb = fstate[0];
                        var Tb;
                        if (Sb < 0.0)
                        {
                            Tb = 0.0;
                        }
                        else
                        {
                            if (Sb < 4.125)
                            {
                                Tb = (engine.eCT(buffers[42], Sb * 24.0 + 1.0) * 8.12026e-6 + -0.280921) * 0.5;
                            }
                            else
                            {
                                Tb = -0.0332298;
                            }
                        }
                        var Ub = fstate[0];
                        var Vb;
                        if (Ub < 0.0)
                        {
                            Vb = 0.0;
                        }
                        else
                        {
                            if (Ub < 4.125)
                            {
                                Vb = (engine.eCT(buffers[41], Ub * 24.0 + 1.0) * 3.63988e-6 + -0.181528) * 0.5;
                            }
                            else
                            {
                                Vb = 0.0072631;
                            }
                        }
                        var Wb = fstate[0];
                        var Xb;
                        if (Wb < 0.0)
                        {
                            Xb = 0.0;
                        }
                        else
                        {
                            if (Wb < 4.125)
                            {
                                Xb = (engine.eCT(buffers[40], Wb * 24.0 + 1.0) * 2.46662e-6 + -0.137469) * 0.5;
                            }
                            else
                            {
                                Xb = 0.0120903;
                            }
                        }
                        var Yb = Math.cos(Xb);
                        var Zb = Math.sin(Xb);
                        var ac = Math.cos(Vb);
                        var bc = Math.sin(Vb);
                        var cc = Math.cos(Tb);
                        var dc = Math.sin(Tb);
                        var ec = cc * ac * Zb - dc * bc * Yb;
                        var fc = cc * bc * Yb + dc * ac * Zb;
                        var gc = cc * -bc * Zb + dc * ac * Yb;
                        var hc = cc * ac * Yb - dc * -bc * Zb;
                        var ic = ec * 6.1194e-17 + hc * 0.999373 + gc * 0.0353989 - fc * 2.16756e-18;
                        var jc = fc * 6.1194e-17 + hc * 0.0353989 + ec * 2.16756e-18 - gc * 0.999373;
                        var kc = gc * 6.1194e-17 + hc * 2.16756e-18 + fc * 0.999373 - ec * 0.0353989;
                        var lc = hc * 6.1194e-17 - ec * 0.999373 - fc * 0.0353989 - gc * 2.16756e-18;
                        var mc = ic * ic;
                        var nc = jc * jc;
                        var oc = kc * kc;
                        var pc = lc * lc;
                        var qc = ic * jc;
                        var rc = jc * kc;
                        var sc = ic * kc;
                        var tc = lc * ic;
                        var uc = lc * jc;
                        var vc = lc * kc;
                        var wc = pc + mc - nc - oc;
                        var xc = (qc + vc) * 2.0;
                        var yc = (sc - uc) * 2.0;
                        var zc = (qc - vc) * 2.0;
                        var Ac = pc - mc + nc - oc;
                        var Bc = (rc + tc) * 2.0;
                        var Cc = (sc + uc) * 2.0;
                        var Dc = (rc - tc) * 2.0;
                        var Ec = pc - mc - nc + oc;
                        var Fc = K * wc + N * xc + Q * yc;
                        var Gc = L * wc + O * xc + R * yc;
                        var Hc = M * wc + P * xc + S * yc;
                        var Ic = K * zc + N * Ac + Q * Bc;
                        var Jc = L * zc + O * Ac + R * Bc;
                        var Kc = M * zc + P * Ac + S * Bc;
                        var Lc = K * Cc + N * Dc + Q * Ec;
                        var Mc = L * Cc + O * Dc + R * Ec;
                        var Nc = M * Cc + P * Dc + S * Ec;
                        var Oc = K * 2.50573 + N * 1.19349e-15 + Q * -2.78192e-16 + l;
                        var Pc = L * 2.50573 + O * 1.19349e-15 + R * -2.78192e-16 + j;
                        var Qc = M * 2.50573 + P * 1.19349e-15 + S * -2.78192e-16 + h;
                        var Rc = fstate[0];
                        var Sc;
                        if (Rc < 0.0)
                        {
                            Sc = -4.40769e-20;
                        }
                        else
                        {
                            if (Rc < 4.125)
                            {
                                Sc = (engine.eCT(buffers[46], Rc * 24.0 + 1.0) * 8.80028e-6 + -0.351304) * 0.5;
                            }
                            else
                            {
                                Sc = 0.00459772;
                            }
                        }
                        var Tc = fstate[0];
                        var Uc;
                        if (Tc < 0.0)
                        {
                            Uc = 2.45571e-11;
                        }
                        else
                        {
                            if (Tc < 4.125)
                            {
                                Uc = (engine.eCT(buffers[45], Tc * 24.0 + 1.0) * 1.70383e-5 + -0.960668) * 0.5;
                            }
                            else
                            {
                                Uc = -0.0341668;
                            }
                        }
                        var Vc = fstate[0];
                        var Wc;
                        if (Vc < 0.0)
                        {
                            Wc = -1.79472e-9;
                        }
                        else
                        {
                            if (Vc < 4.125)
                            {
                                Wc = (engine.eCT(buffers[44], Vc * 24.0 + 1.0) * 1.72601e-5 + -0.106494) * 0.5;
                            }
                            else
                            {
                                Wc = -0.00434315;
                            }
                        }
                        var Xc = Math.cos(Wc);
                        var Yc = Math.sin(Wc);
                        var Zc = Math.cos(Uc);
                        var ad = Math.sin(Uc);
                        var bd = Math.cos(Sc);
                        var cd = Math.sin(Sc);
                        var dd = bd * Zc * Yc - cd * ad * Xc;
                        var ed = bd * ad * Xc + cd * Zc * Yc;
                        var fd = bd * -ad * Yc + cd * Zc * Xc;
                        var gd = bd * Zc * Xc - cd * -ad * Yc;
                        var hd = dd * 0.427131 + gd * 0.415701 + fd * 0.572007 - ed * -0.563523;
                        var id = ed * 0.427131 + gd * 0.572007 + dd * -0.563523 - fd * 0.415701;
                        var jd = fd * 0.427131 + gd * -0.563523 + ed * 0.415701 - dd * 0.572007;
                        var kd = gd * 0.427131 - dd * 0.415701 - ed * 0.572007 - fd * -0.563523;
                        var ld = hd * hd;
                        var md = id * id;
                        var nd = jd * jd;
                        var od = kd * kd;
                        var pd = hd * id;
                        var qd = id * jd;
                        var rd = hd * jd;
                        var sd = kd * hd;
                        var td = kd * id;
                        var ud = kd * jd;
                        var vd = od + ld - md - nd;
                        var wd = (pd + ud) * 2.0;
                        var xd = (rd - td) * 2.0;
                        var yd = (pd - ud) * 2.0;
                        var zd = od - ld + md - nd;
                        var Ad = (qd + sd) * 2.0;
                        var Bd = (rd + td) * 2.0;
                        var Cd = (qd - sd) * 2.0;
                        var Dd = od - ld - md + nd;
                        var Ed = Fc * vd + Ic * wd + Lc * xd;
                        var Fd = Gc * vd + Jc * wd + Mc * xd;
                        var Gd = Hc * vd + Kc * wd + Nc * xd;
                        var Hd = Fc * yd + Ic * zd + Lc * Ad;
                        var Id = Gc * yd + Jc * zd + Mc * Ad;
                        var Jd = Hc * yd + Kc * zd + Nc * Ad;
                        var Kd = Fc * Bd + Ic * Cd + Lc * Dd;
                        var Ld = Gc * Bd + Jc * Cd + Mc * Dd;
                        var Md = Hc * Bd + Kc * Cd + Nc * Dd;
                        var Nd = Fc * 1.62023 + Ic * -0.207425 + Lc * -1.51967 + Oc;
                        var Od = Gc * 1.62023 + Jc * -0.207425 + Mc * -1.51967 + Pc;
                        var Pd = Hc * 1.62023 + Kc * -0.207425 + Nc * -1.51967 + Qc;
                        var Qd = fstate[0];
                        var Rd;
                        if (Qd < 0.0)
                        {
                            Rd = -2.18911e-16;
                        }
                        else
                        {
                            if (Qd < 4.125)
                            {
                                Rd = (engine.eCT(buffers[49], Qd * 24.0 + 1.0) * 1.01603e-5 + -0.0154162) * 0.5;
                            }
                            else
                            {
                                Rd = 0.00459772;
                            }
                        }
                        var Sd = fstate[0];
                        var Td;
                        if (Sd < 0.0)
                        {
                            Td = -1.76539e-15;
                        }
                        else
                        {
                            if (Sd < 4.125)
                            {
                                Td = (engine.eCT(buffers[48], Sd * 24.0 + 1.0) * 6.71948e-6 + -0.440361) * 0.5;
                            }
                            else
                            {
                                Td = -0.0341668;
                            }
                        }
                        var Ud = fstate[0];
                        var Vd;
                        if (Ud < 0.0)
                        {
                            Vd = 1.8404e-17;
                        }
                        else
                        {
                            if (Ud < 4.125)
                            {
                                Vd = (engine.eCT(buffers[47], Ud * 24.0 + 1.0) * 4.78584e-6 + -0.31364) * 0.5;
                            }
                            else
                            {
                                Vd = -0.00434315;
                            }
                        }
                        var Wd = Math.cos(Vd);
                        var Xd = Math.sin(Vd);
                        var Yd = Math.cos(Td);
                        var Zd = Math.sin(Td);
                        var ae = Math.cos(Rd);
                        var be = Math.sin(Rd);
                        var ce = ae * Yd * Xd - be * Zd * Wd;
                        var de = ae * Zd * Wd + be * Yd * Xd;
                        var ee = ae * -Zd * Xd + be * Yd * Wd;
                        var fe = ae * Yd * Wd - be * -Zd * Xd;
                        var ge = ce * 0.999927 - de * -0.0120529;
                        var he = de * 0.999927 + ce * -0.0120529;
                        var ie = ee * 0.999927 + fe * -0.0120529;
                        var je = fe * 0.999927 - ee * -0.0120529;
                        var ke = ge * ge;
                        var le = he * he;
                        var me = ie * ie;
                        var ne = je * je;
                        var oe = ge * he;
                        var pe = he * ie;
                        var qe = ge * ie;
                        var re = je * ge;
                        var se = je * he;
                        var te = je * ie;
                        var ue = ne + ke - le - me;
                        var ve = (oe + te) * 2.0;
                        var we = (qe - se) * 2.0;
                        var xe = (oe - te) * 2.0;
                        var ye = ne - ke + le - me;
                        var ze = (pe + re) * 2.0;
                        var Ae = (qe + se) * 2.0;
                        var Be = (pe - re) * 2.0;
                        var Ce = ne - ke - le + me;
                        var De = Ed * ue + Hd * ve + Kd * we;
                        var Ee = Fd * ue + Id * ve + Ld * we;
                        var Fe = Gd * ue + Jd * ve + Md * we;
                        var Ge = Ed * xe + Hd * ye + Kd * ze;
                        var He = Fd * xe + Id * ye + Ld * ze;
                        var Ie = Gd * xe + Jd * ye + Md * ze;
                        var Je = Ed * Ae + Hd * Be + Kd * Ce;
                        var Ke = Fd * Ae + Id * Be + Ld * Ce;
                        var Le = Gd * Ae + Jd * Be + Md * Ce;
                        var Me = Ed * 1.98668 + Hd * 2.10899e-15 + Kd * -0.219212 + Nd;
                        var Ne = Fd * 1.98668 + Id * 2.10899e-15 + Ld * -0.219212 + Od;
                        var Oe = Gd * 1.98668 + Jd * 2.10899e-15 + Md * -0.219212 + Pd;
                        var Pe = De * 0.949902 + Ge * 0.312548;
                        var Qe = Ee * 0.949902 + He * 0.312548;
                        var Re = Fe * 0.949902 + Ie * 0.312548;
                        var Se = De * -0.312548 + Ge * 0.949902;
                        var Te = Ee * -0.312548 + He * 0.949902;
                        var Ue = Fe * -0.312548 + Ie * 0.949902;
                        var Ve = Je * 1.0;
                        var We = Ke * 1.0;
                        var Xe = Le * 1.0;
                        var Ye = De * 2.60746 + Je * 0.219212 + Me;
                        var Ze = Ee * 2.60746 + Ke * 0.219212 + Ne;
                        var af = Fe * 2.60746 + Le * 0.219212 + Oe;
                        var bf = fstate[0];
                        var cf;
                        if (bf < 0.0)
                        {
                            cf = 9.12325e-16;
                        }
                        else
                        {
                            if (bf < 4.16666)
                            {
                                cf = (engine.eCT(buffers[14], bf * 24.0 + 1.0) * 2.60994e-5 + -0.590845) * 0.5;
                            }
                            else
                            {
                                cf = 0.077248;
                            }
                        }
                        var df = fstate[0];
                        var ef;
                        if (df < 0.0)
                        {
                            ef = 0.12385;
                        }
                        else
                        {
                            if (df < 4.16666)
                            {
                                ef = (engine.eCT(buffers[13], df * 24.0 + 1.0) * 6.72023e-6 + 0.0439505) * 0.5;
                            }
                            else
                            {
                                ef = 0.096125;
                            }
                        }
                        var ff = fstate[0];
                        var gf;
                        if (ff < 0.0)
                        {
                            gf = 1.77663e-9;
                        }
                        else
                        {
                            if (ff < 4.16666)
                            {
                                gf = (engine.eCT(buffers[12], ff * 24.0 + 1.0) * 2.26537e-5 + -0.559344) * 0.5;
                            }
                            else
                            {
                                gf = -0.0206563;
                            }
                        }
                        var hf = Math.cos(gf);
                        var jf = Math.sin(gf);
                        var kf = Math.cos(ef);
                        var lf = Math.sin(ef);
                        var mf = Math.cos(cf);
                        var nf = Math.sin(cf);
                        var of = mf * kf * jf - nf * lf * hf;
                        var pf = mf * lf * hf + nf * kf * jf;
                        var qf = mf * -lf * jf + nf * kf * hf;
                        var rf = mf * kf * hf - nf * -lf * jf;
                        var sf = of * 6.11528e-17 + rf * -0.998701 + qf * 0.0509619 - pf * -3.12052e-18;
                        var tf = pf * 6.11528e-17 + rf * 0.0509619 + of * -3.12052e-18 - qf * -0.998701;
                        var uf = qf * 6.11528e-17 + rf * -3.12052e-18 + pf * -0.998701 - of * 0.0509619;
                        var vf = rf * 6.11528e-17 - of * -0.998701 - pf * 0.0509619 - qf * -3.12052e-18;
                        var wf = sf * sf;
                        var xf = tf * tf;
                        var yf = uf * uf;
                        var zf = vf * vf;
                        var Af = sf * tf;
                        var Bf = tf * uf;
                        var Cf = sf * uf;
                        var Df = vf * sf;
                        var Ef = vf * tf;
                        var Ff = vf * uf;
                        var Gf = zf + wf - xf - yf;
                        var Hf = (Af + Ff) * 2.0;
                        var If = (Cf - Ef) * 2.0;
                        var Jf = (Af - Ff) * 2.0;
                        var Kf = zf - wf + xf - yf;
                        var Lf = (Bf + Df) * 2.0;
                        var Mf = (Cf + Ef) * 2.0;
                        var Nf = (Bf - Df) * 2.0;
                        var Of = zf - wf - xf + yf;
                        var Pf = K * Gf + N * Hf + Q * If;
                        var Qf = L * Gf + O * Hf + R * If;
                        var Rf = M * Gf + P * Hf + S * If;
                        var Sf = K * Jf + N * Kf + Q * Lf;
                        var Tf = L * Jf + O * Kf + R * Lf;
                        var Uf = M * Jf + P * Kf + S * Lf;
                        var Vf = K * Mf + N * Nf + Q * Of;
                        var Wf = L * Mf + O * Nf + R * Of;
                        var Xf = M * Mf + P * Nf + S * Of;
                        var Yf = K * -0.387873 + N * 0.170759 + Q * -1.01942 + l;
                        var Zf = L * -0.387873 + O * 0.170759 + R * -1.01942 + j;
                        var ag = M * -0.387873 + P * 0.170759 + S * -1.01942 + h;
                        var bg = fstate[0];
                        var cg;
                        if (bg < 0.0)
                        {
                            cg = 0.0;
                        }
                        else
                        {
                            if (bg < 4.16666)
                            {
                                cg = (engine.eCT(buffers[16], bg * 24.0 + 1.0) * 1.1753e-5 + -0.100882) * 0.5;
                            }
                            else
                            {
                                cg = 0.0729765;
                            }
                        }
                        var dg = fstate[0];
                        var eg;
                        if (dg < 0.0)
                        {
                            eg = 0.0;
                        }
                        else
                        {
                            if (dg < 4.16666)
                            {
                                eg = (engine.eCT(buffers[15], dg * 24.0 + 1.0) * 2.85163e-5 + -0.240302) * 0.5;
                            }
                            else
                            {
                                eg = 0.17755;
                            }
                        }
                        var fg = Math.cos(eg);
                        var gg = Math.sin(eg);
                        var hg = Math.cos(cg);
                        var ig = Math.sin(cg);
                        var jg = -(ig * gg);
                        var kg = hg * gg;
                        var lg = ig * fg;
                        var mg = hg * fg;
                        var ng = jg * 0.551999 + mg * -0.823689 + lg * 0.107778 - kg * -0.0722282;
                        var og = kg * 0.551999 + mg * 0.107778 + jg * -0.0722282 - lg * -0.823689;
                        var pg = lg * 0.551999 + mg * -0.0722282 + kg * -0.823689 - jg * 0.107778;
                        var qg = mg * 0.551999 - jg * -0.823689 - kg * 0.107778 - lg * -0.0722282;
                        var rg = ng * ng;
                        var sg = og * og;
                        var tg = pg * pg;
                        var ug = qg * qg;
                        var vg = ng * og;
                        var wg = og * pg;
                        var xg = ng * pg;
                        var yg = qg * ng;
                        var zg = qg * og;
                        var Ag = qg * pg;
                        var Bg = ug + rg - sg - tg;
                        var Cg = (vg + Ag) * 2.0;
                        var Dg = (xg - zg) * 2.0;
                        var Eg = (vg - Ag) * 2.0;
                        var Fg = ug - rg + sg - tg;
                        var Gg = (wg + yg) * 2.0;
                        var Hg = (xg + zg) * 2.0;
                        var Ig = (wg - yg) * 2.0;
                        var Jg = ug - rg - sg + tg;
                        var Kg = Pf * Bg + Sf * Cg + Vf * Dg;
                        var Lg = Qf * Bg + Tf * Cg + Wf * Dg;
                        var Mg = Rf * Bg + Uf * Cg + Xf * Dg;
                        var Ng = Pf * Eg + Sf * Fg + Vf * Gg;
                        var Og = Qf * Eg + Tf * Fg + Wf * Gg;
                        var Pg = Rf * Eg + Uf * Fg + Xf * Gg;
                        var Qg = Pf * Hg + Sf * Ig + Vf * Jg;
                        var Rg = Qf * Hg + Tf * Ig + Wf * Jg;
                        var Sg = Rf * Hg + Uf * Ig + Xf * Jg;
                        var Tg = Pf * -1.95064 + Sf * -6.69052e-7 + Vf * -1.01012e-6 + Yf;
                        var Ug = Qf * -1.95064 + Tf * -6.69052e-7 + Wf * -1.01012e-6 + Zf;
                        var Vg = Rf * -1.95064 + Uf * -6.69052e-7 + Xf * -1.01012e-6 + ag;
                        var Wg = Kg * 2.98023e-8 + Ng * 0.92492 + Qg * 0.380159;
                        var Xg = Lg * 2.98023e-8 + Og * 0.92492 + Rg * 0.380159;
                        var Yg = Mg * 2.98023e-8 + Pg * 0.92492 + Sg * 0.380159;
                        var Zg = Kg * -0.994219 + Ng * 0.0408141 + Qg * -0.0993;
                        var ah = Lg * -0.994219 + Og * 0.0408141 + Rg * -0.0993;
                        var bh = Mg * -0.994219 + Pg * 0.0408141 + Sg * -0.0993;
                        var ch = Kg * -0.10736 + Ng * -0.377961 + Qg * 0.919574;
                        var dh = Lg * -0.10736 + Og * -0.377961 + Rg * 0.919574;
                        var eh = Mg * -0.10736 + Pg * -0.377961 + Sg * 0.919574;
                        var fh = fstate[0];
                        var gh;
                        if (fh < 0.0)
                        {
                            gh = -4.40699e-20;
                        }
                        else
                        {
                            if (fh < 4.125)
                            {
                                gh = (engine.eCT(buffers[19], fh * 24.0 + 1.0) * 1.2411e-5 + -0.675544) * 0.5;
                            }
                            else
                            {
                                gh = -0.17041;
                            }
                        }
                        var hh = fstate[0];
                        var ih;
                        if (hh < 0.0)
                        {
                            ih = -2.45552e-11;
                        }
                        else
                        {
                            if (hh < 4.125)
                            {
                                ih = (engine.eCT(buffers[18], hh * 24.0 + 1.0) * 1.54409e-5 + -0.954307) * 0.5;
                            }
                            else
                            {
                                ih = -0.0341668;
                            }
                        }
                        var jh = fstate[0];
                        var kh;
                        if (jh < 0.0)
                        {
                            kh = 1.79472e-9;
                        }
                        else
                        {
                            if (jh < 4.125)
                            {
                                kh = (engine.eCT(buffers[17], jh * 24.0 + 1.0) * 1.96318e-5 + -0.0102281) * 0.5;
                            }
                            else
                            {
                                kh = 9.43435e-5;
                            }
                        }
                        var lh = Math.cos(kh);
                        var mh = Math.sin(kh);
                        var nh = Math.cos(ih);
                        var oh = Math.sin(ih);
                        var ph = Math.cos(gh);
                        var qh = Math.sin(gh);
                        var rh = ph * nh * mh - qh * oh * lh;
                        var sh = ph * oh * lh + qh * nh * mh;
                        var th = ph * -oh * mh + qh * nh * lh;
                        var uh = ph * nh * lh - qh * -oh * mh;
                        var vh = rh * 0.563523 + uh * -0.572007 + th * 0.415701 - sh * 0.427131;
                        var wh = sh * 0.563523 + uh * 0.415701 + rh * 0.427131 - th * -0.572007;
                        var xh = th * 0.563523 + uh * 0.427131 + sh * -0.572007 - rh * 0.415701;
                        var yh = uh * 0.563523 - rh * -0.572007 - sh * 0.415701 - th * 0.427131;
                        var zh = vh * vh;
                        var Ah = wh * wh;
                        var Bh = xh * xh;
                        var Ch = yh * yh;
                        var Dh = vh * wh;
                        var Eh = wh * xh;
                        var Fh = vh * xh;
                        var Gh = yh * vh;
                        var Hh = yh * wh;
                        var Ih = yh * xh;
                        var Jh = Ch + zh - Ah - Bh;
                        var Kh = (Dh + Ih) * 2.0;
                        var Lh = (Fh - Hh) * 2.0;
                        var Mh = (Dh - Ih) * 2.0;
                        var Nh = Ch - zh + Ah - Bh;
                        var Oh = (Eh + Gh) * 2.0;
                        var Ph = (Fh + Hh) * 2.0;
                        var Qh = (Eh - Gh) * 2.0;
                        var Rh = Ch - zh - Ah + Bh;
                        var Sh = Fc * Jh + Ic * Kh + Lc * Lh;
                        var Th = Gc * Jh + Jc * Kh + Mc * Lh;
                        var Uh = Hc * Jh + Kc * Kh + Nc * Lh;
                        var Vh = Fc * Mh + Ic * Nh + Lc * Oh;
                        var Wh = Gc * Mh + Jc * Nh + Mc * Oh;
                        var Xh = Hc * Mh + Kc * Nh + Nc * Oh;
                        var Yh = Fc * Ph + Ic * Qh + Lc * Rh;
                        var Zh = Gc * Ph + Jc * Qh + Mc * Rh;
                        var ai = Hc * Ph + Kc * Qh + Nc * Rh;
                        var bi = Fc * 1.62023 + Ic * -0.207425 + Lc * 1.51968 + Oc;
                        var ci = Gc * 1.62023 + Jc * -0.207425 + Mc * 1.51968 + Pc;
                        var di = Hc * 1.62023 + Kc * -0.207425 + Nc * 1.51968 + Qc;
                        var ei = fstate[0];
                        var fi;
                        if (ei < 0.0)
                        {
                            fi = 4.28694e-16;
                        }
                        else
                        {
                            if (ei < 4.125)
                            {
                                fi = (engine.eCT(buffers[22], ei * 24.0 + 1.0) * 9.92509e-6 + 8.57388e-16) * 0.5;
                            }
                            else
                            {
                                fi = 0.00459772;
                            }
                        }
                        var gi = fstate[0];
                        var hi;
                        if (gi < 0.0)
                        {
                            hi = 3.46322e-15;
                        }
                        else
                        {
                            if (gi < 4.125)
                            {
                                hi = (engine.eCT(buffers[21], gi * 24.0 + 1.0) * 6.71948e-6 + -0.440361) * 0.5;
                            }
                            else
                            {
                                hi = -0.0341668;
                            }
                        }
                        var ii = fstate[0];
                        var ji;
                        if (ii < 0.0)
                        {
                            ji = -3.60489e-17;
                        }
                        else
                        {
                            if (ii < 4.125)
                            {
                                ji = (engine.eCT(buffers[20], ii * 24.0 + 1.0) * 4.92288e-6 + -0.31364) * 0.5;
                            }
                            else
                            {
                                ji = -0.00434315;
                            }
                        }
                        var ki = Math.cos(ji);
                        var li = Math.sin(ji);
                        var mi = Math.cos(hi);
                        var ni = Math.sin(hi);
                        var oi = Math.cos(fi);
                        var pi = Math.sin(fi);
                        var qi = oi * mi * li - pi * ni * ki;
                        var ri = oi * ni * ki + pi * mi * li;
                        var si = oi * -ni * li + pi * mi * ki;
                        var ti = oi * mi * ki - pi * -ni * li;
                        var ui = qi * 0.999927 - ri * -0.0120529;
                        var vi = ri * 0.999927 + qi * -0.0120529;
                        var wi = si * 0.999927 + ti * -0.0120529;
                        var xi = ti * 0.999927 - si * -0.0120529;
                        var yi = ui * ui;
                        var zi = vi * vi;
                        var Ai = wi * wi;
                        var Bi = xi * xi;
                        var Ci = ui * vi;
                        var Di = vi * wi;
                        var Ei = ui * wi;
                        var Fi = xi * ui;
                        var Gi = xi * vi;
                        var Hi = xi * wi;
                        var Ii = Bi + yi - zi - Ai;
                        var Ji = (Ci + Hi) * 2.0;
                        var Ki = (Ei - Gi) * 2.0;
                        var Li = (Ci - Hi) * 2.0;
                        var Mi = Bi - yi + zi - Ai;
                        var Ni = (Di + Fi) * 2.0;
                        var Oi = (Ei + Gi) * 2.0;
                        var Pi = (Di - Fi) * 2.0;
                        var Qi = Bi - yi - zi + Ai;
                        var Ri = Sh * Ii + Vh * Ji + Yh * Ki;
                        var Si = Th * Ii + Wh * Ji + Zh * Ki;
                        var Ti = Uh * Ii + Xh * Ji + ai * Ki;
                        var Ui = Sh * Li + Vh * Mi + Yh * Ni;
                        var Vi = Th * Li + Wh * Mi + Zh * Ni;
                        var Wi = Uh * Li + Xh * Mi + ai * Ni;
                        var Xi = Sh * Oi + Vh * Pi + Yh * Qi;
                        var Yi = Th * Oi + Wh * Pi + Zh * Qi;
                        var Zi = Uh * Oi + Xh * Pi + ai * Qi;
                        var aj = Sh * -1.98667 + Vh * -4.66514e-6 + Yh * 0.219212 + bi;
                        var bj = Th * -1.98667 + Wh * -4.66514e-6 + Zh * 0.219212 + ci;
                        var cj = Uh * -1.98667 + Xh * -4.66514e-6 + ai * 0.219212 + di;
                        var dj = Ri * 0.949902 + Ui * 0.312548;
                        var ej = Si * 0.949902 + Vi * 0.312548;
                        var fj = Ti * 0.949902 + Wi * 0.312548;
                        var gj = Ri * -0.312548 + Ui * 0.949902;
                        var hj = Si * -0.312548 + Vi * 0.949902;
                        var ij = Ti * -0.312548 + Wi * 0.949902;
                        var jj = Xi * 1.0;
                        var kj = Yi * 1.0;
                        var lj = Zi * 1.0;
                        var mj = Ri * -2.60746 + Ui * -2.45135e-7 + Xi * -0.219212 + aj;
                        var nj = Si * -2.60746 + Vi * -2.45135e-7 + Yi * -0.219212 + bj;
                        var oj = Ti * -2.60746 + Wi * -2.45135e-7 + Zi * -0.219212 + cj;
                        var pj = fstate[0];
                        var qj;
                        if (pj < 0.0)
                        {
                            qj = 1.0;
                        }
                        else
                        {
                            if (pj < 4.16666)
                            {
                                qj = engine.eCT(buffers[25], pj * 24.0 + 1.0) * 1.5259e-5 + 1.0e-12;
                            }
                            else
                            {
                                qj = 1.0e-12;
                            }
                        }
                        var rj = fstate[0];
                        var sj;
                        if (rj < 0.0)
                        {
                            sj = 1.0;
                        }
                        else
                        {
                            if (rj < 4.16666)
                            {
                                sj = engine.eCT(buffers[24], rj * 24.0 + 1.0) * 1.5259e-5 + 1.0e-12;
                            }
                            else
                            {
                                sj = 1.0e-12;
                            }
                        }
                        var tj = fstate[0];
                        var uj;
                        if (tj < 0.0)
                        {
                            uj = 1.0;
                        }
                        else
                        {
                            if (tj < 4.16666)
                            {
                                uj = engine.eCT(buffers[23], tj * 24.0 + 1.0) * 1.5259e-5 + 1.0e-12;
                            }
                            else
                            {
                                uj = 1.0e-12;
                            }
                        }
                        var vj = sj * -1.0;
                        var wj = sj * 1.22464e-16;
                        var xj = qj * -1.22464e-16;
                        var yj = qj * -1.0;
                        var zj = dj * uj;
                        var Aj = ej * uj;
                        var Bj = fj * uj;
                        var Cj = gj * vj + jj * wj;
                        var Dj = hj * vj + kj * wj;
                        var Ej = ij * vj + lj * wj;
                        var Fj = gj * xj + jj * yj;
                        var Gj = hj * xj + kj * yj;
                        var Hj = ij * xj + lj * yj;
                        var Ij = fstate[0];
                        var Jj;
                        if (Ij < 0.0)
                        {
                            Jj = 1.0;
                        }
                        else
                        {
                            if (Ij < 4.16666)
                            {
                                Jj = engine.eCT(buffers[28], Ij * 24.0 + 1.0) * 1.5259e-5 + 1.0e-12;
                            }
                            else
                            {
                                Jj = 1.0e-12;
                            }
                        }
                        var Kj = fstate[0];
                        var Lj;
                        if (Kj < 0.0)
                        {
                            Lj = 1.0;
                        }
                        else
                        {
                            if (Kj < 4.16666)
                            {
                                Lj = engine.eCT(buffers[27], Kj * 24.0 + 1.0) * 1.5259e-5 + 1.0e-12;
                            }
                            else
                            {
                                Lj = 1.0e-12;
                            }
                        }
                        var Mj = fstate[0];
                        var Nj;
                        if (Mj < 0.0)
                        {
                            Nj = 1.0;
                        }
                        else
                        {
                            if (Mj < 4.16666)
                            {
                                Nj = engine.eCT(buffers[26], Mj * 24.0 + 1.0) * 1.5259e-5 + 1.0e-12;
                            }
                            else
                            {
                                Nj = 1.0e-12;
                            }
                        }
                        var Oj = Pe * Nj;
                        var Pj = Qe * Nj;
                        var Qj = Re * Nj;
                        var Rj = Se * Lj;
                        var Sj = Te * Lj;
                        var Tj = Ue * Lj;
                        var Uj = Ve * Jj;
                        var Vj = We * Jj;
                        var Wj = Xe * Jj;
                        var Xj = fstate[0];
                        var Yj;
                        if (Xj < 0.0)
                        {
                            Yj = 0.0;
                        }
                        else
                        {
                            if (Xj < 4.16666)
                            {
                                Yj = (engine.eCT(buffers[33], Xj * 24.0 + 1.0) * 1.02635e-5 + -0.100882) * 0.5;
                            }
                            else
                            {
                                Yj = 0.103432;
                            }
                        }
                        var Zj = fstate[0];
                        var ak;
                        if (Zj < 0.0)
                        {
                            ak = 0.0;
                        }
                        else
                        {
                            if (Zj < 4.16666)
                            {
                                ak = (engine.eCT(buffers[32], Zj * 24.0 + 1.0) * 2.48925e-5 + -0.240302) * 0.5;
                            }
                            else
                            {
                                ak = 0.251649;
                            }
                        }
                        var bk = Math.cos(ak);
                        var ck = Math.sin(ak);
                        var dk = Math.cos(Yj);
                        var ek = Math.sin(Yj);
                        var fk = -(ek * ck);
                        var gk = dk * ck;
                        var hk = ek * bk;
                        var ik = dk * bk;
                        var jk = fk * 0.551999 + ik * -0.823689 + hk * 0.107778 - gk * -0.0722282;
                        var kk = gk * 0.551999 + ik * 0.107778 + fk * -0.0722282 - hk * -0.823689;
                        var lk = hk * 0.551999 + ik * -0.0722282 + gk * -0.823689 - fk * 0.107778;
                        var mk = ik * 0.551999 - fk * -0.823689 - gk * 0.107778 - hk * -0.0722282;
                        var nk = jk * jk;
                        var ok = kk * kk;
                        var pk = lk * lk;
                        var qk = mk * mk;
                        var rk = jk * kk;
                        var sk = kk * lk;
                        var tk = jk * lk;
                        var uk = mk * jk;
                        var vk = mk * kk;
                        var wk = mk * lk;
                        var xk = qk + nk - ok - pk;
                        var yk = (rk + wk) * 2.0;
                        var zk = (tk - vk) * 2.0;
                        var Ak = (rk - wk) * 2.0;
                        var Bk = qk - nk + ok - pk;
                        var Ck = (sk + uk) * 2.0;
                        var Dk = (tk + vk) * 2.0;
                        var Ek = (sk - uk) * 2.0;
                        var Fk = qk - nk - ok + pk;
                        var Gk = Gb * xk + Jb * yk + Mb * zk;
                        var Hk = Hb * xk + Kb * yk + Nb * zk;
                        var Ik = Ib * xk + Lb * yk + Ob * zk;
                        var Jk = Gb * Ak + Jb * Bk + Mb * Ck;
                        var Kk = Hb * Ak + Kb * Bk + Nb * Ck;
                        var Lk = Ib * Ak + Lb * Bk + Ob * Ck;
                        var Mk = Gb * Dk + Jb * Ek + Mb * Fk;
                        var Nk = Hb * Dk + Kb * Ek + Nb * Fk;
                        var Ok = Ib * Dk + Lb * Ek + Ob * Fk;
                        var Pk = Gb * 1.95064 + Pb;
                        var Qk = Hb * 1.95064 + Qb;
                        var Rk = Ib * 1.95064 + Rb;
                        var Sk = Gk * 2.98023e-8 + Jk * 0.92492 + Mk * 0.380159;
                        var Tk = Hk * 2.98023e-8 + Kk * 0.92492 + Nk * 0.380159;
                        var Uk = Ik * 2.98023e-8 + Lk * 0.92492 + Ok * 0.380159;
                        var Vk = Gk * -0.994219 + Jk * 0.0408141 + Mk * -0.0993;
                        var Wk = Hk * -0.994219 + Kk * 0.0408141 + Nk * -0.0993;
                        var Xk = Ik * -0.994219 + Lk * 0.0408141 + Ok * -0.0993;
                        var Yk = Gk * -0.10736 + Jk * -0.377961 + Mk * 0.919574;
                        var Zk = Hk * -0.10736 + Kk * -0.377961 + Nk * 0.919574;
                        var al = Ik * -0.10736 + Lk * -0.377961 + Ok * 0.919574;
                        var bl = fstate[0];
                        var cl;
                        if (bl < 0.0)
                        {
                            cl = 0.0;
                        }
                        else
                        {
                            if (bl < 4.125)
                            {
                                cl = (engine.eCT(buffers[43], bl * 24.0 + 1.0) * 9.03139e-6 + -0.328949) * 0.5;
                            }
                            else
                            {
                                cl = 0.0222285;
                            }
                        }
                        var dl = Math.cos(cl);
                        var el = Math.sin(cl);
                        var fl = el * 0.999964 + dl * -0.00850668;
                        var gl = dl * 0.999964 - el * -0.00850668;
                        var hl = fl * fl;
                        var il = gl * gl;
                        var jl = gl * fl;
                        var kl = il - hl;
                        var ll = jl * 2.0;
                        var ml = -jl * 2.0;
                        var nl = il - hl;
                        var ol = il + hl;
                        var pl = Fc * kl + Ic * ll;
                        var ql = Gc * kl + Jc * ll;
                        var rl = Hc * kl + Kc * ll;
                        var sl = Fc * ml + Ic * nl;
                        var tl = Gc * ml + Jc * nl;
                        var ul = Hc * ml + Kc * nl;
                        var vl = Lc * ol;
                        var wl = Mc * ol;
                        var xl = Nc * ol;
                        var yl = Fc * 2.70253 + Ic * 1.97758e-15 + Lc * 2.7806e-16 + Oc;
                        var zl = Gc * 2.70253 + Jc * 1.97758e-15 + Mc * 2.7806e-16 + Pc;
                        var Al = Hc * 2.70253 + Kc * 1.97758e-15 + Nc * 2.7806e-16 + Qc;
                        var Bl = pl * 2.98023e-8 + vl * -1.0;
                        var Cl = ql * 2.98023e-8 + wl * -1.0;
                        var Dl = rl * 2.98023e-8 + xl * -1.0;
                        var El = pl * 0.999311 + sl * 0.0371375;
                        var Fl = ql * 0.999311 + tl * 0.0371375;
                        var Gl = rl * 0.999311 + ul * 0.0371375;
                        var Hl = pl * 0.0371375 + sl * -0.999311;
                        var Il = ql * 0.0371375 + tl * -0.999311;
                        var Jl = rl * 0.0371375 + ul * -0.999311;
                        var Kl = pl * 5.37141 + yl;
                        var Ll = ql * 5.37141 + zl;
                        var Ml = rl * 5.37141 + Al;
                        var Nl = fstate[0];
                        var Ol;
                        if (Nl >= 0.0 & Nl < 4.125)
                        {
                            Ol = (engine.eCT(buffers[50], Nl * 24.0 + 1.0) * 1.09961e-6 + -0.0720629) * 0.5;
                        }
                        else
                        {
                            Ol = 0.0;
                        }
                        var Pl = fstate[0];
                        var Ql;
                        if (Pl < 0.0)
                        {
                            Ql = 0.0;
                        }
                        else
                        {
                            if (Pl < 4.125)
                            {
                                Ql = engine.eCT(buffers[53], Pl * 24.0 + 1.0) * 3.19717e-5;
                            }
                            else
                            {
                                Ql = 2.09526;
                            }
                        }
                        var Rl = fstate[0];
                        var Sl;
                        if (Rl < 0.0)
                        {
                            Sl = 0.0;
                        }
                        else
                        {
                            if (Rl < 4.125)
                            {
                                Sl = engine.eCT(buffers[52], Rl * 24.0 + 1.0) * 3.86911e-5;
                            }
                            else
                            {
                                Sl = 2.14325;
                            }
                        }
                        var Tl = fstate[0];
                        var Ul;
                        if (Tl < 0.0)
                        {
                            Ul = 0.0;
                        }
                        else
                        {
                            if (Tl < 4.125)
                            {
                                Ul = engine.eCT(buffers[51], Tl * 24.0 + 1.0) * 3.19717e-5;
                            }
                            else
                            {
                                Ul = 2.09526;
                            }
                        }
                        var Vl = fstate[0];
                        var Wl;
                        if (Vl < 0.0)
                        {
                            Wl = 18.0966;
                        }
                        else
                        {
                            if (Vl < 4.125)
                            {
                                Wl = engine.eCT(buffers[56], Vl * 24.0 + 1.0) * 2.72416e-4 + 18.0966;
                            }
                            else
                            {
                                Wl = 35.9494;
                            }
                        }
                        var Xl = fstate[0];
                        var Yl;
                        if (Xl < 0.0)
                        {
                            Yl = 5.24599;
                        }
                        else
                        {
                            if (Xl < 4.125)
                            {
                                Yl = engine.eCT(buffers[55], Xl * 24.0 + 1.0) * 4.43597e-4 + 4.36924;
                            }
                            else
                            {
                                Yl = 6.09896;
                            }
                        }
                        var Zl = fstate[0];
                        var am;
                        if (Zl < 0.0)
                        {
                            am = 2.62102;
                        }
                        else
                        {
                            if (Zl < 4.125)
                            {
                                am = engine.eCT(buffers[54], Zl * 24.0 + 1.0) * 2.78701e-5 + 2.62102;
                            }
                            else
                            {
                                am = 2.8471;
                            }
                        }
                        var bm = Math.cos(Ol);
                        var cm = Math.sin(Ol);
                        var dm = cm * cm;
                        var em = bm * bm;
                        var fm = bm * cm;
                        var gm = (em - dm) * Ul;
                        var hm = fm * 2.0 * Ul;
                        var im = -fm * 2.0 * Sl;
                        var jm = (em - dm) * Sl;
                        var km = (em + dm) * Ql;
                        var lm = Oj * -6.05349 + Rj * -7.48186 + Uj * 0.0415453 + Pe * 0.155406 + Se * 0.163116 + Ve * 0.103402 + Ye;
                        var mm = Pj * -6.05349 + Sj * -7.48186 + Vj * 0.0415453 + Qe * 0.155406 + Te * 0.163116 + We * 0.103402 + Ze;
                        var nm = Qj * -6.05349 + Tj * -7.48186 + Wj * 0.0415453 + Re * 0.155406 + Ue * 0.163116 + Xe * 0.103402 + af;
                        var om = Oj * 8.54418 + Rj * 9.96457 + Uj * -0.143737 + lm;
                        var pm = Pj * 8.54418 + Sj * 9.96457 + Vj * -0.143737 + mm;
                        var qm = Qj * 8.54418 + Tj * 9.96457 + Wj * -0.143737 + nm;
                        var rm = Math.abs(Oj) * 3.68013 + Math.abs(Rj) * 3.61198 + Math.abs(Uj) * 0.612359;
                        var sm = Math.abs(Pj) * 3.68013 + Math.abs(Sj) * 3.61198 + Math.abs(Vj) * 0.612359;
                        var tm = Math.abs(Qj) * 3.68013 + Math.abs(Tj) * 3.61198 + Math.abs(Wj) * 0.612359;
                        var um = om - rm;
                        var vm = pm - sm;
                        var wm = qm - tm;
                        var xm = om + rm;
                        var ym = pm + sm;
                        var zm = qm + tm;
                        var Am = zj * 5.86163 + Cj * -7.69889 + Fj * 0.131449 + dj * 0.0364509 + gj * -0.380143 + jj * -0.0134986 + mj;
                        var Bm = Aj * 5.86163 + Dj * -7.69889 + Gj * 0.131449 + ej * 0.0364509 + hj * -0.380143 + kj * -0.0134986 + nj;
                        var Cm = Bj * 5.86163 + Ej * -7.69889 + Hj * 0.131449 + fj * 0.0364509 + ij * -0.380143 + lj * -0.0134986 + oj;
                        var Dm = zj * -8.16605 + Cj * 10.5904 + Fj * -0.143737 + Am;
                        var Em = Aj * -8.16605 + Dj * 10.5904 + Gj * -0.143737 + Bm;
                        var Fm = Bj * -8.16605 + Ej * 10.5904 + Hj * -0.143737 + Cm;
                        var Gm = Math.abs(zj) * 3.27842 + Math.abs(Cj) * 3.97246 + Math.abs(Fj) * 0.612359;
                        var Hm = Math.abs(Aj) * 3.27842 + Math.abs(Dj) * 3.97246 + Math.abs(Gj) * 0.612359;
                        var Im = Math.abs(Bj) * 3.27842 + Math.abs(Ej) * 3.97246 + Math.abs(Hj) * 0.612359;
                        var Jm = Dm - Gm;
                        var Km = Em - Hm;
                        var Lm = Fm - Im;
                        var Mm = Dm + Gm;
                        var Nm = Em + Hm;
                        var Om = Fm + Im;
                        var Pm = gm * 0.477266;
                        var Qm = hm * 0.477266;
                        var Rm = im * 0.493662;
                        var Sm = jm * 0.493662;
                        var Tm = km * 0.477266;
                        var Um = gm * -1.35882 + im * -2.6698 + am;
                        var Vm = hm * -1.35882 + jm * -2.6698 + Yl;
                        var Wm = km * -17.1847 + Wl;
                        var Xm = Pm * 3.18352 + Rm * 6.39615 + Um;
                        var Ym = Qm * 3.18352 + Sm * 6.39615 + Vm;
                        var Zm = Tm * 35.2934 + Wm;
                        var an = Math.abs(Pm) * 10.7353 + Math.abs(Rm) * 5.65217 + Math.abs(0.0) * 7.45824;
                        var bn = Math.abs(Qm) * 10.7353 + Math.abs(Sm) * 5.65217 + Math.abs(0.0) * 7.45824;
                        var cn = Math.abs(0.0) * 10.7353 + Math.abs(0.0) * 5.65217 + Math.abs(Tm) * 7.45824;
                        var dn = Xm - an;
                        var en = Ym - bn;
                        var fn = Zm - cn;
                        var gn = Xm + an;
                        var hn = Ym + bn;
                        var jn = Zm + cn;
                        var kn = K * 0.998716 + N * 0.0506595;
                        var ln = L * 0.998716 + O * 0.0506595;
                        var mn = M * 0.998716 + P * 0.0506595;
                        var nn = K * -0.0506595 + N * 0.998716;
                        var on = L * -0.0506595 + O * 0.998716;
                        var pn = M * -0.0506595 + P * 0.998716;
                        var qn = K * -4.59896 + N * 0.046149 + l;
                        var rn = L * -4.59896 + O * 0.046149 + j;
                        var sn = M * -4.59896 + P * 0.046149 + h + -0.0210635;
                        var tn = Q * -2.24024e-4 + kn * 4.99203 + nn * 1.60806 + qn;
                        var un = R * -2.24024e-4 + ln * 4.99203 + on * 1.60806 + rn;
                        var vn = S * -2.24024e-4 + mn * 4.99203 + pn * 1.60806 + sn;
                        var wn = Math.abs(Q) * 0.912526 + Math.abs(kn) * 0.91179 + Math.abs(nn) * 0.169205;
                        var xn = Math.abs(R) * 0.912526 + Math.abs(ln) * 0.91179 + Math.abs(on) * 0.169205;
                        var yn = Math.abs(S) * 0.912526 + Math.abs(mn) * 0.91179 + Math.abs(pn) * 0.169205;
                        var zn = tn - wn;
                        var An = un - xn;
                        var Bn = vn - yn;
                        var Cn = tn + wn;
                        var Dn = un + xn;
                        var En = vn + yn;
                        var Fn = vl * -1.0;
                        var Gn = wl * -1.0;
                        var Hn = xl * -1.0;
                        var In = pl * 0.99931 + sl * 0.0371365;
                        var Jn = ql * 0.99931 + tl * 0.0371365;
                        var Kn = rl * 0.99931 + ul * 0.0371365;
                        var Ln = pl * 0.0371365 + sl * -0.99931;
                        var Mn = ql * 0.0371365 + tl * -0.99931;
                        var Nn = rl * 0.0371365 + ul * -0.99931;
                        var On = pl * -9.7762 + sl * -0.694077 + yl;
                        var Pn = ql * -9.7762 + tl * -0.694077 + zl;
                        var Qn = rl * -9.7762 + ul * -0.694077 + Al;
                        var Rn = Fn * -4.77552e-4 + In * 13.5195 + Ln * -0.182161 + On;
                        var Sn = Gn * -4.77552e-4 + Jn * 13.5195 + Mn * -0.182161 + Pn;
                        var Tn = Hn * -4.77552e-4 + Kn * 13.5195 + Nn * -0.182161 + Qn;
                        var Un = Math.abs(Fn) * 7.37218 + Math.abs(In) * 3.91181 + Math.abs(Ln) * 1.78532;
                        var Vn = Math.abs(Gn) * 7.37218 + Math.abs(Jn) * 3.91181 + Math.abs(Mn) * 1.78532;
                        var Wn = Math.abs(Hn) * 7.37218 + Math.abs(Kn) * 3.91181 + Math.abs(Nn) * 1.78532;
                        var Xn = Rn - Un;
                        var Yn = Sn - Vn;
                        var Zn = Tn - Wn;
                        var ao = Rn + Un;
                        var bo = Sn + Vn;
                        var co = Tn + Wn;
                        var eo = El * -15.1629 + Hl * 0.131069 + Kl;
                        var fo = Fl * -15.1629 + Il * 0.131069 + Ll;
                        var go = Gl * -15.1629 + Jl * 0.131069 + Ml;
                        var ho = Bl * -0.0559868 + El * 18.7261 + Hl * 0.340089 + eo;
                        var io = Cl * -0.0559868 + Fl * 18.7261 + Il * 0.340089 + fo;
                        var jo = Dl * -0.0559868 + Gl * 18.7261 + Jl * 0.340089 + go;
                        var ko = Math.abs(Bl) * 10.2396 + Math.abs(El) * 3.47247 + Math.abs(Hl) * 4.05178;
                        var lo = Math.abs(Cl) * 10.2396 + Math.abs(Fl) * 3.47247 + Math.abs(Il) * 4.05178;
                        var mo = Math.abs(Dl) * 10.2396 + Math.abs(Gl) * 3.47247 + Math.abs(Jl) * 4.05178;
                        var no = ho - ko;
                        var oo = io - lo;
                        var po = jo - mo;
                        var qo = ho + ko;
                        var ro = io + lo;
                        var so = jo + mo;
                        var to = K * 0.998716 + N * 0.0506595;
                        var uo = L * 0.998716 + O * 0.0506595;
                        var vo = M * 0.998716 + P * 0.0506595;
                        var wo = K * -0.0506595 + N * 0.998716;
                        var xo = L * -0.0506595 + O * 0.998716;
                        var yo = M * -0.0506595 + P * 0.998716;
                        var zo = K * -4.5979 + N * 0.0251126 + l;
                        var Ao = L * -4.5979 + O * 0.0251126 + j;
                        var Bo = M * -4.5979 + P * 0.0251126 + h;
                        var Co = Lc * -1.0;
                        var Do = Mc * -1.0;
                        var Eo = Nc * -1.0;
                        var Fo = Fc * 0.999797 + Ic * 0.0201301;
                        var Go = Gc * 0.999797 + Jc * 0.0201301;
                        var Ho = Hc * 0.999797 + Kc * 0.0201301;
                        var Io = Fc * 0.0201301 + Ic * -0.999797;
                        var Jo = Gc * 0.0201301 + Jc * -0.999797;
                        var Ko = Hc * 0.0201301 + Kc * -0.999797;
                        var Lo = Fc * -7.08405 + Ic * -0.527657 + Oc;
                        var Mo = Gc * -7.08405 + Jc * -0.527657 + Pc;
                        var No = Hc * -7.08405 + Kc * -0.527657 + Qc;
                        var Oo = vl * -1.0;
                        var Po = wl * -1.0;
                        var Qo = xl * -1.0;
                        var Ro = pl * 0.99931 + sl * 0.0371365;
                        var So = ql * 0.99931 + tl * 0.0371365;
                        var To = rl * 0.99931 + ul * 0.0371365;
                        var Uo = pl * 0.0371365 + sl * -0.99931;
                        var Vo = ql * 0.0371365 + tl * -0.99931;
                        var Wo = rl * 0.0371365 + ul * -0.99931;
                        var Xo = pl * -9.7762 + sl * -0.694077 + yl;
                        var Yo = ql * -9.7762 + tl * -0.694077 + zl;
                        var Zo = rl * -9.7762 + ul * -0.694077 + Al;
                        var ap = El * -15.1629 + Hl * 0.131069 + Kl;
                        var bp = Fl * -15.1629 + Il * 0.131069 + Ll;
                        var cp = Gl * -15.1629 + Jl * 0.131069 + Ml;
                        var dp = Sh * 0.95716 + Vh * 0.289561;
                        var ep = Th * 0.95716 + Wh * 0.289561;
                        var fp = Uh * 0.95716 + Xh * 0.289561;
                        var gp = Sh * 0.289561 + Vh * -0.95716;
                        var hp = Th * 0.289561 + Wh * -0.95716;
                        var ip = Uh * 0.289561 + Xh * -0.95716;
                        var jp = Yh * -1.0;
                        var kp = Zh * -1.0;
                        var lp = ai * -1.0;
                        var mp = Sh * -1.0672 + Vh * 8.77591 + Yh * -0.144948 + bi;
                        var np = Th * -1.0672 + Wh * 8.77591 + Zh * -0.144948 + ci;
                        var op = Uh * -1.0672 + Xh * 8.77591 + ai * -0.144948 + di;
                        var pp = Ri * 0.949902 + Ui * 0.312548;
                        var qp = Si * 0.949902 + Vi * 0.312548;
                        var rp = Ti * 0.949902 + Wi * 0.312548;
                        var sp = Ri * 0.312548 + Ui * -0.949902;
                        var tp = Si * 0.312548 + Vi * -0.949902;
                        var up = Ti * 0.312548 + Wi * -0.949902;
                        var vp = Xi * -1.0;
                        var wp = Yi * -1.0;
                        var xp = Zi * -1.0;
                        var yp = Ri * 0.707674 + Ui * 8.79553 + Xi * -0.36416 + aj;
                        var zp = Si * 0.707674 + Vi * 8.79553 + Yi * -0.36416 + bj;
                        var Ap = Ti * 0.707674 + Wi * 8.79553 + Zi * -0.36416 + cj;
                        var Bp = gj * -1.0;
                        var Cp = hj * -1.0;
                        var Dp = ij * -1.0;
                        var Ep = jj * -1.0;
                        var Fp = kj * -1.0;
                        var Gp = lj * -1.0;
                        var Hp = dj * 5.89809 + gj * 7.31875 + jj * -0.144948 + mj;
                        var Ip = ej * 5.89809 + hj * 7.31875 + kj * -0.144948 + nj;
                        var Jp = fj * 5.89809 + ij * 7.31875 + lj * -0.144948 + oj;
                        var Kp = Ed * 0.95716 + Hd * 0.289561;
                        var Lp = Fd * 0.95716 + Id * 0.289561;
                        var Mp = Gd * 0.95716 + Jd * 0.289561;
                        var Np = Ed * -0.289561 + Hd * 0.95716;
                        var Op = Fd * -0.289561 + Id * 0.95716;
                        var Pp = Gd * -0.289561 + Jd * 0.95716;
                        var Qp = Ed * 1.0672 + Hd * -8.77592 + Kd * 0.144948 + Nd;
                        var Rp = Fd * 1.0672 + Id * -8.77592 + Ld * 0.144948 + Od;
                        var Sp = Gd * 1.0672 + Jd * -8.77592 + Md * 0.144948 + Pd;
                        var Tp = De * 0.949902 + Ge * 0.312548;
                        var Up = Ee * 0.949902 + He * 0.312548;
                        var Vp = Fe * 0.949902 + Ie * 0.312548;
                        var Wp = De * -0.312548 + Ge * 0.949902;
                        var Xp = Ee * -0.312548 + He * 0.949902;
                        var Yp = Fe * -0.312548 + Ie * 0.949902;
                        var Zp = De * -0.707676 + Ge * -8.79553 + Je * 0.36416 + Me;
                        var aq = Ee * -0.707676 + He * -8.79553 + Ke * 0.36416 + Ne;
                        var bq = Fe * -0.707676 + Ie * -8.79553 + Le * 0.36416 + Oe;
                        var cq = Pe * -5.89809 + Se * -7.31874 + Ve * 0.144948 + Ye;
                        var dq = Qe * -5.89809 + Te * -7.31874 + We * 0.144948 + Ze;
                        var eq = Re * -5.89809 + Ue * -7.31874 + Xe * 0.144948 + af;
                        var fq = Pf * 0.245176 + Sf * 5.41454e-8 + Vf * -0.969479;
                        var gq = Qf * 0.245176 + Tf * 5.41454e-8 + Wf * -0.969479;
                        var hq = Rf * 0.245176 + Uf * 5.41454e-8 + Xf * -0.969479;
                        var iq = Pf * 0.958205 + Sf * -0.152057 + Vf * 0.242325;
                        var jq = Qf * 0.958205 + Tf * -0.152057 + Wf * 0.242325;
                        var kq = Rf * 0.958205 + Uf * -0.152057 + Xf * 0.242325;
                        var lq = Pf * -0.147416 + Sf * -0.988372 + Vf * -0.0372808;
                        var mq = Qf * -0.147416 + Tf * -0.988372 + Wf * -0.0372808;
                        var nq = Rf * -0.147416 + Uf * -0.988372 + Xf * -0.0372808;
                        var oq = Pf * -3.79602 + Sf * 0.573436 + Vf * -2.0115 + Yf;
                        var pq = Qf * -3.79602 + Tf * 0.573436 + Wf * -2.0115 + Zf;
                        var qq = Rf * -3.79602 + Uf * 0.573436 + Xf * -2.0115 + ag;
                        var rq = Kg * 0.236921 + Ng * 0.87271 + Qg * 0.426903;
                        var sq = Lg * 0.236921 + Og * 0.87271 + Rg * 0.426903;
                        var tq = Mg * 0.236921 + Pg * 0.87271 + Sg * 0.426903;
                        var uq = Kg * 0.965069 + Ng * -0.261995 + Qg * 1.40328e-8;
                        var vq = Lg * 0.965069 + Og * -0.261995 + Rg * 1.40328e-8;
                        var wq = Mg * 0.965069 + Pg * -0.261995 + Sg * 1.40328e-8;
                        var xq = Kg * 0.111846 + Ng * 0.411991 + Qg * -0.904297;
                        var yq = Lg * 0.111846 + Og * 0.411991 + Rg * -0.904297;
                        var zq = Mg * 0.111846 + Pg * 0.411991 + Sg * -0.904297;
                        var Aq = Kg * -1.93078 + Ng * 1.83032 + Qg * 0.83807 + Tg;
                        var Bq = Lg * -1.93078 + Og * 1.83032 + Rg * 0.83807 + Ug;
                        var Cq = Mg * -1.93078 + Pg * 1.83032 + Sg * 0.83807 + Vg;
                        var Dq = Wg * 0.969479 + Zg * -0.242325 + ch * 0.0372807;
                        var Eq = Xg * 0.969479 + ah * -0.242325 + dh * 0.0372807;
                        var Fq = Yg * 0.969479 + bh * -0.242325 + eh * 0.0372807;
                        var Gq = Wg * -0.242325 + Zg * -0.970184 + ch * -0.00458704;
                        var Hq = Xg * -0.242325 + ah * -0.970184 + dh * -0.00458704;
                        var Iq = Yg * -0.242325 + bh * -0.970184 + eh * -0.00458704;
                        var Jq = Wg * 0.0372807 + Zg * -0.00458701 + ch * -0.999294;
                        var Kq = Xg * 0.0372807 + ah * -0.00458701 + dh * -0.999294;
                        var Lq = Yg * 0.0372807 + bh * -0.00458701 + eh * -0.999294;
                        var Mq = Wg * 2.0115 + Zg * -0.443247 + ch * 0.0319283 + Kg * -2.36804 + Ng * 7.25483e-7 + Qg * 5.71139e-7 + Tg;
                        var Nq = Xg * 2.0115 + ah * -0.443247 + dh * 0.0319283 + Lg * -2.36804 + Og * 7.25483e-7 + Rg * 5.71139e-7 + Ug;
                        var Oq = Yg * 2.0115 + bh * -0.443247 + eh * 0.0319283 + Mg * -2.36804 + Pg * 7.25483e-7 + Sg * 5.71139e-7 + Vg;
                        var Pq = Gb * 0.245176 + Jb * 5.41454e-8 + Mb * -0.969479;
                        var Qq = Hb * 0.245176 + Kb * 5.41454e-8 + Nb * -0.969479;
                        var Rq = Ib * 0.245176 + Lb * 5.41454e-8 + Ob * -0.969479;
                        var Sq = Gb * -0.958205 + Jb * 0.152057 + Mb * -0.242325;
                        var Tq = Hb * -0.958205 + Kb * 0.152057 + Nb * -0.242325;
                        var Uq = Ib * -0.958205 + Lb * 0.152057 + Ob * -0.242325;
                        var Vq = Gb * 0.147416 + Jb * 0.988372 + Mb * 0.0372808;
                        var Wq = Hb * 0.147416 + Kb * 0.988372 + Nb * 0.0372808;
                        var Xq = Ib * 0.147416 + Lb * 0.988372 + Ob * 0.0372808;
                        var Yq = Gb * 3.79602 + Jb * -0.573436 + Mb * 2.0115 + Pb;
                        var Zq = Hb * 3.79602 + Kb * -0.573436 + Nb * 2.0115 + Qb;
                        var ar = Ib * 3.79602 + Lb * -0.573436 + Ob * 2.0115 + Rb;
                        var br = Gk * 0.236921 + Jk * 0.87271 + Mk * 0.426903;
                        var cr = Hk * 0.236921 + Kk * 0.87271 + Nk * 0.426903;
                        var dr = Ik * 0.236921 + Lk * 0.87271 + Ok * 0.426903;
                        var er = Gk * -0.965069 + Jk * 0.261995 + Mk * -1.14556e-8;
                        var fr = Hk * -0.965069 + Kk * 0.261995 + Nk * -1.14556e-8;
                        var gr = Ik * -0.965069 + Lk * 0.261995 + Ok * -1.14556e-8;
                        var hr = Gk * -0.111846 + Jk * -0.411991 + Mk * 0.904297;
                        var ir = Hk * -0.111846 + Kk * -0.411991 + Nk * 0.904297;
                        var jr = Ik * -0.111846 + Lk * -0.411991 + Ok * 0.904297;
                        var kr = Gk * 1.93078 + Jk * -1.83032 + Mk * -0.838069 + Pk;
                        var lr = Hk * 1.93078 + Kk * -1.83032 + Nk * -0.838069 + Qk;
                        var mr = Ik * 1.93078 + Lk * -1.83032 + Ok * -0.838069 + Rk;
                        var nr = Sk * 0.969479 + Vk * -0.242325 + Yk * 0.0372807;
                        var or = Tk * 0.969479 + Wk * -0.242325 + Zk * 0.0372807;
                        var pr = Uk * 0.969479 + Xk * -0.242325 + al * 0.0372807;
                        var qr = Sk * 0.242325 + Vk * 0.970184 + Yk * 0.00458704;
                        var rr = Tk * 0.242325 + Wk * 0.970184 + Zk * 0.00458704;
                        var sr = Uk * 0.242325 + Xk * 0.970184 + al * 0.00458704;
                        var tr = Sk * -0.0372807 + Vk * 0.00458701 + Yk * 0.999294;
                        var ur = Tk * -0.0372807 + Wk * 0.00458701 + Zk * 0.999294;
                        var vr = Uk * -0.0372807 + Xk * 0.00458701 + al * 0.999294;
                        var wr = Sk * -2.0115 + Vk * 0.443247 + Yk * -0.0319283 + Gk * 2.36804 + Pk;
                        var xr = Tk * -2.0115 + Wk * 0.443247 + Zk * -0.0319283 + Hk * 2.36804 + Qk;
                        var yr = Uk * -2.0115 + Xk * 0.443247 + al * -0.0319283 + Ik * 2.36804 + Rk;
                        var zr = Q * 7.15256e-7 + to * 4.93876 + wo * -0.150521 + zo;
                        var Ar = R * 7.15256e-7 + uo * 4.93876 + xo * -0.150521 + Ao;
                        var Br = S * 7.15256e-7 + vo * 4.93876 + yo * -0.150521 + Bo;
                        var Cr = Math.abs(Q) * 5.99336 + Math.abs(to) * 4.91501 + Math.abs(wo) * 1.88726;
                        var Dr = Math.abs(R) * 5.99336 + Math.abs(uo) * 4.91501 + Math.abs(xo) * 1.88726;
                        var Er = Math.abs(S) * 5.99336 + Math.abs(vo) * 4.91501 + Math.abs(yo) * 1.88726;
                        var Fr = Co * 7.15256e-7 + Fo * 4.93876 + Io * -0.150521 + Lo;
                        var Gr = Do * 7.15256e-7 + Go * 4.93876 + Jo * -0.150521 + Mo;
                        var Hr = Eo * 7.15256e-7 + Ho * 4.93876 + Ko * -0.150521 + No;
                        var Ir = Math.abs(Co) * 5.99336 + Math.abs(Fo) * 4.91501 + Math.abs(Io) * 1.88726;
                        var Jr = Math.abs(Do) * 5.99336 + Math.abs(Go) * 4.91501 + Math.abs(Jo) * 1.88726;
                        var Kr = Math.abs(Eo) * 5.99336 + Math.abs(Ho) * 4.91501 + Math.abs(Ko) * 1.88726;
                        var Lr = Oo * 7.15256e-7 + Ro * 4.93876 + Uo * -0.150521 + Xo;
                        var Mr = Po * 7.15256e-7 + So * 4.93876 + Vo * -0.150521 + Yo;
                        var Nr = Qo * 7.15256e-7 + To * 4.93876 + Wo * -0.150521 + Zo;
                        var Or = Math.abs(Oo) * 5.99336 + Math.abs(Ro) * 4.91501 + Math.abs(Uo) * 1.88726;
                        var Pr = Math.abs(Po) * 5.99336 + Math.abs(So) * 4.91501 + Math.abs(Vo) * 1.88726;
                        var Qr = Math.abs(Qo) * 5.99336 + Math.abs(To) * 4.91501 + Math.abs(Wo) * 1.88726;
                        var Rr = Bl * 7.15256e-7 + El * 4.93876 + Hl * -0.150521 + ap;
                        var Sr = Cl * 7.15256e-7 + Fl * 4.93876 + Il * -0.150521 + bp;
                        var Tr = Dl * 7.15256e-7 + Gl * 4.93876 + Jl * -0.150521 + cp;
                        var Ur = Math.abs(Bl) * 5.99336 + Math.abs(El) * 4.91501 + Math.abs(Hl) * 1.88726;
                        var Vr = Math.abs(Cl) * 5.99336 + Math.abs(Fl) * 4.91501 + Math.abs(Il) * 1.88726;
                        var Wr = Math.abs(Dl) * 5.99336 + Math.abs(Gl) * 4.91501 + Math.abs(Jl) * 1.88726;
                        var Xr = dp * 7.15256e-7 + gp * 4.93876 + jp * -0.150521 + mp;
                        var Yr = ep * 7.15256e-7 + hp * 4.93876 + kp * -0.150521 + np;
                        var Zr = fp * 7.15256e-7 + ip * 4.93876 + lp * -0.150521 + op;
                        var as = Math.abs(dp) * 5.99336 + Math.abs(gp) * 4.91501 + Math.abs(jp) * 1.88726;
                        var bs = Math.abs(ep) * 5.99336 + Math.abs(hp) * 4.91501 + Math.abs(kp) * 1.88726;
                        var cs = Math.abs(fp) * 5.99336 + Math.abs(ip) * 4.91501 + Math.abs(lp) * 1.88726;
                        var ds = pp * 7.15256e-7 + sp * 4.93876 + vp * -0.150521 + yp;
                        var es = qp * 7.15256e-7 + tp * 4.93876 + wp * -0.150521 + zp;
                        var fs = rp * 7.15256e-7 + up * 4.93876 + xp * -0.150521 + Ap;
                        var gs = Math.abs(pp) * 5.99336 + Math.abs(sp) * 4.91501 + Math.abs(vp) * 1.88726;
                        var hs = Math.abs(qp) * 5.99336 + Math.abs(tp) * 4.91501 + Math.abs(wp) * 1.88726;
                        var js = Math.abs(rp) * 5.99336 + Math.abs(up) * 4.91501 + Math.abs(xp) * 1.88726;
                        var ks = dj * 7.15256e-7 + Bp * 4.93876 + Ep * -0.150521 + Hp;
                        var ls = ej * 7.15256e-7 + Cp * 4.93876 + Fp * -0.150521 + Ip;
                        var ms = fj * 7.15256e-7 + Dp * 4.93876 + Gp * -0.150521 + Jp;
                        var ns = Math.abs(dj) * 5.99336 + Math.abs(Bp) * 4.91501 + Math.abs(Ep) * 1.88726;
                        var os = Math.abs(ej) * 5.99336 + Math.abs(Cp) * 4.91501 + Math.abs(Fp) * 1.88726;
                        var ps = Math.abs(fj) * 5.99336 + Math.abs(Dp) * 4.91501 + Math.abs(Gp) * 1.88726;
                        var qs = Kp * 7.15256e-7 + Np * 4.93876 + Kd * -0.150521 + Qp;
                        var rs = Lp * 7.15256e-7 + Op * 4.93876 + Ld * -0.150521 + Rp;
                        var ss = Mp * 7.15256e-7 + Pp * 4.93876 + Md * -0.150521 + Sp;
                        var ts = Math.abs(Kp) * 5.99336 + Math.abs(Np) * 4.91501 + Math.abs(Kd) * 1.88726;
                        var us = Math.abs(Lp) * 5.99336 + Math.abs(Op) * 4.91501 + Math.abs(Ld) * 1.88726;
                        var vs = Math.abs(Mp) * 5.99336 + Math.abs(Pp) * 4.91501 + Math.abs(Md) * 1.88726;
                        var ws = Tp * 7.15256e-7 + Wp * 4.93876 + Je * -0.150521 + Zp;
                        var xs = Up * 7.15256e-7 + Xp * 4.93876 + Ke * -0.150521 + aq;
                        var ys = Vp * 7.15256e-7 + Yp * 4.93876 + Le * -0.150521 + bq;
                        var zs = Math.abs(Tp) * 5.99336 + Math.abs(Wp) * 4.91501 + Math.abs(Je) * 1.88726;
                        var As = Math.abs(Up) * 5.99336 + Math.abs(Xp) * 4.91501 + Math.abs(Ke) * 1.88726;
                        var Bs = Math.abs(Vp) * 5.99336 + Math.abs(Yp) * 4.91501 + Math.abs(Le) * 1.88726;
                        var Cs = Pe * 7.15256e-7 + Se * 4.93876 + Ve * -0.150521 + cq;
                        var Ds = Qe * 7.15256e-7 + Te * 4.93876 + We * -0.150521 + dq;
                        var Es = Re * 7.15256e-7 + Ue * 4.93876 + Xe * -0.150521 + eq;
                        var Fs = Math.abs(Pe) * 5.99336 + Math.abs(Se) * 4.91501 + Math.abs(Ve) * 1.88726;
                        var Gs = Math.abs(Qe) * 5.99336 + Math.abs(Te) * 4.91501 + Math.abs(We) * 1.88726;
                        var Hs = Math.abs(Re) * 5.99336 + Math.abs(Ue) * 4.91501 + Math.abs(Xe) * 1.88726;
                        var Is = fq * 7.15256e-7 + iq * 4.93876 + lq * -0.150521 + oq;
                        var Js = gq * 7.15256e-7 + jq * 4.93876 + mq * -0.150521 + pq;
                        var Ks = hq * 7.15256e-7 + kq * 4.93876 + nq * -0.150521 + qq;
                        var Ls = Math.abs(fq) * 5.99336 + Math.abs(iq) * 4.91501 + Math.abs(lq) * 1.88726;
                        var Ms = Math.abs(gq) * 5.99336 + Math.abs(jq) * 4.91501 + Math.abs(mq) * 1.88726;
                        var Ns = Math.abs(hq) * 5.99336 + Math.abs(kq) * 4.91501 + Math.abs(nq) * 1.88726;
                        var Os = rq * 7.15256e-7 + uq * 4.93876 + xq * -0.150521 + Aq;
                        var Ps = sq * 7.15256e-7 + vq * 4.93876 + yq * -0.150521 + Bq;
                        var Qs = tq * 7.15256e-7 + wq * 4.93876 + zq * -0.150521 + Cq;
                        var Rs = Math.abs(rq) * 5.99336 + Math.abs(uq) * 4.91501 + Math.abs(xq) * 1.88726;
                        var Ss = Math.abs(sq) * 5.99336 + Math.abs(vq) * 4.91501 + Math.abs(yq) * 1.88726;
                        var Ts = Math.abs(tq) * 5.99336 + Math.abs(wq) * 4.91501 + Math.abs(zq) * 1.88726;
                        var Us = Dq * 7.15256e-7 + Gq * 4.93876 + Jq * -0.150521 + Mq;
                        var Vs = Eq * 7.15256e-7 + Hq * 4.93876 + Kq * -0.150521 + Nq;
                        var Ws = Fq * 7.15256e-7 + Iq * 4.93876 + Lq * -0.150521 + Oq;
                        var Xs = Math.abs(Dq) * 5.99336 + Math.abs(Gq) * 4.91501 + Math.abs(Jq) * 1.88726;
                        var Ys = Math.abs(Eq) * 5.99336 + Math.abs(Hq) * 4.91501 + Math.abs(Kq) * 1.88726;
                        var Zs = Math.abs(Fq) * 5.99336 + Math.abs(Iq) * 4.91501 + Math.abs(Lq) * 1.88726;
                        var at = Pq * 7.15256e-7 + Sq * 4.93876 + Vq * -0.150521 + Yq;
                        var bt = Qq * 7.15256e-7 + Tq * 4.93876 + Wq * -0.150521 + Zq;
                        var ct = Rq * 7.15256e-7 + Uq * 4.93876 + Xq * -0.150521 + ar;
                        var dt = Math.abs(Pq) * 5.99336 + Math.abs(Sq) * 4.91501 + Math.abs(Vq) * 1.88726;
                        var et = Math.abs(Qq) * 5.99336 + Math.abs(Tq) * 4.91501 + Math.abs(Wq) * 1.88726;
                        var ft = Math.abs(Rq) * 5.99336 + Math.abs(Uq) * 4.91501 + Math.abs(Xq) * 1.88726;
                        var gt = br * 7.15256e-7 + er * 4.93876 + hr * -0.150521 + kr;
                        var ht = cr * 7.15256e-7 + fr * 4.93876 + ir * -0.150521 + lr;
                        var it = dr * 7.15256e-7 + gr * 4.93876 + jr * -0.150521 + mr;
                        var jt = Math.abs(br) * 5.99336 + Math.abs(er) * 4.91501 + Math.abs(hr) * 1.88726;
                        var kt = Math.abs(cr) * 5.99336 + Math.abs(fr) * 4.91501 + Math.abs(ir) * 1.88726;
                        var lt = Math.abs(dr) * 5.99336 + Math.abs(gr) * 4.91501 + Math.abs(jr) * 1.88726;
                        var mt = nr * 7.15256e-7 + qr * 4.93876 + tr * -0.150521 + wr;
                        var nt = or * 7.15256e-7 + rr * 4.93876 + ur * -0.150521 + xr;
                        var ot = pr * 7.15256e-7 + sr * 4.93876 + vr * -0.150521 + yr;
                        var pt = Math.abs(nr) * 5.99336 + Math.abs(qr) * 4.91501 + Math.abs(tr) * 1.88726;
                        var qt = Math.abs(or) * 5.99336 + Math.abs(rr) * 4.91501 + Math.abs(ur) * 1.88726;
                        var rt = Math.abs(pr) * 5.99336 + Math.abs(sr) * 4.91501 + Math.abs(vr) * 1.88726;
                        var st = Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(zr - Cr, Fr - Ir), Lr - Or), Rr - Ur), Xr - as), ds - gs), ks - ns), qs - ts), ws - zs), Cs - Fs), Is - Ls), Os - Rs), Us - Xs), at - dt), gt - jt), mt - pt);
                        var tt = Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Ar - Dr, Gr - Jr), Mr - Pr), Sr - Vr), Yr - bs), es - hs), ls - os), rs - us), xs - As), Ds - Gs), Js - Ms), Ps - Ss), Vs - Ys), bt - et), ht - kt), nt - qt);
                        var ut = Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Br - Er, Hr - Kr), Nr - Qr), Tr - Wr), Zr - cs), fs - js), ms - ps), ss - vs), ys - Bs), Es - Hs), Ks - Ns), Qs - Ts), Ws - Zs), ct - ft), it - lt), ot - rt);
                        var vt = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(zr + Cr, Fr + Ir), Lr + Or), Rr + Ur), Xr + as), ds + gs), ks + ns), qs + ts), ws + zs), Cs + Fs), Is + Ls), Os + Rs), Us + Xs), at + dt), gt + jt), mt + pt);
                        var wt = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Ar + Dr, Gr + Jr), Mr + Pr), Sr + Vr), Yr + bs), es + hs), ls + os), rs + us), xs + As), Ds + Gs), Js + Ms), Ps + Ss), Vs + Ys), bt + et), ht + kt), nt + qt);
                        var xt = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Br + Er, Hr + Kr), Nr + Qr), Tr + Wr), Zr + cs), fs + js), ms + ps), ss + vs), ys + Bs), Es + Hs), Ks + Ns), Qs + Ts), Ws + Zs), ct + ft), it + lt), ot + rt);
                        ftransforms[0] = 1.0;
                        ftransforms[1] = 0.0;
                        ftransforms[2] = 0.0;
                        ftransforms[3] = 0.0;
                        ftransforms[4] = 0.0;
                        ftransforms[5] = 1.0;
                        ftransforms[6] = 0.0;
                        ftransforms[7] = 0.0;
                        ftransforms[8] = 0.0;
                        ftransforms[9] = 0.0;
                        ftransforms[10] = 1.0;
                        ftransforms[11] = 0.0;
                        ftransforms[12] = 0.0;
                        ftransforms[13] = 0.0;
                        ftransforms[14] = 0.0;
                        ftransforms[15] = 1.0;
                        itransforms[0] = 1;
                        ftransforms[80] = 1.0;
                        ftransforms[81] = 0.0;
                        ftransforms[82] = 0.0;
                        ftransforms[83] = 0.0;
                        ftransforms[84] = 0.0;
                        ftransforms[85] = 1.0;
                        ftransforms[86] = 0.0;
                        ftransforms[87] = 0.0;
                        ftransforms[88] = 0.0;
                        ftransforms[89] = 0.0;
                        ftransforms[90] = 1.0;
                        ftransforms[91] = 0.0;
                        ftransforms[92] = 0.0;
                        ftransforms[93] = 0.0;
                        ftransforms[94] = 0.0;
                        ftransforms[95] = 1.0;
                        itransforms[5] = 1;
                        ftransforms[64] = 1.0;
                        ftransforms[65] = 0.0;
                        ftransforms[66] = 0.0;
                        ftransforms[67] = 0.0;
                        ftransforms[68] = 0.0;
                        ftransforms[69] = 1.0;
                        ftransforms[70] = 0.0;
                        ftransforms[71] = 0.0;
                        ftransforms[72] = 0.0;
                        ftransforms[73] = 0.0;
                        ftransforms[74] = 1.0;
                        ftransforms[75] = 0.0;
                        ftransforms[76] = 0.0;
                        ftransforms[77] = 0.0;
                        ftransforms[78] = 0.0;
                        ftransforms[79] = 1.0;
                        itransforms[4] = 1;
                        ftransforms[32] = 1.0;
                        ftransforms[33] = 0.0;
                        ftransforms[34] = 0.0;
                        ftransforms[35] = 0.0;
                        ftransforms[36] = 0.0;
                        ftransforms[37] = 1.0;
                        ftransforms[38] = 0.0;
                        ftransforms[39] = 0.0;
                        ftransforms[40] = 0.0;
                        ftransforms[41] = 0.0;
                        ftransforms[42] = 1.0;
                        ftransforms[43] = 0.0;
                        ftransforms[44] = 0.0;
                        ftransforms[45] = 0.0;
                        ftransforms[46] = 0.0;
                        ftransforms[47] = 1.0;
                        itransforms[2] = 1;
                        ftransforms[16] = 1.0;
                        ftransforms[17] = 0.0;
                        ftransforms[18] = 0.0;
                        ftransforms[19] = 0.0;
                        ftransforms[20] = 0.0;
                        ftransforms[21] = 1.0;
                        ftransforms[22] = 0.0;
                        ftransforms[23] = 0.0;
                        ftransforms[24] = 0.0;
                        ftransforms[25] = 0.0;
                        ftransforms[26] = 1.0;
                        ftransforms[27] = 0.0;
                        ftransforms[28] = 0.0;
                        ftransforms[29] = 0.0;
                        ftransforms[30] = 0.0210634;
                        ftransforms[31] = 1.0;
                        itransforms[1] = 1;
                        ftransforms[48] = 1.0;
                        ftransforms[49] = 0.0;
                        ftransforms[50] = 0.0;
                        ftransforms[51] = 0.0;
                        ftransforms[52] = 0.0;
                        ftransforms[53] = 1.0;
                        ftransforms[54] = 0.0;
                        ftransforms[55] = 0.0;
                        ftransforms[56] = 0.0;
                        ftransforms[57] = 0.0;
                        ftransforms[58] = 1.0;
                        ftransforms[59] = 0.0;
                        ftransforms[60] = 0.0;
                        ftransforms[61] = 0.0;
                        ftransforms[62] = 0.0;
                        ftransforms[63] = 1.0;
                        itransforms[3] = 1;
                        ftransforms[96] = 1.0;
                        ftransforms[97] = 0.0;
                        ftransforms[98] = 0.0;
                        ftransforms[99] = 0.0;
                        ftransforms[100] = 0.0;
                        ftransforms[101] = 1.0;
                        ftransforms[102] = 0.0;
                        ftransforms[103] = 0.0;
                        ftransforms[104] = 0.0;
                        ftransforms[105] = 0.0;
                        ftransforms[106] = 1.0;
                        ftransforms[107] = 0.0;
                        ftransforms[108] = 0.0;
                        ftransforms[109] = 0.0;
                        ftransforms[110] = 0.0;
                        ftransforms[111] = 1.0;
                        itransforms[6] = 1;
                        fboundingBoxes[0] = (ao + Xn) * 0.5;
                        fboundingBoxes[1] = (bo + Yn) * 0.5;
                        fboundingBoxes[2] = (co + Zn) * 0.5;
                        fboundingBoxes[3] = (ao - Xn) * 0.5;
                        fboundingBoxes[4] = (bo - Yn) * 0.5;
                        fboundingBoxes[5] = (co - Zn) * 0.5;
                        fboundingBoxes[6] = (Cn + zn) * 0.5;
                        fboundingBoxes[7] = (Dn + An) * 0.5;
                        fboundingBoxes[8] = (En + Bn) * 0.5;
                        fboundingBoxes[9] = (Cn - zn) * 0.5;
                        fboundingBoxes[10] = (Dn - An) * 0.5;
                        fboundingBoxes[11] = (En - Bn) * 0.5;
                        fboundingBoxes[12] = (vt + st) * 0.5;
                        fboundingBoxes[13] = (wt + tt) * 0.5;
                        fboundingBoxes[14] = (xt + ut) * 0.5;
                        fboundingBoxes[15] = (vt - st) * 0.5;
                        fboundingBoxes[16] = (wt - tt) * 0.5;
                        fboundingBoxes[17] = (xt - ut) * 0.5;
                        fboundingBoxes[18] = (Mm + Jm) * 0.5;
                        fboundingBoxes[19] = (Nm + Km) * 0.5;
                        fboundingBoxes[20] = (Om + Lm) * 0.5;
                        fboundingBoxes[21] = (Mm - Jm) * 0.5;
                        fboundingBoxes[22] = (Nm - Km) * 0.5;
                        fboundingBoxes[23] = (Om - Lm) * 0.5;
                        fboundingBoxes[24] = (qo + no) * 0.5;
                        fboundingBoxes[25] = (ro + oo) * 0.5;
                        fboundingBoxes[26] = (so + po) * 0.5;
                        fboundingBoxes[27] = (qo - no) * 0.5;
                        fboundingBoxes[28] = (ro - oo) * 0.5;
                        fboundingBoxes[29] = (so - po) * 0.5;
                        fboundingBoxes[30] = (gn + dn) * 0.5;
                        fboundingBoxes[31] = (hn + en) * 0.5;
                        fboundingBoxes[32] = (jn + fn) * 0.5;
                        fboundingBoxes[33] = (gn - dn) * 0.5;
                        fboundingBoxes[34] = (hn - en) * 0.5;
                        fboundingBoxes[35] = (jn - fn) * 0.5;
                        fboundingBoxes[36] = (xm + um) * 0.5;
                        fboundingBoxes[37] = (ym + vm) * 0.5;
                        fboundingBoxes[38] = (zm + wm) * 0.5;
                        fboundingBoxes[39] = (xm - um) * 0.5;
                        fboundingBoxes[40] = (ym - vm) * 0.5;
                        fboundingBoxes[41] = (zm - wm) * 0.5;
                        funiforms[0] = Pm;
                        funiforms[1] = Qm;
                        funiforms[2] = 0.0;
                        funiforms[3] = Um;
                        funiforms[4] = Rm;
                        funiforms[5] = Sm;
                        funiforms[6] = 0.0;
                        funiforms[7] = Vm;
                        funiforms[8] = 0.0;
                        funiforms[9] = 0.0;
                        funiforms[10] = Tm;
                        funiforms[11] = Wm;
                        funiforms[12] = Bl;
                        funiforms[13] = Cl;
                        funiforms[14] = Dl;
                        funiforms[15] = eo;
                        funiforms[16] = El;
                        funiforms[17] = Fl;
                        funiforms[18] = Gl;
                        funiforms[19] = fo;
                        funiforms[20] = Hl;
                        funiforms[21] = Il;
                        funiforms[22] = Jl;
                        funiforms[23] = go;
                        funiforms[24] = Oj;
                        funiforms[25] = Pj;
                        funiforms[26] = Qj;
                        funiforms[27] = lm;
                        funiforms[28] = Rj;
                        funiforms[29] = Sj;
                        funiforms[30] = Tj;
                        funiforms[31] = mm;
                        funiforms[32] = Uj;
                        funiforms[33] = Vj;
                        funiforms[34] = Wj;
                        funiforms[35] = nm;
                        funiforms[36] = zj;
                        funiforms[37] = Aj;
                        funiforms[38] = Bj;
                        funiforms[39] = Am;
                        funiforms[40] = Cj;
                        funiforms[41] = Dj;
                        funiforms[42] = Ej;
                        funiforms[43] = Bm;
                        funiforms[44] = Fj;
                        funiforms[45] = Gj;
                        funiforms[46] = Hj;
                        funiforms[47] = Cm;
                        funiforms[48] = Q;
                        funiforms[49] = R;
                        funiforms[50] = S;
                        funiforms[51] = zo;
                        funiforms[52] = to;
                        funiforms[53] = uo;
                        funiforms[54] = vo;
                        funiforms[55] = Ao;
                        funiforms[56] = wo;
                        funiforms[57] = xo;
                        funiforms[58] = yo;
                        funiforms[59] = Bo;
                        funiforms[168] = fq;
                        funiforms[169] = gq;
                        funiforms[170] = hq;
                        funiforms[171] = oq;
                        funiforms[172] = iq;
                        funiforms[173] = jq;
                        funiforms[174] = kq;
                        funiforms[175] = pq;
                        funiforms[176] = lq;
                        funiforms[177] = mq;
                        funiforms[178] = nq;
                        funiforms[179] = qq;
                        funiforms[180] = rq;
                        funiforms[181] = sq;
                        funiforms[182] = tq;
                        funiforms[183] = Aq;
                        funiforms[184] = uq;
                        funiforms[185] = vq;
                        funiforms[186] = wq;
                        funiforms[187] = Bq;
                        funiforms[188] = xq;
                        funiforms[189] = yq;
                        funiforms[190] = zq;
                        funiforms[191] = Cq;
                        funiforms[192] = Dq;
                        funiforms[193] = Eq;
                        funiforms[194] = Fq;
                        funiforms[195] = Mq;
                        funiforms[196] = Gq;
                        funiforms[197] = Hq;
                        funiforms[198] = Iq;
                        funiforms[199] = Nq;
                        funiforms[200] = Jq;
                        funiforms[201] = Kq;
                        funiforms[202] = Lq;
                        funiforms[203] = Oq;
                        funiforms[204] = Pq;
                        funiforms[205] = Qq;
                        funiforms[206] = Rq;
                        funiforms[207] = Yq;
                        funiforms[208] = Sq;
                        funiforms[209] = Tq;
                        funiforms[210] = Uq;
                        funiforms[211] = Zq;
                        funiforms[212] = Vq;
                        funiforms[213] = Wq;
                        funiforms[214] = Xq;
                        funiforms[215] = ar;
                        funiforms[216] = br;
                        funiforms[217] = cr;
                        funiforms[218] = dr;
                        funiforms[219] = kr;
                        funiforms[220] = er;
                        funiforms[221] = fr;
                        funiforms[222] = gr;
                        funiforms[223] = lr;
                        funiforms[224] = hr;
                        funiforms[225] = ir;
                        funiforms[226] = jr;
                        funiforms[227] = mr;
                        funiforms[228] = nr;
                        funiforms[229] = or;
                        funiforms[230] = pr;
                        funiforms[231] = wr;
                        funiforms[232] = qr;
                        funiforms[233] = rr;
                        funiforms[234] = sr;
                        funiforms[235] = xr;
                        funiforms[236] = tr;
                        funiforms[237] = ur;
                        funiforms[238] = vr;
                        funiforms[239] = yr;
                        funiforms[60] = Co;
                        funiforms[61] = Do;
                        funiforms[62] = Eo;
                        funiforms[63] = Lo;
                        funiforms[64] = Fo;
                        funiforms[65] = Go;
                        funiforms[66] = Ho;
                        funiforms[67] = Mo;
                        funiforms[68] = Io;
                        funiforms[69] = Jo;
                        funiforms[70] = Ko;
                        funiforms[71] = No;
                        funiforms[72] = Oo;
                        funiforms[73] = Po;
                        funiforms[74] = Qo;
                        funiforms[75] = Xo;
                        funiforms[76] = Ro;
                        funiforms[77] = So;
                        funiforms[78] = To;
                        funiforms[79] = Yo;
                        funiforms[80] = Uo;
                        funiforms[81] = Vo;
                        funiforms[82] = Wo;
                        funiforms[83] = Zo;
                        funiforms[84] = Bl;
                        funiforms[85] = Cl;
                        funiforms[86] = Dl;
                        funiforms[87] = ap;
                        funiforms[88] = El;
                        funiforms[89] = Fl;
                        funiforms[90] = Gl;
                        funiforms[91] = bp;
                        funiforms[92] = Hl;
                        funiforms[93] = Il;
                        funiforms[94] = Jl;
                        funiforms[95] = cp;
                        funiforms[96] = dp;
                        funiforms[97] = ep;
                        funiforms[98] = fp;
                        funiforms[99] = mp;
                        funiforms[100] = gp;
                        funiforms[101] = hp;
                        funiforms[102] = ip;
                        funiforms[103] = np;
                        funiforms[104] = jp;
                        funiforms[105] = kp;
                        funiforms[106] = lp;
                        funiforms[107] = op;
                        funiforms[108] = pp;
                        funiforms[109] = qp;
                        funiforms[110] = rp;
                        funiforms[111] = yp;
                        funiforms[112] = sp;
                        funiforms[113] = tp;
                        funiforms[114] = up;
                        funiforms[115] = zp;
                        funiforms[116] = vp;
                        funiforms[117] = wp;
                        funiforms[118] = xp;
                        funiforms[119] = Ap;
                        funiforms[120] = dj;
                        funiforms[121] = ej;
                        funiforms[122] = fj;
                        funiforms[123] = Hp;
                        funiforms[124] = Bp;
                        funiforms[125] = Cp;
                        funiforms[126] = Dp;
                        funiforms[127] = Ip;
                        funiforms[128] = Ep;
                        funiforms[129] = Fp;
                        funiforms[130] = Gp;
                        funiforms[131] = Jp;
                        funiforms[132] = Kp;
                        funiforms[133] = Lp;
                        funiforms[134] = Mp;
                        funiforms[135] = Qp;
                        funiforms[136] = Np;
                        funiforms[137] = Op;
                        funiforms[138] = Pp;
                        funiforms[139] = Rp;
                        funiforms[140] = Kd;
                        funiforms[141] = Ld;
                        funiforms[142] = Md;
                        funiforms[143] = Sp;
                        funiforms[144] = Tp;
                        funiforms[145] = Up;
                        funiforms[146] = Vp;
                        funiforms[147] = Zp;
                        funiforms[148] = Wp;
                        funiforms[149] = Xp;
                        funiforms[150] = Yp;
                        funiforms[151] = aq;
                        funiforms[152] = Je;
                        funiforms[153] = Ke;
                        funiforms[154] = Le;
                        funiforms[155] = bq;
                        funiforms[156] = Pe;
                        funiforms[157] = Qe;
                        funiforms[158] = Re;
                        funiforms[159] = cq;
                        funiforms[160] = Se;
                        funiforms[161] = Te;
                        funiforms[162] = Ue;
                        funiforms[163] = dq;
                        funiforms[164] = Ve;
                        funiforms[165] = We;
                        funiforms[166] = Xe;
                        funiforms[167] = eq;
                        funiforms[240] = Fn;
                        funiforms[241] = Gn;
                        funiforms[242] = Hn;
                        funiforms[243] = On;
                        funiforms[244] = In;
                        funiforms[245] = Jn;
                        funiforms[246] = Kn;
                        funiforms[247] = Pn;
                        funiforms[248] = Ln;
                        funiforms[249] = Mn;
                        funiforms[250] = Nn;
                        funiforms[251] = Qn;
                        funiforms[252] = Q;
                        funiforms[253] = R;
                        funiforms[254] = S;
                        funiforms[255] = qn;
                        funiforms[256] = kn;
                        funiforms[257] = ln;
                        funiforms[258] = mn;
                        funiforms[259] = rn;
                        funiforms[260] = nn;
                        funiforms[261] = on;
                        funiforms[262] = pn;
                        funiforms[263] = sn;
                        ouniforms[0] = ostate[0];
                    };

                    instance.render = function(viewMatrix, projectionMatrix, layerName, renderQueues)
                    {
                        instance.renderSequence = ++global.sequence;
                        var viewProjectionMatrix = instance.viewProjectionMatrix;
                        engine.matrix4x4Mul(projectionMatrix, viewMatrix, viewProjectionMatrix);
                        var funiforms = instance.funiforms;
                        var ouniforms = instance.ouniforms;
                        var itransforms = instance.itransforms;
                        var ftransforms = instance.ftransforms;
                        var fboundingBoxes = instance.fboundingBoxes;

                        // mesh, deformer 'polySurface13Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface13Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[20];
                        _b[25] = funiforms[21];
                        _b[26] = funiforms[22];
                        _b[27] = funiforms[23];
                        _b[20] = funiforms[16];
                        _b[21] = funiforms[17];
                        _b[22] = funiforms[18];
                        _b[23] = funiforms[19];
                        _b[16] = funiforms[12];
                        _b[17] = funiforms[13];
                        _b[18] = funiforms[14];
                        _b[19] = funiforms[15];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface8Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[144] = funiforms[56];
                        _b[145] = funiforms[57];
                        _b[146] = funiforms[58];
                        _b[147] = funiforms[59];
                        _b[148] = funiforms[68];
                        _b[149] = funiforms[69];
                        _b[150] = funiforms[70];
                        _b[151] = funiforms[71];
                        _b[152] = funiforms[80];
                        _b[153] = funiforms[81];
                        _b[154] = funiforms[82];
                        _b[155] = funiforms[83];
                        _b[156] = funiforms[92];
                        _b[157] = funiforms[93];
                        _b[158] = funiforms[94];
                        _b[159] = funiforms[95];
                        _b[160] = funiforms[104];
                        _b[161] = funiforms[105];
                        _b[162] = funiforms[106];
                        _b[163] = funiforms[107];
                        _b[164] = funiforms[116];
                        _b[165] = funiforms[117];
                        _b[166] = funiforms[118];
                        _b[167] = funiforms[119];
                        _b[168] = funiforms[128];
                        _b[169] = funiforms[129];
                        _b[170] = funiforms[130];
                        _b[171] = funiforms[131];
                        _b[172] = funiforms[140];
                        _b[173] = funiforms[141];
                        _b[174] = funiforms[142];
                        _b[175] = funiforms[143];
                        _b[176] = funiforms[152];
                        _b[177] = funiforms[153];
                        _b[178] = funiforms[154];
                        _b[179] = funiforms[155];
                        _b[180] = funiforms[164];
                        _b[181] = funiforms[165];
                        _b[182] = funiforms[166];
                        _b[183] = funiforms[167];
                        _b[184] = funiforms[176];
                        _b[185] = funiforms[177];
                        _b[186] = funiforms[178];
                        _b[187] = funiforms[179];
                        _b[188] = funiforms[188];
                        _b[189] = funiforms[189];
                        _b[190] = funiforms[190];
                        _b[191] = funiforms[191];
                        _b[192] = funiforms[200];
                        _b[193] = funiforms[201];
                        _b[194] = funiforms[202];
                        _b[195] = funiforms[203];
                        _b[196] = funiforms[212];
                        _b[197] = funiforms[213];
                        _b[198] = funiforms[214];
                        _b[199] = funiforms[215];
                        _b[200] = funiforms[224];
                        _b[201] = funiforms[225];
                        _b[202] = funiforms[226];
                        _b[203] = funiforms[227];
                        _b[204] = funiforms[236];
                        _b[205] = funiforms[237];
                        _b[206] = funiforms[238];
                        _b[207] = funiforms[239];
                        _b[80] = funiforms[52];
                        _b[81] = funiforms[53];
                        _b[82] = funiforms[54];
                        _b[83] = funiforms[55];
                        _b[84] = funiforms[64];
                        _b[85] = funiforms[65];
                        _b[86] = funiforms[66];
                        _b[87] = funiforms[67];
                        _b[88] = funiforms[76];
                        _b[89] = funiforms[77];
                        _b[90] = funiforms[78];
                        _b[91] = funiforms[79];
                        _b[92] = funiforms[88];
                        _b[93] = funiforms[89];
                        _b[94] = funiforms[90];
                        _b[95] = funiforms[91];
                        _b[96] = funiforms[100];
                        _b[97] = funiforms[101];
                        _b[98] = funiforms[102];
                        _b[99] = funiforms[103];
                        _b[100] = funiforms[112];
                        _b[101] = funiforms[113];
                        _b[102] = funiforms[114];
                        _b[103] = funiforms[115];
                        _b[104] = funiforms[124];
                        _b[105] = funiforms[125];
                        _b[106] = funiforms[126];
                        _b[107] = funiforms[127];
                        _b[108] = funiforms[136];
                        _b[109] = funiforms[137];
                        _b[110] = funiforms[138];
                        _b[111] = funiforms[139];
                        _b[112] = funiforms[148];
                        _b[113] = funiforms[149];
                        _b[114] = funiforms[150];
                        _b[115] = funiforms[151];
                        _b[116] = funiforms[160];
                        _b[117] = funiforms[161];
                        _b[118] = funiforms[162];
                        _b[119] = funiforms[163];
                        _b[120] = funiforms[172];
                        _b[121] = funiforms[173];
                        _b[122] = funiforms[174];
                        _b[123] = funiforms[175];
                        _b[124] = funiforms[184];
                        _b[125] = funiforms[185];
                        _b[126] = funiforms[186];
                        _b[127] = funiforms[187];
                        _b[128] = funiforms[196];
                        _b[129] = funiforms[197];
                        _b[130] = funiforms[198];
                        _b[131] = funiforms[199];
                        _b[132] = funiforms[208];
                        _b[133] = funiforms[209];
                        _b[134] = funiforms[210];
                        _b[135] = funiforms[211];
                        _b[136] = funiforms[220];
                        _b[137] = funiforms[221];
                        _b[138] = funiforms[222];
                        _b[139] = funiforms[223];
                        _b[140] = funiforms[232];
                        _b[141] = funiforms[233];
                        _b[142] = funiforms[234];
                        _b[143] = funiforms[235];
                        _b[16] = funiforms[48];
                        _b[17] = funiforms[49];
                        _b[18] = funiforms[50];
                        _b[19] = funiforms[51];
                        _b[20] = funiforms[60];
                        _b[21] = funiforms[61];
                        _b[22] = funiforms[62];
                        _b[23] = funiforms[63];
                        _b[24] = funiforms[72];
                        _b[25] = funiforms[73];
                        _b[26] = funiforms[74];
                        _b[27] = funiforms[75];
                        _b[28] = funiforms[84];
                        _b[29] = funiforms[85];
                        _b[30] = funiforms[86];
                        _b[31] = funiforms[87];
                        _b[32] = funiforms[96];
                        _b[33] = funiforms[97];
                        _b[34] = funiforms[98];
                        _b[35] = funiforms[99];
                        _b[36] = funiforms[108];
                        _b[37] = funiforms[109];
                        _b[38] = funiforms[110];
                        _b[39] = funiforms[111];
                        _b[40] = funiforms[120];
                        _b[41] = funiforms[121];
                        _b[42] = funiforms[122];
                        _b[43] = funiforms[123];
                        _b[44] = funiforms[132];
                        _b[45] = funiforms[133];
                        _b[46] = funiforms[134];
                        _b[47] = funiforms[135];
                        _b[48] = funiforms[144];
                        _b[49] = funiforms[145];
                        _b[50] = funiforms[146];
                        _b[51] = funiforms[147];
                        _b[52] = funiforms[156];
                        _b[53] = funiforms[157];
                        _b[54] = funiforms[158];
                        _b[55] = funiforms[159];
                        _b[56] = funiforms[168];
                        _b[57] = funiforms[169];
                        _b[58] = funiforms[170];
                        _b[59] = funiforms[171];
                        _b[60] = funiforms[180];
                        _b[61] = funiforms[181];
                        _b[62] = funiforms[182];
                        _b[63] = funiforms[183];
                        _b[64] = funiforms[192];
                        _b[65] = funiforms[193];
                        _b[66] = funiforms[194];
                        _b[67] = funiforms[195];
                        _b[68] = funiforms[204];
                        _b[69] = funiforms[205];
                        _b[70] = funiforms[206];
                        _b[71] = funiforms[207];
                        _b[72] = funiforms[216];
                        _b[73] = funiforms[217];
                        _b[74] = funiforms[218];
                        _b[75] = funiforms[219];
                        _b[76] = funiforms[228];
                        _b[77] = funiforms[229];
                        _b[78] = funiforms[230];
                        _b[79] = funiforms[231];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface12Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[248];
                        _b[25] = funiforms[249];
                        _b[26] = funiforms[250];
                        _b[27] = funiforms[251];
                        _b[20] = funiforms[244];
                        _b[21] = funiforms[245];
                        _b[22] = funiforms[246];
                        _b[23] = funiforms[247];
                        _b[16] = funiforms[240];
                        _b[17] = funiforms[241];
                        _b[18] = funiforms[242];
                        _b[19] = funiforms[243];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface11Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[260];
                        _b[25] = funiforms[261];
                        _b[26] = funiforms[262];
                        _b[27] = funiforms[263];
                        _b[20] = funiforms[256];
                        _b[21] = funiforms[257];
                        _b[22] = funiforms[258];
                        _b[23] = funiforms[259];
                        _b[16] = funiforms[252];
                        _b[17] = funiforms[253];
                        _b[18] = funiforms[254];
                        _b[19] = funiforms[255];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__pasted__polySurface248Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'
                        var s_ = instance.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[32];
                        _b[25] = funiforms[33];
                        _b[26] = funiforms[34];
                        _b[27] = funiforms[35];
                        _b[20] = funiforms[28];
                        _b[21] = funiforms[29];
                        _b[22] = funiforms[30];
                        _b[23] = funiforms[31];
                        _b[16] = funiforms[24];
                        _b[17] = funiforms[25];
                        _b[18] = funiforms[26];
                        _b[19] = funiforms[27];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__pasted__polySurface32Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461'
                        var s_ = instance.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[44];
                        _b[25] = funiforms[45];
                        _b[26] = funiforms[46];
                        _b[27] = funiforms[47];
                        _b[20] = funiforms[40];
                        _b[21] = funiforms[41];
                        _b[22] = funiforms[42];
                        _b[23] = funiforms[43];
                        _b[16] = funiforms[36];
                        _b[17] = funiforms[37];
                        _b[18] = funiforms[38];
                        _b[19] = funiforms[39];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__pasted__polySurface248Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_1'
                        var s_ = instance.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[32];
                        _b[25] = funiforms[33];
                        _b[26] = funiforms[34];
                        _b[27] = funiforms[35];
                        _b[20] = funiforms[28];
                        _b[21] = funiforms[29];
                        _b[22] = funiforms[30];
                        _b[23] = funiforms[31];
                        _b[16] = funiforms[24];
                        _b[17] = funiforms[25];
                        _b[18] = funiforms[26];
                        _b[19] = funiforms[27];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__pasted__polySurface32Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_1'
                        var s_ = instance.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[44];
                        _b[25] = funiforms[45];
                        _b[26] = funiforms[46];
                        _b[27] = funiforms[47];
                        _b[20] = funiforms[40];
                        _b[21] = funiforms[41];
                        _b[22] = funiforms[42];
                        _b[23] = funiforms[43];
                        _b[16] = funiforms[36];
                        _b[17] = funiforms[37];
                        _b[18] = funiforms[38];
                        _b[19] = funiforms[39];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__pasted__polySurface66Shape', shader 'pasted__pasted__pasted__FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_ncl1_2'
                        var s_ = instance.shaders.m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[8];
                        _b[25] = funiforms[9];
                        _b[26] = funiforms[10];
                        _b[27] = funiforms[11];
                        _b[20] = funiforms[4];
                        _b[21] = funiforms[5];
                        _b[22] = funiforms[6];
                        _b[23] = funiforms[7];
                        _b[16] = funiforms[0];
                        _b[17] = funiforms[1];
                        _b[18] = funiforms[2];
                        _b[19] = funiforms[3];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        s_.renderJobs = null;

                        var jobIt = renderQueues.begin;
                        var jobEnd = renderQueues.end;
                        if (itransforms[0])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface12Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface12Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[0];
                                data[1] = ftransforms[1];
                                data[2] = ftransforms[2];
                                data[3] = ftransforms[3];
                                data[4] = ftransforms[4];
                                data[5] = ftransforms[5];
                                data[6] = ftransforms[6];
                                data[7] = ftransforms[7];
                                data[8] = ftransforms[8];
                                data[9] = ftransforms[9];
                                data[10] = ftransforms[10];
                                data[11] = ftransforms[11];
                                data[12] = ftransforms[12];
                                data[13] = ftransforms[13];
                                data[14] = ftransforms[14];
                                data[15] = ftransforms[15];
                                renderJob.draw = global.draw.i;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[1])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface11Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface11Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[16];
                                data[1] = ftransforms[17];
                                data[2] = ftransforms[18];
                                data[3] = ftransforms[19];
                                data[4] = ftransforms[20];
                                data[5] = ftransforms[21];
                                data[6] = ftransforms[22];
                                data[7] = ftransforms[23];
                                data[8] = ftransforms[24];
                                data[9] = ftransforms[25];
                                data[10] = ftransforms[26];
                                data[11] = ftransforms[27];
                                data[12] = ftransforms[28];
                                data[13] = ftransforms[29];
                                data[14] = ftransforms[30];
                                data[15] = ftransforms[31];
                                renderJob.draw = global.draw.h;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[2])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface8Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface8Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[32];
                                data[1] = ftransforms[33];
                                data[2] = ftransforms[34];
                                data[3] = ftransforms[35];
                                data[4] = ftransforms[36];
                                data[5] = ftransforms[37];
                                data[6] = ftransforms[38];
                                data[7] = ftransforms[39];
                                data[8] = ftransforms[40];
                                data[9] = ftransforms[41];
                                data[10] = ftransforms[42];
                                data[11] = ftransforms[43];
                                data[12] = ftransforms[44];
                                data[13] = ftransforms[45];
                                data[14] = ftransforms[46];
                                data[15] = ftransforms[47];
                                renderJob.draw = global.draw.e;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[3])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[48];
                                data[1] = ftransforms[49];
                                data[2] = ftransforms[50];
                                data[3] = ftransforms[51];
                                data[4] = ftransforms[52];
                                data[5] = ftransforms[53];
                                data[6] = ftransforms[54];
                                data[7] = ftransforms[55];
                                data[8] = ftransforms[56];
                                data[9] = ftransforms[57];
                                data[10] = ftransforms[58];
                                data[11] = ftransforms[59];
                                data[12] = ftransforms[60];
                                data[13] = ftransforms[61];
                                data[14] = ftransforms[62];
                                data[15] = ftransforms[63];
                                renderJob.draw = global.draw.a;
                                renderJob.instance = instance;
                            }
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[48];
                                data[1] = ftransforms[49];
                                data[2] = ftransforms[50];
                                data[3] = ftransforms[51];
                                data[4] = ftransforms[52];
                                data[5] = ftransforms[53];
                                data[6] = ftransforms[54];
                                data[7] = ftransforms[55];
                                data[8] = ftransforms[56];
                                data[9] = ftransforms[57];
                                data[10] = ftransforms[58];
                                data[11] = ftransforms[59];
                                data[12] = ftransforms[60];
                                data[13] = ftransforms[61];
                                data[14] = ftransforms[62];
                                data[15] = ftransforms[63];
                                renderJob.draw = global.draw.d;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[4])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface13Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface13Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[64];
                                data[1] = ftransforms[65];
                                data[2] = ftransforms[66];
                                data[3] = ftransforms[67];
                                data[4] = ftransforms[68];
                                data[5] = ftransforms[69];
                                data[6] = ftransforms[70];
                                data[7] = ftransforms[71];
                                data[8] = ftransforms[72];
                                data[9] = ftransforms[73];
                                data[10] = ftransforms[74];
                                data[11] = ftransforms[75];
                                data[12] = ftransforms[76];
                                data[13] = ftransforms[77];
                                data[14] = ftransforms[78];
                                data[15] = ftransforms[79];
                                renderJob.draw = global.draw.f;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[5])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[80];
                                data[1] = ftransforms[81];
                                data[2] = ftransforms[82];
                                data[3] = ftransforms[83];
                                data[4] = ftransforms[84];
                                data[5] = ftransforms[85];
                                data[6] = ftransforms[86];
                                data[7] = ftransforms[87];
                                data[8] = ftransforms[88];
                                data[9] = ftransforms[89];
                                data[10] = ftransforms[90];
                                data[11] = ftransforms[91];
                                data[12] = ftransforms[92];
                                data[13] = ftransforms[93];
                                data[14] = ftransforms[94];
                                data[15] = ftransforms[95];
                                renderJob.draw = global.draw.g;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[6])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[96];
                                data[1] = ftransforms[97];
                                data[2] = ftransforms[98];
                                data[3] = ftransforms[99];
                                data[4] = ftransforms[100];
                                data[5] = ftransforms[101];
                                data[6] = ftransforms[102];
                                data[7] = ftransforms[103];
                                data[8] = ftransforms[104];
                                data[9] = ftransforms[105];
                                data[10] = ftransforms[106];
                                data[11] = ftransforms[107];
                                data[12] = ftransforms[108];
                                data[13] = ftransforms[109];
                                data[14] = ftransforms[110];
                                data[15] = ftransforms[111];
                                renderJob.draw = global.draw.c;
                                renderJob.instance = instance;
                            }
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[96];
                                data[1] = ftransforms[97];
                                data[2] = ftransforms[98];
                                data[3] = ftransforms[99];
                                data[4] = ftransforms[100];
                                data[5] = ftransforms[101];
                                data[6] = ftransforms[102];
                                data[7] = ftransforms[103];
                                data[8] = ftransforms[104];
                                data[9] = ftransforms[105];
                                data[10] = ftransforms[106];
                                data[11] = ftransforms[107];
                                data[12] = ftransforms[108];
                                data[13] = ftransforms[109];
                                data[14] = ftransforms[110];
                                data[15] = ftransforms[111];
                                renderJob.draw = global.draw.b;
                                renderJob.instance = instance;
                            }
                        }
                        renderQueues.begin = jobIt;
                        var shader = global.shaders.m_polySurface13Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface13Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface13Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(2);
                        gl.enableVertexAttribArray(3);
                        gl.enableVertexAttribArray(4);
                        var current = instance.shaders.m_polySurface13Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_polySurface8Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface8Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface8Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(5);
                        gl.enableVertexAttribArray(6);
                        gl.enableVertexAttribArray(7);
                        var current = instance.shaders.m_polySurface8Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_polySurface12Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface12Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface12Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.disableVertexAttribArray(7);
                        gl.disableVertexAttribArray(6);
                        gl.disableVertexAttribArray(5);
                        var current = instance.shaders.m_polySurface12Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_polySurface11Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface11Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface11Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        var current = instance.shaders.m_polySurface11Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var shader = global.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.enable(gl.CULL_FACE);
                        gl.disableVertexAttribArray(4);
                        var current = instance.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        var shader = global.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        var shader = global.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.enable(gl.CULL_FACE);
                        var current = instance.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        var shader = global.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1;
                        var shader = global.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.enable(gl.CULL_FACE);
                        var current = instance.shaders.m_pasted____pasted____polySurface248Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        var shader = global.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1;
                        var shader = global.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.enable(gl.CULL_FACE);
                        var current = instance.shaders.m_pasted____pasted____polySurface32Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__1.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        var shader = global.shaders.m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2;
                        var shader = global.shaders.m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.enable(gl.CULL_FACE);
                        var current = instance.shaders.m_pasted____pasted____polySurface66Shape_pasted____pasted____pasted____FBXASC230FBXASC157FBXASC144FBXASC232FBXASC180FBXASC168FBXASC0461__ncl1__2.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.disableVertexAttribArray(3);
                        gl.disableVertexAttribArray(2);
                    };

                    var fstate = instance.fstate;
                    var ostate = instance.ostate;

                    return instance;
                },

                doneInstance: function(instance)
                {
                },

                sequence: 0,

                attributes:
                {
                    "time": {t: 1, b: 0, e: 1}
                },

                textureBindings:
                [
                    {n: "gold", b: 0}
                ],

                objects:
                {
                    "pasted__pasted__polySurface248Shape[0]": 6,
                    "pasted__pasted__polySurface32Shape[0]": 3,
                    "pasted__pasted__polySurface66Shape[0]": 5,
                    "polySurface11Shape[0]": 1,
                    "polySurface12Shape[0]": 0,
                    "polySurface13Shape[0]": 4,
                    "polySurface8Shape[0]": 2
                }

            }

        },

        numFiles: 2,
        check: function (){
            return 0;
        }
    };
    return s;
}

M1.modelName = "model_one";
M1.startTime = 0.041666666666666664;
M1.endTime = 8.3333333333333339;
