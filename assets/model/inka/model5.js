var model_five = 
"";

window.M5 = function(engine)
{
    var s = {
        textures:
        {
            "gold2":
            {
                initGlobal: function (global, url, index, loaded)
                {
                    var texture = global.texture = gl.createTexture();
                    var image = global.image = new Image();
                    image.crossOrigin = "Anonymous";
                    image.onload = function ()
                    {
                        gl.bindTexture(gl.TEXTURE_2D, texture);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, this);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
                        gl.generateMipmap(gl.TEXTURE_2D);
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        loaded();
                    };
                    image.src = "//gw.alicdn.com/mt/TB1mplsPXXXXXb9XpXXXXXXXXXX-1024-1024.png";
                },

                doneGlobal: function (global)
                {
                    gl.deleteTexture(global.texture);
                },

                copy: function (global, ostate, b)
                {
                    ostate[b] = global.texture;
                }
            },

            "j":
            {
                initGlobal: function (global, url, index, loaded)
                {
                    var texture = global.texture = gl.createTexture();
                    var image = global.image = new Image();
                    image.crossOrigin = "Anonymous";
                    image.onload = function ()
                    {
                        gl.bindTexture(gl.TEXTURE_2D, texture);
                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, this);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
                        gl.generateMipmap(gl.TEXTURE_2D);
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        loaded();
                    };
                    image.src = "//gw.alicdn.com/mt/TB1UQtsPXXXXXbsXpXXXXXXXXXX-1024-1024.png";
                },

                doneGlobal: function (global)
                {
                    gl.deleteTexture(global.texture);
                },

                copy: function (global, ostate, b)
                {
                    ostate[b] = global.texture;
                }
            }

        },

        scenes:
        {
            "model_five":
            {
                shaders:
                {
                    // mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'
                    m_polySurface12Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'
                    m_polySurface8Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'pasted__pasted__qianShape', shader 'pasted__lambert4'
                    m_pasted____pasted____qianShape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'
                    m_polySurface11Shape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'pasted__qianShape', shader 'pasted__lambert4'
                    m_pasted____qianShape_pasted____lambert4:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface261Shape', shader 'pasted__pasted__phong1'
                    m_pasted____polySurface261Shape_pasted____pasted____phong1:
                    {
                    },
                    // mesh, deformer 'pasted__polySurface261Shape', shader 'pasted__pasted__lambert2'
                    m_pasted____polySurface261Shape_pasted____pasted____lambert2:
                    {
                    }
                },

                initGlobal: function(global, data)
                {
                    // mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'
                    var vsm_polySurface12Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
attribute vec2 _4;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(2.24981e-4, 1.19379e-4, 5.44838e-5) + vec3(-7.37254, 9.60781, -1.96746);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _d[0].xyz * h.x + _d[1].xyz * h.y + _d[2].xyz * h.z + _d[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _e = _d[4].xyz * k.x + _d[5].xyz * k.y + _d[6].xyz * k.z;\n\
    _f = _4;\n\
}\n\
';
                    var psm_polySurface12Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'
                    var vsm_polySurface8Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[52];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec4 _3;\n\
attribute vec4 _4;\n\
attribute vec4 _5;\n\
attribute vec4 _6;\n\
attribute vec2 _7;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(1.82902e-4, 1.49994e-4, 5.75946e-5) + vec3(-5.99327, 0.0238238, -2.03775);\n\
    vec3 c = _2;\n\
    ivec4 d = ivec4(_3);\n\
    ivec4 e = ivec4(_4);\n\
    vec4 f = _5;\n\
    vec4 g = _6;\n\
    int h = d.x;\n\
    int i = d.y;\n\
    int j = d.z;\n\
    int k = d.w;\n\
    int l = e.x;\n\
    int m = e.y;\n\
    int n = e.z;\n\
    int o = e.w;\n\
    vec4 p = f.x * _b[4 + h] + f.y * _b[4 + i] + f.z * _b[4 + j] + f.w * _b[4 + k] + g.x * _b[4 + l] + g.y * _b[4 + m] + g.z * _b[4 + n] + g.w * _b[4 + o];\n\
    vec4 q = f.x * _b[20 + h] + f.y * _b[20 + i] + f.z * _b[20 + j] + f.w * _b[20 + k] + g.x * _b[20 + l] + g.y * _b[20 + m] + g.z * _b[20 + n] + g.w * _b[20 + o];\n\
    vec4 r = f.x * _b[36 + h] + f.y * _b[36 + i] + f.z * _b[36 + j] + f.w * _b[36 + k] + g.x * _b[36 + l] + g.y * _b[36 + m] + g.z * _b[36 + n] + g.w * _b[36 + o];\n\
    vec3 s = p.xyz * b.x + q.xyz * b.y + r.xyz * b.z + vec3(p.w, q.w, r.w);\n\
    vec3 t = p.xyz * c.x + q.xyz * c.y + r.xyz * c.z;\n\
    vec3 u = p.xyz * a.x + q.xyz * a.y + r.xyz * a.z;\n\
    vec3 v = t.yzx * u.zxy - t.zxy * u.yzx;\n\
    vec3 w = _d[0].xyz * s.x + _d[1].xyz * s.y + _d[2].xyz * s.z + _d[3].xyz;\n\
    gl_Position = _b[0] * w.x + _b[1] * w.y + _b[2] * w.z + _b[3];\n\
    _e = _d[4].xyz * v.x + _d[5].xyz * v.y + _d[6].xyz * v.z;\n\
    _f = _7;\n\
}\n\
';
                    var psm_polySurface8Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__pasted__qianShape', shader 'pasted__lambert4'
                    var vsm_pasted____pasted____qianShape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[10];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec2 _3;\n\
attribute vec2 _4;\n\
attribute vec2 _5;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(4.89494e-5, 9.5938e-5, 1.89543e-5) + vec3(-1.60395, 0.035948, -1.62108);\n\
    vec3 c = _2;\n\
    ivec2 d = ivec2(_3);\n\
    vec2 e = _4;\n\
    float f = e.x;\n\
    int g = d.x;\n\
    float h = e.y;\n\
    int i = d.y;\n\
    vec4 j = f * _b[4 + g] + h * _b[4 + i];\n\
    vec4 k = f * _b[6 + g] + h * _b[6 + i];\n\
    vec4 l = f * _b[8 + g] + h * _b[8 + i];\n\
    vec3 m = j.xyz * b.x + k.xyz * b.y + l.xyz * b.z + vec3(j.w, k.w, l.w);\n\
    vec3 n = j.xyz * c.x + k.xyz * c.y + l.xyz * c.z;\n\
    vec3 o = j.xyz * a.x + k.xyz * a.y + l.xyz * a.z;\n\
    vec3 p = n.yzx * o.zxy - n.zxy * o.yzx;\n\
    vec3 q = _d[0].xyz * m.x + _d[1].xyz * m.y + _d[2].xyz * m.z + _d[3].xyz;\n\
    gl_Position = _b[0] * q.x + _b[1] * q.y + _b[2] * q.z + _b[3];\n\
    _e = _d[4].xyz * p.x + _d[5].xyz * p.y + _d[6].xyz * p.z;\n\
    _f = _5;\n\
}\n\
';
                    var psm_pasted____pasted____qianShape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'
                    var vsm_polySurface11Shape_pasted____lambert4 =
'precision highp float;\n\
uniform vec4 _b[7];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute float _3;\n\
attribute vec2 _4;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(2.7848e-5, 2.78256e-5, 5.16374e-6) + vec3(-0.912736, 4.08025, 1.43886);\n\
    vec3 c = _2;\n\
    int d = int(_3);\n\
    vec4 e = _b[4 + d];\n\
    vec4 f = _b[5 + d];\n\
    vec4 g = _b[6 + d];\n\
    vec3 h = e.xyz * b.x + f.xyz * b.y + g.xyz * b.z + vec3(e.w, f.w, g.w);\n\
    vec3 i = e.xyz * c.x + f.xyz * c.y + g.xyz * c.z;\n\
    vec3 j = e.xyz * a.x + f.xyz * a.y + g.xyz * a.z;\n\
    vec3 k = i.yzx * j.zxy - i.zxy * j.yzx;\n\
    vec3 l = _d[0].xyz * h.x + _d[1].xyz * h.y + _d[2].xyz * h.z + _d[3].xyz;\n\
    gl_Position = _b[0] * l.x + _b[1] * l.y + _b[2] * l.z + _b[3];\n\
    _e = _d[4].xyz * k.x + _d[5].xyz * k.y + _d[6].xyz * k.z;\n\
    _f = _4;\n\
}\n\
';
                    var psm_polySurface11Shape_pasted____lambert4 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface261Shape', shader 'pasted__pasted__phong1'
                    var vsm_pasted____polySurface261Shape_pasted____pasted____phong1 =
'precision highp float;\n\
uniform vec4 _b[19];\n\
uniform vec4 _c[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec4 _3;\n\
attribute float _6;\n\
attribute vec4 _4;\n\
attribute float _5;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(2.57363e-4, 1.05323e-4, 1.39804e-4) + vec3(-8.44524, 14.7457, -4.67718);\n\
    vec3 c = _2;\n\
    ivec4 d = ivec4(_3);\n\
    vec4 e = _4;\n\
    float f = _5;\n\
    int g = d.x;\n\
    int h = d.y;\n\
    int i = d.z;\n\
    int j = d.w;\n\
    int k = int(_6);\n\
    vec4 l = e.x * _b[4 + g] + e.y * _b[4 + h] + e.z * _b[4 + i] + e.w * _b[4 + j] + f * _b[4 + k];\n\
    vec4 m = e.x * _b[9 + g] + e.y * _b[9 + h] + e.z * _b[9 + i] + e.w * _b[9 + j] + f * _b[9 + k];\n\
    vec4 n = e.x * _b[14 + g] + e.y * _b[14 + h] + e.z * _b[14 + i] + e.w * _b[14 + j] + f * _b[14 + k];\n\
    vec3 o = l.xyz * b.x + m.xyz * b.y + n.xyz * b.z + vec3(l.w, m.w, n.w);\n\
    vec3 p = l.xyz * c.x + m.xyz * c.y + n.xyz * c.z;\n\
    vec3 q = l.xyz * a.x + m.xyz * a.y + n.xyz * a.z;\n\
    vec3 r = p.yzx * q.zxy - p.zxy * q.yzx;\n\
    vec3 s = _c[0].xyz * o.x + _c[1].xyz * o.y + _c[2].xyz * o.z + _c[3].xyz;\n\
    gl_Position = _b[0] * s.x + _b[1] * s.y + _b[2] * s.z + _b[3];\n\
    _d = _c[4].xyz * r.x + _c[5].xyz * r.y + _c[6].xyz * r.z;\n\
    _e = s;\n\
}\n\
';
                    var psm_pasted____polySurface261Shape_pasted____pasted____phong1 =
'precision highp float;\n\
uniform float f_f;\n\
varying vec3 _d;\n\
varying vec3 _e;\n\
void main()\n\
{\n\
    vec3 a = (_d);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f;\n\
    vec3 d = _e;\n\
    vec3 e = d * d;\n\
    vec3 f = c * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 g = c * vec3(0.408248, -0.408248, -0.816497);\n\
    vec3 h = (vec3(0.408248, -0.408248, -0.816497) - (g.x + g.y + g.z) * 2.0 * c) * -(d * inversesqrt(e.x + e.y + e.z));\n\
    vec3 i = vec3(max(f.x + f.y + f.z, 0.0) + 0.4) + vec3(pow(max(h.x + h.y + h.z, 0.0), 20.0) * 0.3);\n\
    gl_FragColor = vec4(i, 1.0);\n\
}\n\
';

                    // mesh, deformer 'pasted__polySurface261Shape', shader 'pasted__pasted__lambert2'
                    var vsm_pasted____polySurface261Shape_pasted____pasted____lambert2 =
'precision highp float;\n\
uniform vec4 _b[19];\n\
uniform vec4 _d[7];\n\
attribute vec3 _0;\n\
attribute vec3 _1;\n\
attribute vec3 _2;\n\
attribute vec4 _3;\n\
attribute float _6;\n\
attribute vec4 _4;\n\
attribute float _5;\n\
attribute vec2 _7;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = _0;\n\
    vec3 b = _1 * vec3(2.57363e-4, 1.05323e-4, 1.39804e-4) + vec3(-8.44524, 14.7457, -4.67718);\n\
    vec3 c = _2;\n\
    ivec4 d = ivec4(_3);\n\
    vec4 e = _4;\n\
    float f = _5;\n\
    int g = d.x;\n\
    int h = d.y;\n\
    int i = d.z;\n\
    int j = d.w;\n\
    int k = int(_6);\n\
    vec4 l = e.x * _b[4 + g] + e.y * _b[4 + h] + e.z * _b[4 + i] + e.w * _b[4 + j] + f * _b[4 + k];\n\
    vec4 m = e.x * _b[9 + g] + e.y * _b[9 + h] + e.z * _b[9 + i] + e.w * _b[9 + j] + f * _b[9 + k];\n\
    vec4 n = e.x * _b[14 + g] + e.y * _b[14 + h] + e.z * _b[14 + i] + e.w * _b[14 + j] + f * _b[14 + k];\n\
    vec3 o = l.xyz * b.x + m.xyz * b.y + n.xyz * b.z + vec3(l.w, m.w, n.w);\n\
    vec3 p = l.xyz * c.x + m.xyz * c.y + n.xyz * c.z;\n\
    vec3 q = l.xyz * a.x + m.xyz * a.y + n.xyz * a.z;\n\
    vec3 r = p.yzx * q.zxy - p.zxy * q.yzx;\n\
    vec3 s = _d[0].xyz * o.x + _d[1].xyz * o.y + _d[2].xyz * o.z + _d[3].xyz;\n\
    gl_Position = _b[0] * s.x + _b[1] * s.y + _b[2] * s.z + _b[3];\n\
    _e = _d[4].xyz * r.x + _d[5].xyz * r.y + _d[6].xyz * r.z;\n\
    _f = _7;\n\
}\n\
';
                    var psm_pasted____polySurface261Shape_pasted____pasted____lambert2 =
'precision highp float;\n\
uniform sampler2D _c;\n\
uniform float f_f;\n\
varying vec3 _e;\n\
varying vec2 _f;\n\
void main()\n\
{\n\
    vec3 a = (_e);\n\
    vec3 b = a * a;\n\
    vec3 c = a * inversesqrt(b.x + b.y + b.z) * f_f * vec3(-0.408248, 0.408248, 0.816497);\n\
    vec3 d = texture2D(_c, _f * vec2(1.0, -1.0) + vec2(0.0, 1.0)).xyz * vec3(max(c.x + c.y + c.z, 0.0) * 0.8);\n\
    gl_FragColor = vec4(d, 1.0);\n\
}\n\
';

                    var d = new engine.Decompressor(new Uint8Array(data, 0));
                    global.buffers = 
                    [
                        d.decompress16(105),
                        d.decompress16(313),
                        d.decompress16(105),
                        d.decompress16(313),
                        d.decompress16(105),
                        d.decompress16(313),
                        d.decompress16(105),
                        d.decompress16(313),
                        d.decompress16(105),
                        d.decompress16(313),
                        d.decompress16(105),
                        d.decompress16(313),
                        d.decompress16(135),
                        d.decompress16(135),
                        d.decompress16(135),
                        d.decompress16(135),
                        d.decompress16(135),
                        d.decompress16(135),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(104),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(135),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(105),
                        d.decompress16(104),
                        d.decompress16(104),
                    ];
                    var b2 = d.decompress16(1012);
                    var vb = new Float32Array(1012);
                    for (var i = 0, j = 0; i < 506; ++i, j += 2)
                    {
                        vb[j + 0] = b2[i + 0] * 1.5259e-5;
                        vb[j + 1] = b2[i + 506] * 1.5259e-5;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(8096);
                    var b2 = d.decompress16(1518);
                    var vb = new Float32Array(9614);
                    for (var i = 0, j = 0; i < 506; ++i, j += 19)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 506];
                        vb[j + 2] = b2[i + 1012];
                        vb[j + 3] = b1[i + 0];
                        vb[j + 4] = b1[i + 506];
                        vb[j + 5] = b1[i + 1012];
                        vb[j + 6] = b1[i + 1518];
                        vb[j + 7] = b1[i + 2024] * 0.00392156;
                        vb[j + 8] = b1[i + 2530] * 0.00392156;
                        vb[j + 9] = b1[i + 3036] * 0.00392156;
                        vb[j + 10] = b1[i + 3542] * 0.00392156;
                        vb[j + 11] = (b1[i + 4048] << 24) * 4.65661e-10;
                        vb[j + 12] = (b1[i + 4554] << 24) * 4.65661e-10;
                        vb[j + 13] = (b1[i + 5060] << 24) * 4.65661e-10;
                        vb[j + 14] = (b1[i + 5566] << 24) * 4.65661e-10;
                        vb[j + 15] = (b1[i + 6072] << 24) * 4.65661e-10;
                        vb[j + 16] = (b1[i + 6578] << 24) * 4.65661e-10;
                        vb[j + 17] = b1[i + 7084];
                        vb[j + 18] = b1[i + 7590] * 0.00392156;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(5166);
                    var b2 = d.decompress16(3690);
                    var vb = new Float32Array(8856);
                    for (var i = 0, j = 0; i < 738; ++i, j += 12)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 738];
                        vb[j + 2] = b2[i + 1476];
                        vb[j + 3] = b2[i + 2214] * 1.5259e-5;
                        vb[j + 4] = b2[i + 2952] * 1.5259e-5;
                        vb[j + 5] = (b1[i + 0] << 24) * 4.65661e-10;
                        vb[j + 6] = (b1[i + 738] << 24) * 4.65661e-10;
                        vb[j + 7] = (b1[i + 1476] << 24) * 4.65661e-10;
                        vb[j + 8] = (b1[i + 2214] << 24) * 4.65661e-10;
                        vb[j + 9] = (b1[i + 2952] << 24) * 4.65661e-10;
                        vb[j + 10] = (b1[i + 3690] << 24) * 4.65661e-10;
                        vb[j + 11] = b1[i + 4428];
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer2 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(79160);
                    var b2 = d.decompress16(39580);
                    var vb = new Float32Array(118740);
                    for (var i = 0, j = 0; i < 7916; ++i, j += 15)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 7916];
                        vb[j + 2] = b2[i + 15832];
                        vb[j + 3] = b2[i + 23748] * 1.5259e-5;
                        vb[j + 4] = b2[i + 31664] * 1.5259e-5;
                        vb[j + 5] = (b1[i + 0] << 24) * 4.65661e-10;
                        vb[j + 6] = (b1[i + 7916] << 24) * 4.65661e-10;
                        vb[j + 7] = (b1[i + 15832] << 24) * 4.65661e-10;
                        vb[j + 8] = (b1[i + 23748] << 24) * 4.65661e-10;
                        vb[j + 9] = (b1[i + 31664] << 24) * 4.65661e-10;
                        vb[j + 10] = (b1[i + 39580] << 24) * 4.65661e-10;
                        vb[j + 11] = b1[i + 47496];
                        vb[j + 12] = b1[i + 55412];
                        vb[j + 13] = b1[i + 63328] * 0.00392156;
                        vb[j + 14] = b1[i + 71244] * 0.00392156;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer3 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);
                    var b1 = d.decompress8(40854);
                    var b2 = d.decompress16(9285);
                    var vb = new Float32Array(50139);
                    for (var i = 0, j = 0; i < 1857; ++i, j += 27)
                    {
                        vb[j + 0] = b2[i + 0];
                        vb[j + 1] = b2[i + 1857];
                        vb[j + 2] = b2[i + 3714];
                        vb[j + 3] = b2[i + 5571] * 1.5259e-5;
                        vb[j + 4] = b2[i + 7428] * 1.5259e-5;
                        vb[j + 5] = b1[i + 0];
                        vb[j + 6] = b1[i + 1857];
                        vb[j + 7] = b1[i + 3714];
                        vb[j + 8] = b1[i + 5571];
                        vb[j + 9] = b1[i + 7428];
                        vb[j + 10] = b1[i + 9285];
                        vb[j + 11] = b1[i + 11142];
                        vb[j + 12] = b1[i + 12999];
                        vb[j + 13] = b1[i + 14856] * 0.00392156;
                        vb[j + 14] = b1[i + 16713] * 0.00392156;
                        vb[j + 15] = b1[i + 18570] * 0.00392156;
                        vb[j + 16] = b1[i + 20427] * 0.00392156;
                        vb[j + 17] = b1[i + 22284] * 0.00392156;
                        vb[j + 18] = b1[i + 24141] * 0.00392156;
                        vb[j + 19] = b1[i + 25998] * 0.00392156;
                        vb[j + 20] = b1[i + 27855] * 0.00392156;
                        vb[j + 21] = (b1[i + 29712] << 24) * 4.65661e-10;
                        vb[j + 22] = (b1[i + 31569] << 24) * 4.65661e-10;
                        vb[j + 23] = (b1[i + 33426] << 24) * 4.65661e-10;
                        vb[j + 24] = (b1[i + 35283] << 24) * 4.65661e-10;
                        vb[j + 25] = (b1[i + 37140] << 24) * 4.65661e-10;
                        vb[j + 26] = (b1[i + 38997] << 24) * 4.65661e-10;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer4 = gl.createBuffer());
                    gl.bufferData(gl.ARRAY_BUFFER, vb, gl.STATIC_DRAW);

                    var b = d.decompress16(33690);
                    var ib = new Uint16Array(33690);
                    for (var i = 0, j = 0; i < 11230; ++i, j += 3)
                    {
                        ib[j] = b[i];
                        ib[j + 1] = b[i + 11230];
                        ib[j + 2] = b[i + 22460];
                    }
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0 = gl.createBuffer());
                    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, ib, gl.STATIC_DRAW);

                    var shaders = global.shaders;
                    {
                        var shader = shaders.m_polySurface12Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface12Shape_pasted____lambert4, "mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface12Shape_pasted____lambert4, "mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_polySurface8Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface8Shape_pasted____lambert4, "mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface8Shape_pasted____lambert4, "mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.bindAttribLocation(program, 6, '_6');
                        gl.bindAttribLocation(program, 7, '_7');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____pasted____qianShape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_pasted____pasted____qianShape_pasted____lambert4, "mesh, deformer 'pasted__pasted__qianShape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_pasted____pasted____qianShape_pasted____lambert4, "mesh, deformer 'pasted__pasted__qianShape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_polySurface11Shape_pasted____lambert4;
                        var vertexShader = engine.createVertexShader(vsm_polySurface11Shape_pasted____lambert4, "mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'");
                        var pixelShader = engine.createPixelShader(psm_polySurface11Shape_pasted____lambert4, "mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface261Shape_pasted____pasted____phong1;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface261Shape_pasted____pasted____phong1, "mesh, deformer 'pasted__polySurface261Shape', shader 'pasted__pasted__phong1'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface261Shape_pasted____pasted____phong1, "mesh, deformer 'pasted__polySurface261Shape', shader 'pasted__pasted__phong1'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 6, '_6');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        shader._b = gl.getUniformLocation(program, '_b');
                        shader._c = gl.getUniformLocation(program, '_c');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                    {
                        var shader = shaders.m_pasted____polySurface261Shape_pasted____pasted____lambert2;
                        var vertexShader = engine.createVertexShader(vsm_pasted____polySurface261Shape_pasted____pasted____lambert2, "mesh, deformer 'pasted__polySurface261Shape', shader 'pasted__pasted__lambert2'");
                        var pixelShader = engine.createPixelShader(psm_pasted____polySurface261Shape_pasted____pasted____lambert2, "mesh, deformer 'pasted__polySurface261Shape', shader 'pasted__pasted__lambert2'");
                        var program = shader.program = gl.createProgram();
                        gl.attachShader(program, vertexShader);
                        gl.attachShader(program, pixelShader);
                        gl.bindAttribLocation(program, 0, '_0');
                        gl.bindAttribLocation(program, 1, '_1');
                        gl.bindAttribLocation(program, 2, '_2');
                        gl.bindAttribLocation(program, 3, '_3');
                        gl.bindAttribLocation(program, 6, '_6');
                        gl.bindAttribLocation(program, 4, '_4');
                        gl.bindAttribLocation(program, 5, '_5');
                        gl.bindAttribLocation(program, 7, '_7');
                        gl.linkProgram(program);
                        gl.deleteShader(vertexShader);
                        gl.deleteShader(pixelShader);
                        gl.useProgram(program);
                        shader._b = gl.getUniformLocation(program, '_b');
                        gl.uniform1i(gl.getUniformLocation(program, '_c'), 0);
                        shader._d = gl.getUniformLocation(program, '_d');
                        shader.f_f = gl.getUniformLocation(program, 'f_f');
                    }
                },

                doneGlobal: function(global)
                {
                    gl.deleteBuffer(global.shaderInputBuffer0);
                    gl.deleteBuffer(global.shaderInputBuffer1);
                    gl.deleteBuffer(global.shaderInputBuffer2);
                    gl.deleteBuffer(global.shaderInputBuffer3);
                    gl.deleteBuffer(global.shaderInputBuffer4);
                    gl.deleteBuffer(global.indexBuffer0);
                    gl.deleteProgram(global.shaders.m_polySurface12Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_polySurface8Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_pasted____pasted____qianShape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_polySurface11Shape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_pasted____qianShape_pasted____lambert4.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface261Shape_pasted____pasted____phong1.program);
                    gl.deleteProgram(global.shaders.m_pasted____polySurface261Shape_pasted____pasted____lambert2.program);
                },

                render: {
                    m_polySurface12Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface12Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface12Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_polySurface8Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface8Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface8Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____pasted____qianShape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____pasted____qianShape_pasted____lambert4;
                        var transfer = instance.shaders.m_pasted____pasted____qianShape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_polySurface11Shape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_polySurface11Shape_pasted____lambert4;
                        var transfer = instance.shaders.m_polySurface11Shape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____qianShape_pasted____lambert4_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____pasted____qianShape_pasted____lambert4;
                        var transfer = instance.shaders.m_pasted____qianShape_pasted____lambert4.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface261Shape_pasted____pasted____phong1_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface261Shape_pasted____pasted____phong1;
                        var transfer = instance.shaders.m_pasted____polySurface261Shape_pasted____pasted____phong1.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _c = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _c[0] = G;
                        _c[1] = H;
                        _c[2] = I;
                        _c[4] = J;
                        _c[5] = K;
                        _c[6] = L;
                        _c[8] = M;
                        _c[9] = N;
                        _c[10] = O;
                        _c[12] = q * m + u * n + y * o + C * p;
                        _c[13] = r * m + v * n + z * o + D * p;
                        _c[14] = s * m + w * n + A * o + E * p;
                        _c[16] = P;
                        _c[17] = Q;
                        _c[18] = R;
                        _c[20] = N * I - O * H;
                        _c[21] = O * G - M * I;
                        _c[22] = M * H - N * G;
                        _c[24] = H * L - I * K;
                        _c[25] = I * J - G * L;
                        _c[26] = G * K - H * J;
                        gl.uniform4fv(shader._c, _c);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    },
                    m_pasted____polySurface261Shape_pasted____pasted____lambert2_5: function(renderJob)
                    {
                        var instance = renderJob.instance;
                        var global = instance.global;
                        var shader = global.shaders.m_pasted____polySurface261Shape_pasted____pasted____lambert2;
                        var transfer = instance.shaders.m_pasted____polySurface261Shape_pasted____pasted____lambert2.transfer;
                        var _a = transfer._a;
                        var matrix = renderJob.data;
                        var flip;
                        var _d = instance.fu0_28;
                        var a = matrix[0];
                        var b = matrix[1];
                        var c = matrix[2];
                        var d = matrix[3];
                        var e = matrix[4];
                        var f = matrix[5];
                        var g = matrix[6];
                        var h = matrix[7];
                        var i = matrix[8];
                        var j = matrix[9];
                        var k = matrix[10];
                        var l = matrix[11];
                        var m = matrix[12];
                        var n = matrix[13];
                        var o = matrix[14];
                        var p = matrix[15];
                        var q = _a[0];
                        var r = _a[1];
                        var s = _a[2];
                        var t = _a[3];
                        var u = _a[4];
                        var v = _a[5];
                        var w = _a[6];
                        var x = _a[7];
                        var y = _a[8];
                        var z = _a[9];
                        var A = _a[10];
                        var B = _a[11];
                        var C = _a[12];
                        var D = _a[13];
                        var E = _a[14];
                        var F = _a[15];
                        var G = q * a + u * b + y * c + C * d;
                        var H = r * a + v * b + z * c + D * d;
                        var I = s * a + w * b + A * c + E * d;
                        var J = q * e + u * f + y * g + C * h;
                        var K = r * e + v * f + z * g + D * h;
                        var L = s * e + w * f + A * g + E * h;
                        var M = q * i + u * j + y * k + C * l;
                        var N = r * i + v * j + z * k + D * l;
                        var O = s * i + w * j + A * k + E * l;
                        var P = K * O - L * N;
                        var Q = L * M - J * O;
                        var R = J * N - K * M;
                        flip = G * P + H * Q + I * R < 0.0;
                        _d[0] = G;
                        _d[1] = H;
                        _d[2] = I;
                        _d[4] = J;
                        _d[5] = K;
                        _d[6] = L;
                        _d[8] = M;
                        _d[9] = N;
                        _d[10] = O;
                        _d[12] = q * m + u * n + y * o + C * p;
                        _d[13] = r * m + v * n + z * o + D * p;
                        _d[14] = s * m + w * n + A * o + E * p;
                        _d[16] = P;
                        _d[17] = Q;
                        _d[18] = R;
                        _d[20] = N * I - O * H;
                        _d[21] = O * G - M * I;
                        _d[22] = M * H - N * G;
                        _d[24] = H * L - I * K;
                        _d[25] = I * J - G * L;
                        _d[26] = G * K - H * J;
                        gl.uniform4fv(shader._d, _d);
                        gl.uniform1f(shader.f_f, flip ? -1.0 : 1.0);
                        gl.cullFace(flip ? gl.FRONT : gl.BACK);
                        renderJob.draw(instance, shader);
                        gl.uniform1f(shader.f_f, flip ? 1.0 : -1.0);
                        gl.cullFace(flip ? gl.BACK : gl.FRONT);
                        renderJob.draw(instance, shader);
                    }
                },
                draw: {
                    a: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer2);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 48, 20);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 48, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 48, 32);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 48, 44);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 48, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 1404, gl.UNSIGNED_SHORT, 0);
                    },
                    b: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer2);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 48, 25652);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 48, 25632);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 48, 25664);
                        gl.vertexAttribPointer(3, 1, gl.FLOAT, false, 48, 25676);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 48, 25644);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 720, gl.UNSIGNED_SHORT, 2808);
                    },
                    c: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer3);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 60, 20);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 60, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 60, 32);
                        gl.vertexAttribPointer(3, 2, gl.FLOAT, false, 60, 44);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 60, 52);
                        gl.vertexAttribPointer(5, 2, gl.FLOAT, false, 60, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 10932, gl.UNSIGNED_SHORT, 4248);
                    },
                    d: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer3);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 60, 237512);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 60, 237480);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 60, 237500);
                        gl.vertexAttribPointer(3, 2, gl.FLOAT, false, 60, 237524);
                        gl.vertexAttribPointer(4, 2, gl.FLOAT, false, 60, 237532);
                        gl.vertexAttribPointer(5, 2, gl.FLOAT, false, 60, 237492);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 10932, gl.UNSIGNED_SHORT, 26112);
                    },
                    e: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer4);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 108, 84);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 108, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 108, 96);
                        gl.vertexAttribPointer(3, 4, gl.FLOAT, false, 108, 36);
                        gl.vertexAttribPointer(4, 4, gl.FLOAT, false, 108, 20);
                        gl.vertexAttribPointer(5, 4, gl.FLOAT, false, 108, 68);
                        gl.vertexAttribPointer(6, 4, gl.FLOAT, false, 108, 52);
                        gl.vertexAttribPointer(7, 2, gl.FLOAT, false, 108, 12);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 7398, gl.UNSIGNED_SHORT, 47976);
                    },
                    f: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 76, 16916);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 76, 16872);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 76, 16928);
                        gl.vertexAttribPointer(3, 4, gl.FLOAT, false, 76, 16884);
                        gl.vertexAttribPointer(6, 1, gl.FLOAT, false, 76, 16940);
                        gl.vertexAttribPointer(4, 4, gl.FLOAT, false, 76, 16900);
                        gl.vertexAttribPointer(5, 1, gl.FLOAT, false, 76, 16944);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 1368, gl.UNSIGNED_SHORT, 64644);
                    },
                    g: function(instance, shader)
                    {
                        var global = instance.global;
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0);
                        gl.vertexAttribPointer(7, 2, gl.FLOAT, false, 8, 0);
                        gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer1);
                        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 76, 44);
                        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 76, 0);
                        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 76, 56);
                        gl.vertexAttribPointer(3, 4, gl.FLOAT, false, 76, 12);
                        gl.vertexAttribPointer(6, 1, gl.FLOAT, false, 76, 68);
                        gl.vertexAttribPointer(4, 4, gl.FLOAT, false, 76, 28);
                        gl.vertexAttribPointer(5, 1, gl.FLOAT, false, 76, 72);
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);
                        gl.drawElements(gl.TRIANGLES, 936, gl.UNSIGNED_SHORT, 62772);
                    }
                },

                createInstance: function(global, renderer)
                {
                    var instance = 
                    {
                        global: global,
                        renderer: renderer,
                        ids: new Uint32Array(6),
                        fstate: new Float32Array(1), ostate: [], 
                        funiforms: new Float32Array(324), ouniforms: [], 
                        shaders:
                        {
                            m_polySurface12Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(28), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_polySurface8Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(208), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____pasted____qianShape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(40), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_polySurface11Shape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(28), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____qianShape_pasted____lambert4:
                            {
                                uniform: {_b: new Float32Array(40), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface261Shape_pasted____pasted____phong1:
                            {
                                uniform: {_b: new Float32Array(76)},
                                transfer: {_a: new Float32Array(16)},
                            },
                            m_pasted____polySurface261Shape_pasted____pasted____lambert2:
                            {
                                uniform: {_b: new Float32Array(76), _c: null},
                                transfer: {_a: new Float32Array(16)},
                            }
                        },
                        itransforms: new Int32Array(6), ftransforms: new Float32Array(96), 
                        fboundingBoxes: new Float32Array(36), 
                        sceneSequence: 0,
                        deformerSequence: 0,
                        renderSequence: 0,
                        viewProjectionMatrix: new Float32Array(16),
                        fu0_28: new Float32Array(28),
                    };

                    var particlePools = instance.particlePools = {};

                    instance.update = function()
                    {
                        ++instance.sceneSequence;

                        var fstate = instance.fstate;
                        var ostate = instance.ostate;
                        var buffers = global.buffers;
                        var funiforms = instance.funiforms;
                        var ouniforms = instance.ouniforms;
                        var itransforms = instance.itransforms;
                        var ftransforms = instance.ftransforms;
                        var fboundingBoxes = instance.fboundingBoxes;

                        var a = fstate[0];
                        var b;
                        if (a < 0.0)
                        {
                            b = 0.0;
                        }
                        else
                        {
                            if (a < 4.16666)
                            {
                                b = (engine.eCT(buffers[30], a * 24.0 + 1.0) * 4.85715e-6 + -0.318313) * 0.5;
                            }
                            else
                            {
                                b = -0.0156404;
                            }
                        }
                        var c = fstate[0];
                        var d;
                        if (c < 0.0)
                        {
                            d = 0.0;
                        }
                        else
                        {
                            if (c < 4.16666)
                            {
                                d = (engine.eCT(buffers[29], c * 24.0 + 1.0) * 5.3508e-6 + -0.139939) * 0.5;
                            }
                            else
                            {
                                d = 0.0381602;
                            }
                        }
                        var e = fstate[0];
                        var f;
                        if (e < 0.0)
                        {
                            f = 0.0;
                        }
                        else
                        {
                            if (e < 4.16666)
                            {
                                f = (engine.eCT(buffers[28], e * 24.0 + 1.0) * 1.1514e-5 + -0.407177) * 0.5;
                            }
                            else
                            {
                                f = 0.070444;
                            }
                        }
                        var g = fstate[0];
                        var h;
                        if (g < 0.0)
                        {
                            h = -0.258007;
                        }
                        else
                        {
                            if (g < 4.16666)
                            {
                                h = engine.eCT(buffers[33], g * 24.0 + 1.0) * 3.37109e-5 + -0.258007;
                            }
                            else
                            {
                                h = 0.179046;
                            }
                        }
                        var i = fstate[0];
                        var j;
                        if (i < 0.0)
                        {
                            j = 4.59072;
                        }
                        else
                        {
                            if (i < 4.16666)
                            {
                                j = engine.eCT(buffers[32], i * 24.0 + 1.0) * 3.28659e-6 + 4.37533;
                            }
                            else
                            {
                                j = 4.59066;
                            }
                        }
                        var k = fstate[0];
                        var l;
                        if (k < 0.0)
                        {
                            l = 0.0;
                        }
                        else
                        {
                            if (k < 4.16666)
                            {
                                l = engine.eCT(buffers[31], k * 24.0 + 1.0) * 6.82665e-5 + -2.5981;
                            }
                            else
                            {
                                l = 0.706939;
                            }
                        }
                        var m = Math.cos(f);
                        var n = Math.sin(f);
                        var o = Math.cos(d);
                        var p = Math.sin(d);
                        var q = Math.cos(b);
                        var r = Math.sin(b);
                        var s = q * o * n - r * p * m;
                        var t = q * p * m + r * o * n;
                        var u = q * -p * n + r * o * m;
                        var v = q * o * m - r * -p * n;
                        var w = s * 0.512508 + v * 0.48717 + u * 0.512508 - t * 0.48717;
                        var x = t * 0.512508 + v * 0.512508 + s * 0.48717 - u * 0.48717;
                        var y = u * 0.512508 + v * 0.48717 + t * 0.48717 - s * 0.512508;
                        var z = v * 0.512508 - s * 0.48717 - t * 0.512508 - u * 0.48717;
                        var A = w * w;
                        var B = x * x;
                        var C = y * y;
                        var D = z * z;
                        var E = w * x;
                        var F = x * y;
                        var G = w * y;
                        var H = z * w;
                        var I = z * x;
                        var J = z * y;
                        var K = D + A - B - C;
                        var L = (E + J) * 2.0;
                        var M = (G - I) * 2.0;
                        var N = (E - J) * 2.0;
                        var O = D - A + B - C;
                        var P = (F + H) * 2.0;
                        var Q = (G + I) * 2.0;
                        var R = (F - H) * 2.0;
                        var S = D - A - B + C;
                        var T = fstate[0];
                        var U;
                        if (T < 0.0416666)
                        {
                            U = -1.09813e-17;
                        }
                        else
                        {
                            if (T < 4.16666)
                            {
                                U = (engine.eCT(buffers[25], T * 24.0 + -5.96046e-8) * 3.05886e-5 + -0.979937) * 0.5;
                            }
                            else
                            {
                                U = -0.0217457;
                            }
                        }
                        var V = fstate[0];
                        var W;
                        if (V < 0.0416666)
                        {
                            W = 0.12385;
                        }
                        else
                        {
                            if (V < 4.16666)
                            {
                                W = (engine.eCT(buffers[24], V * 24.0 + -5.96046e-8) * 9.35679e-6 + -0.147968) * 0.5;
                            }
                            else
                            {
                                W = 0.0227976;
                            }
                        }
                        var X = fstate[0];
                        var Y;
                        if (X < 0.0416666)
                        {
                            Y = -1.77663e-9;
                        }
                        else
                        {
                            if (X < 4.16666)
                            {
                                Y = (engine.eCT(buffers[23], X * 24.0 + -5.96046e-8) * 1.29224e-5 + -0.514919) * 0.5;
                            }
                            else
                            {
                                Y = 0.0627955;
                            }
                        }
                        var Z = Math.cos(Y);
                        var ab = Math.sin(Y);
                        var bb = Math.cos(W);
                        var cb = Math.sin(W);
                        var db = Math.cos(U);
                        var eb = Math.sin(U);
                        var fb = db * bb * ab - eb * cb * Z;
                        var gb = db * cb * Z + eb * bb * ab;
                        var hb = db * -cb * ab + eb * bb * Z;
                        var ib = db * bb * Z - eb * -cb * ab;
                        var jb = fb * 3.12052e-18 + ib * 0.0509619 + hb * 0.998701 - gb * 6.11528e-17;
                        var kb = gb * 3.12052e-18 + ib * 0.998701 + fb * 6.11528e-17 - hb * 0.0509619;
                        var lb = hb * 3.12052e-18 + ib * 6.11528e-17 + gb * 0.0509619 - fb * 0.998701;
                        var mb = ib * 3.12052e-18 - fb * 0.0509619 - gb * 0.998701 - hb * 6.11528e-17;
                        var nb = jb * jb;
                        var ob = kb * kb;
                        var pb = lb * lb;
                        var qb = mb * mb;
                        var rb = jb * kb;
                        var sb = kb * lb;
                        var tb = jb * lb;
                        var ub = mb * jb;
                        var vb = mb * kb;
                        var wb = mb * lb;
                        var xb = qb + nb - ob - pb;
                        var yb = (rb + wb) * 2.0;
                        var zb = (tb - vb) * 2.0;
                        var Ab = (rb - wb) * 2.0;
                        var Bb = qb - nb + ob - pb;
                        var Cb = (sb + ub) * 2.0;
                        var Db = (tb + vb) * 2.0;
                        var Eb = (sb - ub) * 2.0;
                        var Fb = qb - nb - ob + pb;
                        var Gb = K * xb + N * yb + Q * zb;
                        var Hb = L * xb + O * yb + R * zb;
                        var Ib = M * xb + P * yb + S * zb;
                        var Jb = K * Ab + N * Bb + Q * Cb;
                        var Kb = L * Ab + O * Bb + R * Cb;
                        var Lb = M * Ab + P * Bb + S * Cb;
                        var Mb = K * Db + N * Eb + Q * Fb;
                        var Nb = L * Db + O * Eb + R * Fb;
                        var Ob = M * Db + P * Eb + S * Fb;
                        var Pb = K * -0.387872 + N * 0.17076 + Q * 1.01941 + l;
                        var Qb = L * -0.387872 + O * 0.17076 + R * 1.01941 + j;
                        var Rb = M * -0.387872 + P * 0.17076 + S * 1.01941 + h;
                        var Sb = fstate[0];
                        var Tb;
                        if (Sb >= 0.0 & Sb < 5.41666)
                        {
                            Tb = engine.eCT(buffers[34], Sb * 24.0 + 1.0) * 3.48902e-6 * 0.5;
                        }
                        else
                        {
                            Tb = 0.0;
                        }
                        var Ub = Math.cos(Tb);
                        var Vb = Math.sin(Tb);
                        var Wb = Ub * 0.999373 + Vb * 0.0353989;
                        var Xb = Ub * 0.0353989 - Vb * 0.999373;
                        var Yb = Vb * 6.1194e-17 + Ub * 2.16756e-18;
                        var Zb = Ub * 6.1194e-17 - Vb * 2.16756e-18;
                        var ac = Wb * Wb;
                        var bc = Xb * Xb;
                        var cc = Yb * Yb;
                        var dc = Zb * Zb;
                        var ec = Wb * Xb;
                        var fc = Xb * Yb;
                        var gc = Wb * Yb;
                        var hc = Zb * Wb;
                        var ic = Zb * Xb;
                        var jc = Zb * Yb;
                        var kc = dc + ac - bc - cc;
                        var lc = (ec + jc) * 2.0;
                        var mc = (gc - ic) * 2.0;
                        var nc = (ec - jc) * 2.0;
                        var oc = dc - ac + bc - cc;
                        var pc = (fc + hc) * 2.0;
                        var qc = (gc + ic) * 2.0;
                        var rc = (fc - hc) * 2.0;
                        var sc = dc - ac - bc + cc;
                        var tc = K * kc + N * lc + Q * mc;
                        var uc = L * kc + O * lc + R * mc;
                        var vc = M * kc + P * lc + S * mc;
                        var wc = K * nc + N * oc + Q * pc;
                        var xc = L * nc + O * oc + R * pc;
                        var yc = M * nc + P * oc + S * pc;
                        var zc = K * qc + N * rc + Q * sc;
                        var Ac = L * qc + O * rc + R * sc;
                        var Bc = M * qc + P * rc + S * sc;
                        var Cc = K * 2.50573 + N * 1.19349e-15 + Q * -2.78192e-16 + l;
                        var Dc = L * 2.50573 + O * 1.19349e-15 + R * -2.78192e-16 + j;
                        var Ec = M * 2.50573 + P * 1.19349e-15 + S * -2.78192e-16 + h;
                        var Fc = tc * -0.289502 + wc * -0.00582853 + zc * -0.957158;
                        var Gc = uc * -0.289502 + xc * -0.00582853 + Ac * -0.957158;
                        var Hc = vc * -0.289502 + yc * -0.00582853 + Bc * -0.957158;
                        var Ic = tc * 0.956964 + wc * 0.0192674 + zc * -0.28956;
                        var Jc = uc * 0.956964 + xc * 0.0192674 + Ac * -0.28956;
                        var Kc = vc * 0.956964 + yc * 0.0192674 + Bc * -0.28956;
                        var Lc = tc * 0.0201297 + wc * -0.999796 + zc * -2.6822e-7;
                        var Mc = uc * 0.0201297 + xc * -0.999796 + Ac * -2.6822e-7;
                        var Nc = vc * 0.0201297 + yc * -0.999796 + Bc * -2.6822e-7;
                        var Oc = tc * 1.62023 + wc * -0.207425 + zc * -1.51967 + Cc;
                        var Pc = uc * 1.62023 + xc * -0.207425 + Ac * -1.51967 + Dc;
                        var Qc = vc * 1.62023 + yc * -0.207425 + Bc * -1.51967 + Ec;
                        var Rc = Fc * 0.999709 + Ic * -0.024104 + Lc * 3.53078e-15;
                        var Sc = Gc * 0.999709 + Jc * -0.024104 + Mc * 3.53078e-15;
                        var Tc = Hc * 0.999709 + Kc * -0.024104 + Nc * 3.53078e-15;
                        var Uc = Fc * 0.024104 + Ic * 0.999709 + Lc * 3.68079e-17;
                        var Vc = Gc * 0.024104 + Jc * 0.999709 + Mc * 3.68079e-17;
                        var Wc = Hc * 0.024104 + Kc * 0.999709 + Nc * 3.68079e-17;
                        var Xc = Fc * -3.53064e-15 + Ic * 4.8309e-17 + Lc * 0.999999;
                        var Yc = Gc * -3.53064e-15 + Jc * 4.8309e-17 + Mc * 0.999999;
                        var Zc = Hc * -3.53064e-15 + Kc * 4.8309e-17 + Nc * 0.999999;
                        var ad = Fc * 1.98668 + Ic * 2.10899e-15 + Lc * -0.219212 + Oc;
                        var bd = Gc * 1.98668 + Jc * 2.10899e-15 + Mc * -0.219212 + Pc;
                        var cd = Hc * 1.98668 + Kc * 2.10899e-15 + Nc * -0.219212 + Qc;
                        var dd = Rc * 0.949902 + Uc * 0.312548;
                        var ed = Sc * 0.949902 + Vc * 0.312548;
                        var fd = Tc * 0.949902 + Wc * 0.312548;
                        var gd = Rc * -0.312548 + Uc * 0.949902;
                        var hd = Sc * -0.312548 + Vc * 0.949902;
                        var id = Tc * -0.312548 + Wc * 0.949902;
                        var jd = Xc * 1.0;
                        var kd = Yc * 1.0;
                        var ld = Zc * 1.0;
                        var md = Rc * 2.60746 + Xc * 0.219212 + ad;
                        var nd = Sc * 2.60746 + Yc * 0.219212 + bd;
                        var od = Tc * 2.60746 + Zc * 0.219212 + cd;
                        var pd = fstate[0];
                        var qd;
                        if (pd < 0.0416666)
                        {
                            qd = 9.12325e-16;
                        }
                        else
                        {
                            if (pd < 4.16666)
                            {
                                qd = (engine.eCT(buffers[20], pd * 24.0 + -5.96046e-8) * 2.13274e-5 + -0.563722) * 0.5;
                            }
                            else
                            {
                                qd = -0.00893225;
                            }
                        }
                        var rd = fstate[0];
                        var sd;
                        if (rd < 0.0416666)
                        {
                            sd = 0.12385;
                        }
                        else
                        {
                            if (rd < 4.16666)
                            {
                                sd = (engine.eCT(buffers[19], rd * 24.0 + -5.96046e-8) * 9.1405e-6 + 0.0237556) * 0.5;
                            }
                            else
                            {
                                sd = 0.301784;
                            }
                        }
                        var td = fstate[0];
                        var ud;
                        if (td < 0.0416666)
                        {
                            ud = 1.77663e-9;
                        }
                        else
                        {
                            if (td < 4.16666)
                            {
                                ud = (engine.eCT(buffers[18], td * 24.0 + -5.96046e-8) * 7.98898e-6 + -0.0655727) * 0.5;
                            }
                            else
                            {
                                ud = 0.090065;
                            }
                        }
                        var vd = Math.cos(ud);
                        var wd = Math.sin(ud);
                        var xd = Math.cos(sd);
                        var yd = Math.sin(sd);
                        var zd = Math.cos(qd);
                        var Ad = Math.sin(qd);
                        var Bd = zd * xd * wd - Ad * yd * vd;
                        var Cd = zd * yd * vd + Ad * xd * wd;
                        var Dd = zd * -yd * wd + Ad * xd * vd;
                        var Ed = zd * xd * vd - Ad * -yd * wd;
                        var Fd = Bd * 6.11528e-17 + Ed * -0.998701 + Dd * 0.0509619 - Cd * -3.12052e-18;
                        var Gd = Cd * 6.11528e-17 + Ed * 0.0509619 + Bd * -3.12052e-18 - Dd * -0.998701;
                        var Hd = Dd * 6.11528e-17 + Ed * -3.12052e-18 + Cd * -0.998701 - Bd * 0.0509619;
                        var Id = Ed * 6.11528e-17 - Bd * -0.998701 - Cd * 0.0509619 - Dd * -3.12052e-18;
                        var Jd = Fd * Fd;
                        var Kd = Gd * Gd;
                        var Ld = Hd * Hd;
                        var Md = Id * Id;
                        var Nd = Fd * Gd;
                        var Od = Gd * Hd;
                        var Pd = Fd * Hd;
                        var Qd = Id * Fd;
                        var Rd = Id * Gd;
                        var Sd = Id * Hd;
                        var Td = Md + Jd - Kd - Ld;
                        var Ud = (Nd + Sd) * 2.0;
                        var Vd = (Pd - Rd) * 2.0;
                        var Wd = (Nd - Sd) * 2.0;
                        var Xd = Md - Jd + Kd - Ld;
                        var Yd = (Od + Qd) * 2.0;
                        var Zd = (Pd + Rd) * 2.0;
                        var ae = (Od - Qd) * 2.0;
                        var be = Md - Jd - Kd + Ld;
                        var ce = K * Td + N * Ud + Q * Vd;
                        var de = L * Td + O * Ud + R * Vd;
                        var ee = M * Td + P * Ud + S * Vd;
                        var fe = K * Wd + N * Xd + Q * Yd;
                        var ge = L * Wd + O * Xd + R * Yd;
                        var he = M * Wd + P * Xd + S * Yd;
                        var ie = K * Zd + N * ae + Q * be;
                        var je = L * Zd + O * ae + R * be;
                        var ke = M * Zd + P * ae + S * be;
                        var le = K * -0.387873 + N * 0.170759 + Q * -1.01942 + l;
                        var me = L * -0.387873 + O * 0.170759 + R * -1.01942 + j;
                        var ne = M * -0.387873 + P * 0.170759 + S * -1.01942 + h;
                        var oe = fstate[0];
                        var pe;
                        if (oe < 0.0416666)
                        {
                            pe = 0.0;
                        }
                        else
                        {
                            if (oe < 4.16666)
                            {
                                pe = (engine.eCT(buffers[22], oe * 24.0 + -5.96046e-8) * 6.36722e-6 + -0.100882) * 0.5;
                            }
                            else
                            {
                                pe = 0.046431;
                            }
                        }
                        var qe = fstate[0];
                        var re;
                        if (qe < 0.0416666)
                        {
                            re = 0.0;
                        }
                        else
                        {
                            if (qe < 4.16666)
                            {
                                re = (engine.eCT(buffers[21], qe * 24.0 + -5.96046e-8) * 1.54128e-5 + -0.240302) * 0.5;
                            }
                            else
                            {
                                re = 0.112965;
                            }
                        }
                        var se = Math.cos(re);
                        var te = Math.sin(re);
                        var ue = Math.cos(pe);
                        var ve = Math.sin(pe);
                        var we = -(ve * te);
                        var xe = ue * te;
                        var ye = ve * se;
                        var ze = ue * se;
                        var Ae = we * 0.551999 + ze * -0.823689 + ye * 0.107778 - xe * -0.0722282;
                        var Be = xe * 0.551999 + ze * 0.107778 + we * -0.0722282 - ye * -0.823689;
                        var Ce = ye * 0.551999 + ze * -0.0722282 + xe * -0.823689 - we * 0.107778;
                        var De = ze * 0.551999 - we * -0.823689 - xe * 0.107778 - ye * -0.0722282;
                        var Ee = Ae * Ae;
                        var Fe = Be * Be;
                        var Ge = Ce * Ce;
                        var He = De * De;
                        var Ie = Ae * Be;
                        var Je = Be * Ce;
                        var Ke = Ae * Ce;
                        var Le = De * Ae;
                        var Me = De * Be;
                        var Ne = De * Ce;
                        var Oe = He + Ee - Fe - Ge;
                        var Pe = (Ie + Ne) * 2.0;
                        var Qe = (Ke - Me) * 2.0;
                        var Re = (Ie - Ne) * 2.0;
                        var Se = He - Ee + Fe - Ge;
                        var Te = (Je + Le) * 2.0;
                        var Ue = (Ke + Me) * 2.0;
                        var Ve = (Je - Le) * 2.0;
                        var We = He - Ee - Fe + Ge;
                        var Xe = ce * Oe + fe * Pe + ie * Qe;
                        var Ye = de * Oe + ge * Pe + je * Qe;
                        var Ze = ee * Oe + he * Pe + ke * Qe;
                        var af = ce * Re + fe * Se + ie * Te;
                        var bf = de * Re + ge * Se + je * Te;
                        var cf = ee * Re + he * Se + ke * Te;
                        var df = ce * Ue + fe * Ve + ie * We;
                        var ef = de * Ue + ge * Ve + je * We;
                        var ff = ee * Ue + he * Ve + ke * We;
                        var gf = ce * -1.95064 + fe * -6.69052e-7 + ie * -1.01012e-6 + le;
                        var hf = de * -1.95064 + ge * -6.69052e-7 + je * -1.01012e-6 + me;
                        var jf = ee * -1.95064 + he * -6.69052e-7 + ke * -1.01012e-6 + ne;
                        var kf = Xe * 2.98023e-8 + af * 0.92492 + df * 0.380159;
                        var lf = Ye * 2.98023e-8 + bf * 0.92492 + ef * 0.380159;
                        var mf = Ze * 2.98023e-8 + cf * 0.92492 + ff * 0.380159;
                        var nf = Xe * -0.994219 + af * 0.0408141 + df * -0.0993;
                        var of = Ye * -0.994219 + bf * 0.0408141 + ef * -0.0993;
                        var pf = Ze * -0.994219 + cf * 0.0408141 + ff * -0.0993;
                        var qf = Xe * -0.10736 + af * -0.377961 + df * 0.919574;
                        var rf = Ye * -0.10736 + bf * -0.377961 + ef * 0.919574;
                        var sf = Ze * -0.10736 + cf * -0.377961 + ff * 0.919574;
                        var tf = tc * 0.289502 + wc * 0.00582853 + zc * -0.957158;
                        var uf = uc * 0.289502 + xc * 0.00582853 + Ac * -0.957158;
                        var vf = vc * 0.289502 + yc * 0.00582853 + Bc * -0.957158;
                        var wf = tc * -0.956964 + wc * -0.0192674 + zc * -0.28956;
                        var xf = uc * -0.956964 + xc * -0.0192674 + Ac * -0.28956;
                        var yf = vc * -0.956964 + yc * -0.0192674 + Bc * -0.28956;
                        var zf = tc * -0.0201297 + wc * 0.999796 + zc * -2.6822e-7;
                        var Af = uc * -0.0201297 + xc * 0.999796 + Ac * -2.6822e-7;
                        var Bf = vc * -0.0201297 + yc * 0.999796 + Bc * -2.6822e-7;
                        var Cf = tc * 1.62023 + wc * -0.207425 + zc * 1.51968 + Cc;
                        var Df = uc * 1.62023 + xc * -0.207425 + Ac * 1.51968 + Dc;
                        var Ef = vc * 1.62023 + yc * -0.207425 + Bc * 1.51968 + Ec;
                        var Ff = tf * 0.999709 + wf * -0.024104 + zf * -6.92643e-15;
                        var Gf = uf * 0.999709 + xf * -0.024104 + Af * -6.92643e-15;
                        var Hf = vf * 0.999709 + yf * -0.024104 + Bf * -6.92643e-15;
                        var If = tf * 0.024104 + wf * 0.999709 + zf * -7.20977e-17;
                        var Jf = uf * 0.024104 + xf * 0.999709 + Af * -7.20977e-17;
                        var Kf = vf * 0.024104 + yf * 0.999709 + Bf * -7.20977e-17;
                        var Lf = tf * 6.92616e-15 + wf * -9.48784e-17 + zf * 0.999999;
                        var Mf = uf * 6.92616e-15 + xf * -9.48784e-17 + Af * 0.999999;
                        var Nf = vf * 6.92616e-15 + yf * -9.48784e-17 + Bf * 0.999999;
                        var Of = tf * -1.98667 + wf * -4.66514e-6 + zf * 0.219212 + Cf;
                        var Pf = uf * -1.98667 + xf * -4.66514e-6 + Af * 0.219212 + Df;
                        var Qf = vf * -1.98667 + yf * -4.66514e-6 + Bf * 0.219212 + Ef;
                        var Rf = Ff * 0.949902 + If * 0.312548;
                        var Sf = Gf * 0.949902 + Jf * 0.312548;
                        var Tf = Hf * 0.949902 + Kf * 0.312548;
                        var Uf = Ff * -0.312548 + If * 0.949902;
                        var Vf = Gf * -0.312548 + Jf * 0.949902;
                        var Wf = Hf * -0.312548 + Kf * 0.949902;
                        var Xf = Lf * 1.0;
                        var Yf = Mf * 1.0;
                        var Zf = Nf * 1.0;
                        var ag = Ff * -2.60746 + If * -2.45135e-7 + Lf * -0.219212 + Of;
                        var bg = Gf * -2.60746 + Jf * -2.45135e-7 + Mf * -0.219212 + Pf;
                        var cg = Hf * -2.60746 + Kf * -2.45135e-7 + Nf * -0.219212 + Qf;
                        var dg = fstate[0];
                        var eg;
                        if (dg < 0.0416666)
                        {
                            eg = 0.0;
                        }
                        else
                        {
                            if (dg < 4.16666)
                            {
                                eg = (engine.eCT(buffers[27], dg * 24.0 + -5.96046e-8) * 6.22404e-6 + -0.100882) * 0.5;
                            }
                            else
                            {
                                eg = 0.0189838;
                            }
                        }
                        var fg = fstate[0];
                        var gg;
                        if (fg < 0.0416666)
                        {
                            gg = 0.0;
                        }
                        else
                        {
                            if (fg < 4.16666)
                            {
                                gg = (engine.eCT(buffers[26], fg * 24.0 + -5.96046e-8) * 1.50644e-5 + -0.240302) * 0.5;
                            }
                            else
                            {
                                gg = 0.0461872;
                            }
                        }
                        var hg = Math.cos(gg);
                        var ig = Math.sin(gg);
                        var jg = Math.cos(eg);
                        var kg = Math.sin(eg);
                        var lg = -(kg * ig);
                        var mg = jg * ig;
                        var ng = kg * hg;
                        var og = jg * hg;
                        var pg = lg * 0.551999 + og * -0.823689 + ng * 0.107778 - mg * -0.0722282;
                        var qg = mg * 0.551999 + og * 0.107778 + lg * -0.0722282 - ng * -0.823689;
                        var rg = ng * 0.551999 + og * -0.0722282 + mg * -0.823689 - lg * 0.107778;
                        var sg = og * 0.551999 - lg * -0.823689 - mg * 0.107778 - ng * -0.0722282;
                        var tg = pg * pg;
                        var ug = qg * qg;
                        var vg = rg * rg;
                        var wg = sg * sg;
                        var xg = pg * qg;
                        var yg = qg * rg;
                        var zg = pg * rg;
                        var Ag = sg * pg;
                        var Bg = sg * qg;
                        var Cg = sg * rg;
                        var Dg = wg + tg - ug - vg;
                        var Eg = (xg + Cg) * 2.0;
                        var Fg = (zg - Bg) * 2.0;
                        var Gg = (xg - Cg) * 2.0;
                        var Hg = wg - tg + ug - vg;
                        var Ig = (yg + Ag) * 2.0;
                        var Jg = (zg + Bg) * 2.0;
                        var Kg = (yg - Ag) * 2.0;
                        var Lg = wg - tg - ug + vg;
                        var Mg = Gb * Dg + Jb * Eg + Mb * Fg;
                        var Ng = Hb * Dg + Kb * Eg + Nb * Fg;
                        var Og = Ib * Dg + Lb * Eg + Ob * Fg;
                        var Pg = Gb * Gg + Jb * Hg + Mb * Ig;
                        var Qg = Hb * Gg + Kb * Hg + Nb * Ig;
                        var Rg = Ib * Gg + Lb * Hg + Ob * Ig;
                        var Sg = Gb * Jg + Jb * Kg + Mb * Lg;
                        var Tg = Hb * Jg + Kb * Kg + Nb * Lg;
                        var Ug = Ib * Jg + Lb * Kg + Ob * Lg;
                        var Vg = Gb * 1.95064 + Pb;
                        var Wg = Hb * 1.95064 + Qb;
                        var Xg = Ib * 1.95064 + Rb;
                        var Yg = Mg * 2.98023e-8 + Pg * 0.92492 + Sg * 0.380159;
                        var Zg = Ng * 2.98023e-8 + Qg * 0.92492 + Tg * 0.380159;
                        var ah = Og * 2.98023e-8 + Rg * 0.92492 + Ug * 0.380159;
                        var bh = Mg * -0.994219 + Pg * 0.0408141 + Sg * -0.0993;
                        var ch = Ng * -0.994219 + Qg * 0.0408141 + Tg * -0.0993;
                        var dh = Og * -0.994219 + Rg * 0.0408141 + Ug * -0.0993;
                        var eh = Mg * -0.10736 + Pg * -0.377961 + Sg * 0.919574;
                        var fh = Ng * -0.10736 + Qg * -0.377961 + Tg * 0.919574;
                        var gh = Og * -0.10736 + Rg * -0.377961 + Ug * 0.919574;
                        var hh = fstate[0];
                        var ih;
                        if (hh < 0.0)
                        {
                            ih = 0.0;
                        }
                        else
                        {
                            if (hh < 4.16666)
                            {
                                ih = (engine.eCT(buffers[37], hh * 24.0 + 1.0) * 5.34796e-6 + -0.208396) * 0.5;
                            }
                            else
                            {
                                ih = -0.104198;
                            }
                        }
                        var jh = fstate[0];
                        var kh;
                        if (jh < 0.0)
                        {
                            kh = 0.0;
                        }
                        else
                        {
                            if (jh < 4.16666)
                            {
                                kh = (engine.eCT(buffers[36], jh * 24.0 + 1.0) * 3.99659e-6 + -0.116801) * 0.5;
                            }
                            else
                            {
                                kh = -0.0242679;
                            }
                        }
                        var lh = fstate[0];
                        var mh;
                        if (lh < 0.0)
                        {
                            mh = 0.0;
                        }
                        else
                        {
                            if (lh < 4.16666)
                            {
                                mh = (engine.eCT(buffers[35], lh * 24.0 + 1.0) * 9.95664e-7 + -0.0652508) * 0.5;
                            }
                            else
                            {
                                mh = -0.0068066;
                            }
                        }
                        var nh = Math.cos(mh);
                        var oh = Math.sin(mh);
                        var ph = Math.cos(kh);
                        var qh = Math.sin(kh);
                        var rh = Math.cos(ih);
                        var sh = Math.sin(ih);
                        var th = rh * ph * oh - sh * qh * nh;
                        var uh = rh * qh * nh + sh * ph * oh;
                        var vh = rh * -qh * oh + sh * ph * nh;
                        var wh = rh * ph * nh - sh * -qh * oh;
                        var xh = th * 0.999964 - uh * -0.00850668;
                        var yh = uh * 0.999964 + th * -0.00850668;
                        var zh = vh * 0.999964 + wh * -0.00850668;
                        var Ah = wh * 0.999964 - vh * -0.00850668;
                        var Bh = xh * xh;
                        var Ch = yh * yh;
                        var Dh = zh * zh;
                        var Eh = Ah * Ah;
                        var Fh = xh * yh;
                        var Gh = yh * zh;
                        var Hh = xh * zh;
                        var Ih = Ah * xh;
                        var Jh = Ah * yh;
                        var Kh = Ah * zh;
                        var Lh = Eh + Bh - Ch - Dh;
                        var Mh = (Fh + Kh) * 2.0;
                        var Nh = (Hh - Jh) * 2.0;
                        var Oh = (Fh - Kh) * 2.0;
                        var Ph = Eh - Bh + Ch - Dh;
                        var Qh = (Gh + Ih) * 2.0;
                        var Rh = (Hh + Jh) * 2.0;
                        var Sh = (Gh - Ih) * 2.0;
                        var Th = Eh - Bh - Ch + Dh;
                        var Uh = tc * Lh + wc * Mh + zc * Nh;
                        var Vh = uc * Lh + xc * Mh + Ac * Nh;
                        var Wh = vc * Lh + yc * Mh + Bc * Nh;
                        var Xh = tc * Oh + wc * Ph + zc * Qh;
                        var Yh = uc * Oh + xc * Ph + Ac * Qh;
                        var Zh = vc * Oh + yc * Ph + Bc * Qh;
                        var ai = tc * Rh + wc * Sh + zc * Th;
                        var bi = uc * Rh + xc * Sh + Ac * Th;
                        var ci = vc * Rh + yc * Sh + Bc * Th;
                        var di = tc * 2.70253 + wc * 1.97758e-15 + zc * 2.7806e-16 + Cc;
                        var ei = uc * 2.70253 + xc * 1.97758e-15 + Ac * 2.7806e-16 + Dc;
                        var fi = vc * 2.70253 + yc * 1.97758e-15 + Bc * 2.7806e-16 + Ec;
                        var gi = Uh * 2.98023e-8 + ai * -1.0;
                        var hi = Vh * 2.98023e-8 + bi * -1.0;
                        var ii = Wh * 2.98023e-8 + ci * -1.0;
                        var ji = Uh * 0.999311 + Xh * 0.0371375;
                        var ki = Vh * 0.999311 + Yh * 0.0371375;
                        var li = Wh * 0.999311 + Zh * 0.0371375;
                        var mi = Uh * 0.0371375 + Xh * -0.999311;
                        var ni = Vh * 0.0371375 + Yh * -0.999311;
                        var oi = Wh * 0.0371375 + Zh * -0.999311;
                        var pi = Uh * 5.37141 + di;
                        var qi = Vh * 5.37141 + ei;
                        var ri = Wh * 5.37141 + fi;
                        var si = fstate[0];
                        var ti;
                        if (si < 0.0416666)
                        {
                            ti = -0.785395;
                        }
                        else
                        {
                            if (si < 4.16666)
                            {
                                ti = (engine.eCT(buffers[38], si * 24.0 + -1.19209e-7) * 0.00100728 + -1.57079) * 0.5;
                            }
                            else
                            {
                                ti = 32.2209;
                            }
                        }
                        var ui = Math.cos(ti);
                        var vi = Math.sin(ti);
                        var wi = ui * 0.966665 * 3.49399e-18 - vi * -0.256044;
                        var xi = ui * -0.256044 + vi * 0.966665 * 3.49399e-18;
                        var yi = ui * 0.256044 * 3.49399e-18 + vi * 0.966665;
                        var zi = ui * 0.966665 - vi * 0.256044 * 3.49399e-18;
                        var Ai = wi * 0.69983 + yi * 0.71431;
                        var Bi = xi * 0.69983 + zi * 0.71431;
                        var Ci = yi * 0.69983 - wi * 0.71431;
                        var Di = zi * 0.69983 - xi * 0.71431;
                        var Ei = Ai * Ai;
                        var Fi = Bi * Bi;
                        var Gi = Ci * Ci;
                        var Hi = Di * Di;
                        var Ii = Ai * Bi;
                        var Ji = Bi * Ci;
                        var Ki = Ai * Ci;
                        var Li = Di * Ai;
                        var Mi = Di * Bi;
                        var Ni = Di * Ci;
                        var Oi = Hi + Ei - Fi - Gi;
                        var Pi = (Ii + Ni) * 2.0;
                        var Qi = (Ki - Mi) * 2.0;
                        var Ri = (Ii - Ni) * 2.0;
                        var Si = Hi - Ei + Fi - Gi;
                        var Ti = (Ji + Li) * 2.0;
                        var Ui = (Ki + Mi) * 2.0;
                        var Vi = (Ji - Li) * 2.0;
                        var Wi = Hi - Ei - Fi + Gi;
                        var Xi = dd * Oi + gd * Pi + jd * Qi;
                        var Yi = ed * Oi + hd * Pi + kd * Qi;
                        var Zi = fd * Oi + id * Pi + ld * Qi;
                        var aj = dd * Ri + gd * Si + jd * Ti;
                        var bj = ed * Ri + hd * Si + kd * Ti;
                        var cj = fd * Ri + id * Si + ld * Ti;
                        var dj = dd * Ui + gd * Vi + jd * Wi;
                        var ej = ed * Ui + hd * Vi + kd * Wi;
                        var fj = fd * Ui + id * Vi + ld * Wi;
                        var gj = dd * 0.0331316 + gd * 0.00615982 + jd * -0.0680644 + md;
                        var hj = ed * 0.0331316 + hd * 0.00615982 + kd * -0.0680644 + nd;
                        var ij = fd * 0.0331316 + id * 0.00615982 + ld * -0.0680644 + od;
                        var jj = Xi * -0.0204767 + dj * 0.999791;
                        var kj = Yi * -0.0204767 + ej * 0.999791;
                        var lj = Zi * -0.0204767 + fj * 0.999791;
                        var mj = aj * 1.0;
                        var nj = bj * 1.0;
                        var oj = cj * 1.0;
                        var pj = Xi * -0.999791 + dj * -0.0204767;
                        var qj = Yi * -0.999791 + ej * -0.0204767;
                        var rj = Zi * -0.999791 + fj * -0.0204767;
                        var sj = fstate[0];
                        var tj;
                        if (sj < 0.0416666)
                        {
                            tj = -0.785395;
                        }
                        else
                        {
                            if (sj < 4.16666)
                            {
                                tj = (engine.eCT(buffers[39], sj * 24.0 + -1.19209e-7) * 0.00100728 + -1.57079) * 0.5;
                            }
                            else
                            {
                                tj = 32.2209;
                            }
                        }
                        var uj = Math.cos(tj);
                        var vj = Math.sin(tj);
                        var wj = uj * 0.968927 * -1.5265e-17 - vj * 0.247348;
                        var xj = uj * 0.247348 + vj * 0.968927 * -1.5265e-17;
                        var yj = uj * -0.247348 * -1.5265e-17 + vj * 0.968927;
                        var zj = uj * 0.968927 - vj * -0.247348 * -1.5265e-17;
                        var Aj = wj * 1.47121e-15 + zj * 0.69983 + yj * -1.44139e-15 - xj * 0.71431;
                        var Bj = xj * 1.47121e-15 + zj * -1.44139e-15 + wj * 0.71431 - yj * 0.69983;
                        var Cj = yj * 1.47121e-15 + zj * 0.71431 + xj * 0.69983 - wj * -1.44139e-15;
                        var Dj = zj * 1.47121e-15 - wj * 0.69983 - xj * -1.44139e-15 - yj * 0.71431;
                        var Ej = Aj * Aj;
                        var Fj = Bj * Bj;
                        var Gj = Cj * Cj;
                        var Hj = Dj * Dj;
                        var Ij = Aj * Bj;
                        var Jj = Bj * Cj;
                        var Kj = Aj * Cj;
                        var Lj = Dj * Aj;
                        var Mj = Dj * Bj;
                        var Nj = Dj * Cj;
                        var Oj = Hj + Ej - Fj - Gj;
                        var Pj = (Ij + Nj) * 2.0;
                        var Qj = (Kj - Mj) * 2.0;
                        var Rj = (Ij - Nj) * 2.0;
                        var Sj = Hj - Ej + Fj - Gj;
                        var Tj = (Jj + Lj) * 2.0;
                        var Uj = (Kj + Mj) * 2.0;
                        var Vj = (Jj - Lj) * 2.0;
                        var Wj = Hj - Ej - Fj + Gj;
                        var Xj = Rf * Oj + Uf * Pj + Xf * Qj;
                        var Yj = Sf * Oj + Vf * Pj + Yf * Qj;
                        var Zj = Tf * Oj + Wf * Pj + Zf * Qj;
                        var ak = Rf * Rj + Uf * Sj + Xf * Tj;
                        var bk = Sf * Rj + Vf * Sj + Yf * Tj;
                        var ck = Tf * Rj + Wf * Sj + Zf * Tj;
                        var dk = Rf * Uj + Uf * Vj + Xf * Wj;
                        var ek = Sf * Uj + Vf * Vj + Yf * Wj;
                        var fk = Tf * Uj + Wf * Vj + Zf * Wj;
                        var gk = Rf * -0.201813 + Uf * 0.038353 + Xf * -0.0469665 + ag;
                        var hk = Sf * -0.201813 + Vf * 0.038353 + Yf * -0.0469665 + bg;
                        var ik = Tf * -0.201813 + Wf * 0.038353 + Zf * -0.0469665 + cg;
                        var jk = Xj * -0.0204767 + dk * 0.999791;
                        var kk = Yj * -0.0204767 + ek * 0.999791;
                        var lk = Zj * -0.0204767 + fk * 0.999791;
                        var mk = ak * 1.0;
                        var nk = bk * 1.0;
                        var ok = ck * 1.0;
                        var pk = Xj * -0.999791 + dk * -0.0204767;
                        var qk = Yj * -0.999791 + ek * -0.0204767;
                        var rk = Zj * -0.999791 + fk * -0.0204767;
                        var sk = ak * -0.020477 + dk * 0.99979;
                        var tk = bk * -0.020477 + ek * 0.99979;
                        var uk = ck * -0.020477 + fk * 0.99979;
                        var vk = Xj * -1.0;
                        var wk = Yj * -1.0;
                        var xk = Zj * -1.0;
                        var yk = ak * -0.99979 + dk * -0.020477;
                        var zk = bk * -0.99979 + ek * -0.020477;
                        var Ak = ck * -0.99979 + fk * -0.020477;
                        var Bk = Xj * 6.06748 + ak * -0.935819 + dk * -0.275368 + gk;
                        var Ck = Yj * 6.06748 + bk * -0.935819 + ek * -0.275368 + hk;
                        var Dk = Zj * 6.06748 + ck * -0.935819 + fk * -0.275368 + ik;
                        var Ek = jk * 0.999581 + mk * -0.020477 + pk * -0.0204727;
                        var Fk = kk * 0.999581 + nk * -0.020477 + qk * -0.0204727;
                        var Gk = lk * 0.999581 + ok * -0.020477 + rk * -0.0204727;
                        var Hk = jk * 0.020477 + mk * -2.64222e-10 + pk * 0.99979;
                        var Ik = kk * 0.020477 + nk * -2.64222e-10 + qk * 0.99979;
                        var Jk = lk * 0.020477 + ok * -2.64222e-10 + rk * 0.99979;
                        var Kk = jk * -0.0204727 + mk * -0.99979 + pk * 4.19307e-4;
                        var Lk = kk * -0.0204727 + nk * -0.99979 + qk * 4.19307e-4;
                        var Mk = lk * -0.0204727 + ok * -0.99979 + rk * 4.19307e-4;
                        var Nk = jk * -0.323206 + mk * -0.935819 + pk * -0.633309 + Xj * 5.42769 + dk * 0.0348014 + gk;
                        var Ok = kk * -0.323206 + nk * -0.935819 + qk * -0.633309 + Yj * 5.42769 + ek * 0.0348014 + hk;
                        var Pk = lk * -0.323206 + ok * -0.935819 + rk * -0.633309 + Zj * 5.42769 + fk * 0.0348014 + ik;
                        var Qk = sk * -4.76837e-7 + vk * 3.17959 + yk * -1.0 + Bk;
                        var Rk = tk * -4.76837e-7 + wk * 3.17959 + zk * -1.0 + Ck;
                        var Sk = uk * -4.76837e-7 + xk * 3.17959 + Ak * -1.0 + Dk;
                        var Tk = Math.abs(sk) * 1.60397 + Math.abs(vk) * 3.14369 + Math.abs(yk) * 0.621096;
                        var Uk = Math.abs(tk) * 1.60397 + Math.abs(wk) * 3.14369 + Math.abs(zk) * 0.621096;
                        var Vk = Math.abs(uk) * 1.60397 + Math.abs(xk) * 3.14369 + Math.abs(Ak) * 0.621096;
                        var Wk = Ek * -4.76837e-7 + Hk * 3.17959 + Kk * -1.0 + Nk;
                        var Xk = Fk * -4.76837e-7 + Ik * 3.17959 + Lk * -1.0 + Ok;
                        var Yk = Gk * -4.76837e-7 + Jk * 3.17959 + Mk * -1.0 + Pk;
                        var Zk = Math.abs(Ek) * 1.60397 + Math.abs(Hk) * 3.14369 + Math.abs(Kk) * 0.621096;
                        var al = Math.abs(Fk) * 1.60397 + Math.abs(Ik) * 3.14369 + Math.abs(Lk) * 0.621096;
                        var bl = Math.abs(Gk) * 1.60397 + Math.abs(Jk) * 3.14369 + Math.abs(Mk) * 0.621096;
                        var cl = Math.min(Qk - Tk, Wk - Zk);
                        var dl = Math.min(Rk - Uk, Xk - al);
                        var el = Math.min(Sk - Vk, Yk - bl);
                        var fl = Math.max(Qk + Tk, Wk + Zk);
                        var gl = Math.max(Rk + Uk, Xk + al);
                        var hl = Math.max(Sk + Vk, Yk + bl);
                        var il = zc * -1.0;
                        var jl = Ac * -1.0;
                        var kl = Bc * -1.0;
                        var ll = tc * 0.999797 + wc * 0.0201301;
                        var ml = uc * 0.999797 + xc * 0.0201301;
                        var nl = vc * 0.999797 + yc * 0.0201301;
                        var ol = tc * 0.0201301 + wc * -0.999797;
                        var pl = uc * 0.0201301 + xc * -0.999797;
                        var ql = vc * 0.0201301 + yc * -0.999797;
                        var rl = tc * -7.08405 + wc * -0.527657 + Cc;
                        var sl = uc * -7.08405 + xc * -0.527657 + Dc;
                        var tl = vc * -7.08405 + yc * -0.527657 + Ec;
                        var ul = ai * -1.0;
                        var vl = bi * -1.0;
                        var wl = ci * -1.0;
                        var xl = Uh * 0.99931 + Xh * 0.0371365;
                        var yl = Vh * 0.99931 + Yh * 0.0371365;
                        var zl = Wh * 0.99931 + Zh * 0.0371365;
                        var Al = Uh * 0.0371365 + Xh * -0.99931;
                        var Bl = Vh * 0.0371365 + Yh * -0.99931;
                        var Cl = Wh * 0.0371365 + Zh * -0.99931;
                        var Dl = Uh * -9.7762 + Xh * -0.694077 + di;
                        var El = Vh * -9.7762 + Yh * -0.694077 + ei;
                        var Fl = Wh * -9.7762 + Zh * -0.694077 + fi;
                        var Gl = ji * -15.1629 + mi * 0.131069 + pi;
                        var Hl = ki * -15.1629 + ni * 0.131069 + qi;
                        var Il = li * -15.1629 + oi * 0.131069 + ri;
                        var Jl = tf * 0.95716 + wf * 0.289561;
                        var Kl = uf * 0.95716 + xf * 0.289561;
                        var Ll = vf * 0.95716 + yf * 0.289561;
                        var Ml = tf * 0.289561 + wf * -0.95716;
                        var Nl = uf * 0.289561 + xf * -0.95716;
                        var Ol = vf * 0.289561 + yf * -0.95716;
                        var Pl = zf * -1.0;
                        var Ql = Af * -1.0;
                        var Rl = Bf * -1.0;
                        var Sl = tf * -1.0672 + wf * 8.77591 + zf * -0.144948 + Cf;
                        var Tl = uf * -1.0672 + xf * 8.77591 + Af * -0.144948 + Df;
                        var Ul = vf * -1.0672 + yf * 8.77591 + Bf * -0.144948 + Ef;
                        var Vl = Fc * 0.95716 + Ic * 0.289561;
                        var Wl = Gc * 0.95716 + Jc * 0.289561;
                        var Xl = Hc * 0.95716 + Kc * 0.289561;
                        var Yl = Fc * -0.289561 + Ic * 0.95716;
                        var Zl = Gc * -0.289561 + Jc * 0.95716;
                        var am = Hc * -0.289561 + Kc * 0.95716;
                        var bm = Fc * 1.0672 + Ic * -8.77592 + Lc * 0.144948 + Oc;
                        var cm = Gc * 1.0672 + Jc * -8.77592 + Mc * 0.144948 + Pc;
                        var dm = Hc * 1.0672 + Kc * -8.77592 + Nc * 0.144948 + Qc;
                        var em = il * -0.0120887 + ll * 18.1969 + ol * -0.0961347 + rl;
                        var fm = jl * -0.0120887 + ml * 18.1969 + pl * -0.0961347 + sl;
                        var gm = kl * -0.0120887 + nl * 18.1969 + ql * -0.0961347 + tl;
                        var hm = Math.abs(il) * 8.43328 + Math.abs(ll) * 3.45125 + Math.abs(ol) * 4.58112;
                        var im = Math.abs(jl) * 8.43328 + Math.abs(ml) * 3.45125 + Math.abs(pl) * 4.58112;
                        var jm = Math.abs(kl) * 8.43328 + Math.abs(nl) * 3.45125 + Math.abs(ql) * 4.58112;
                        var km = ul * -0.0120887 + xl * 18.1969 + Al * -0.0961347 + Dl;
                        var lm = vl * -0.0120887 + yl * 18.1969 + Bl * -0.0961347 + El;
                        var mm = wl * -0.0120887 + zl * 18.1969 + Cl * -0.0961347 + Fl;
                        var nm = Math.abs(ul) * 8.43328 + Math.abs(xl) * 3.45125 + Math.abs(Al) * 4.58112;
                        var om = Math.abs(vl) * 8.43328 + Math.abs(yl) * 3.45125 + Math.abs(Bl) * 4.58112;
                        var pm = Math.abs(wl) * 8.43328 + Math.abs(zl) * 3.45125 + Math.abs(Cl) * 4.58112;
                        var qm = gi * -0.0120887 + ji * 18.1969 + mi * -0.0961347 + Gl;
                        var rm = hi * -0.0120887 + ki * 18.1969 + ni * -0.0961347 + Hl;
                        var sm = ii * -0.0120887 + li * 18.1969 + oi * -0.0961347 + Il;
                        var tm = Math.abs(gi) * 8.43328 + Math.abs(ji) * 3.45125 + Math.abs(mi) * 4.58112;
                        var um = Math.abs(hi) * 8.43328 + Math.abs(ki) * 3.45125 + Math.abs(ni) * 4.58112;
                        var vm = Math.abs(ii) * 8.43328 + Math.abs(li) * 3.45125 + Math.abs(oi) * 4.58112;
                        var wm = Jl * -0.0120887 + Ml * 18.1969 + Pl * -0.0961347 + Sl;
                        var xm = Kl * -0.0120887 + Nl * 18.1969 + Ql * -0.0961347 + Tl;
                        var ym = Ll * -0.0120887 + Ol * 18.1969 + Rl * -0.0961347 + Ul;
                        var zm = Math.abs(Jl) * 8.43328 + Math.abs(Ml) * 3.45125 + Math.abs(Pl) * 4.58112;
                        var Am = Math.abs(Kl) * 8.43328 + Math.abs(Nl) * 3.45125 + Math.abs(Ql) * 4.58112;
                        var Bm = Math.abs(Ll) * 8.43328 + Math.abs(Ol) * 3.45125 + Math.abs(Rl) * 4.58112;
                        var Cm = Vl * -0.0120887 + Yl * 18.1969 + Lc * -0.0961347 + bm;
                        var Dm = Wl * -0.0120887 + Zl * 18.1969 + Mc * -0.0961347 + cm;
                        var Em = Xl * -0.0120887 + am * 18.1969 + Nc * -0.0961347 + dm;
                        var Fm = Math.abs(Vl) * 8.43328 + Math.abs(Yl) * 3.45125 + Math.abs(Lc) * 4.58112;
                        var Gm = Math.abs(Wl) * 8.43328 + Math.abs(Zl) * 3.45125 + Math.abs(Mc) * 4.58112;
                        var Hm = Math.abs(Xl) * 8.43328 + Math.abs(am) * 3.45125 + Math.abs(Nc) * 4.58112;
                        var Im = Math.min(Math.min(Math.min(Math.min(em - hm, km - nm), qm - tm), wm - zm), Cm - Fm);
                        var Jm = Math.min(Math.min(Math.min(Math.min(fm - im, lm - om), rm - um), xm - Am), Dm - Gm);
                        var Km = Math.min(Math.min(Math.min(Math.min(gm - jm, mm - pm), sm - vm), ym - Bm), Em - Hm);
                        var Lm = Math.max(Math.max(Math.max(Math.max(em + hm, km + nm), qm + tm), wm + zm), Cm + Fm);
                        var Mm = Math.max(Math.max(Math.max(Math.max(fm + im, lm + om), rm + um), xm + Am), Dm + Gm);
                        var Nm = Math.max(Math.max(Math.max(Math.max(gm + jm, mm + pm), sm + vm), ym + Bm), Em + Hm);
                        var Om = aj * -0.020477 + dj * 0.99979;
                        var Pm = bj * -0.020477 + ej * 0.99979;
                        var Qm = cj * -0.020477 + fj * 0.99979;
                        var Rm = Xi * -1.0;
                        var Sm = Yi * -1.0;
                        var Tm = Zi * -1.0;
                        var Um = aj * -0.99979 + dj * -0.020477;
                        var Vm = bj * -0.99979 + ej * -0.020477;
                        var Wm = cj * -0.99979 + fj * -0.020477;
                        var Xm = Xi * 6.06748 + aj * -0.935819 + dj * -0.275368 + gj;
                        var Ym = Yi * 6.06748 + bj * -0.935819 + ej * -0.275368 + hj;
                        var Zm = Zi * 6.06748 + cj * -0.935819 + fj * -0.275368 + ij;
                        var an = jj * 0.999581 + mj * -0.020477 + pj * -0.0204727;
                        var bn = kj * 0.999581 + nj * -0.020477 + qj * -0.0204727;
                        var cn = lj * 0.999581 + oj * -0.020477 + rj * -0.0204727;
                        var dn = jj * 0.020477 + mj * -2.64222e-10 + pj * 0.99979;
                        var en = kj * 0.020477 + nj * -2.64222e-10 + qj * 0.99979;
                        var fn = lj * 0.020477 + oj * -2.64222e-10 + rj * 0.99979;
                        var gn = jj * -0.0204727 + mj * -0.99979 + pj * 4.19307e-4;
                        var hn = kj * -0.0204727 + nj * -0.99979 + qj * 4.19307e-4;
                        var jn = lj * -0.0204727 + oj * -0.99979 + rj * 4.19307e-4;
                        var kn = jj * -0.323206 + mj * -0.935819 + pj * -0.633309 + Xi * 5.42769 + dj * 0.0348014 + gj;
                        var ln = kj * -0.323206 + nj * -0.935819 + qj * -0.633309 + Yi * 5.42769 + ej * 0.0348014 + hj;
                        var mn = lj * -0.323206 + oj * -0.935819 + rj * -0.633309 + Zi * 5.42769 + fj * 0.0348014 + ij;
                        var nn = Om * -4.76837e-7 + Rm * 3.17959 + Um * -1.0 + Xm;
                        var on = Pm * -4.76837e-7 + Sm * 3.17959 + Vm * -1.0 + Ym;
                        var pn = Qm * -4.76837e-7 + Tm * 3.17959 + Wm * -1.0 + Zm;
                        var qn = Math.abs(Om) * 1.60397 + Math.abs(Rm) * 3.14369 + Math.abs(Um) * 0.621096;
                        var rn = Math.abs(Pm) * 1.60397 + Math.abs(Sm) * 3.14369 + Math.abs(Vm) * 0.621096;
                        var sn = Math.abs(Qm) * 1.60397 + Math.abs(Tm) * 3.14369 + Math.abs(Wm) * 0.621096;
                        var tn = an * -4.76837e-7 + dn * 3.17959 + gn * -1.0 + kn;
                        var un = bn * -4.76837e-7 + en * 3.17959 + hn * -1.0 + ln;
                        var vn = cn * -4.76837e-7 + fn * 3.17959 + jn * -1.0 + mn;
                        var wn = Math.abs(an) * 1.60397 + Math.abs(dn) * 3.14369 + Math.abs(gn) * 0.621096;
                        var xn = Math.abs(bn) * 1.60397 + Math.abs(en) * 3.14369 + Math.abs(hn) * 0.621096;
                        var yn = Math.abs(cn) * 1.60397 + Math.abs(fn) * 3.14369 + Math.abs(jn) * 0.621096;
                        var zn = Math.min(nn - qn, tn - wn);
                        var An = Math.min(on - rn, un - xn);
                        var Bn = Math.min(pn - sn, vn - yn);
                        var Cn = Math.max(nn + qn, tn + wn);
                        var Dn = Math.max(on + rn, un + xn);
                        var En = Math.max(pn + sn, vn + yn);
                        var Fn = K * 0.998716 + N * 0.0506595;
                        var Gn = L * 0.998716 + O * 0.0506595;
                        var Hn = M * 0.998716 + P * 0.0506595;
                        var In = K * -0.0506595 + N * 0.998716;
                        var Jn = L * -0.0506595 + O * 0.998716;
                        var Kn = M * -0.0506595 + P * 0.998716;
                        var Ln = K * -4.59896 + N * 0.046149 + l;
                        var Mn = L * -4.59896 + O * 0.046149 + j;
                        var Nn = M * -4.59896 + P * 0.046149 + h + -0.0210635;
                        var On = Q * -2.24024e-4 + Fn * 4.99203 + In * 1.60806 + Ln;
                        var Pn = R * -2.24024e-4 + Gn * 4.99203 + Jn * 1.60806 + Mn;
                        var Qn = S * -2.24024e-4 + Hn * 4.99203 + Kn * 1.60806 + Nn;
                        var Rn = Math.abs(Q) * 0.912526 + Math.abs(Fn) * 0.91179 + Math.abs(In) * 0.169205;
                        var Sn = Math.abs(R) * 0.912526 + Math.abs(Gn) * 0.91179 + Math.abs(Jn) * 0.169205;
                        var Tn = Math.abs(S) * 0.912526 + Math.abs(Hn) * 0.91179 + Math.abs(Kn) * 0.169205;
                        var Un = On - Rn;
                        var Vn = Pn - Sn;
                        var Wn = Qn - Tn;
                        var Xn = On + Rn;
                        var Yn = Pn + Sn;
                        var Zn = Qn + Tn;
                        var ao = ai * -1.0;
                        var bo = bi * -1.0;
                        var co = ci * -1.0;
                        var eo = Uh * 0.99931 + Xh * 0.0371365;
                        var fo = Vh * 0.99931 + Yh * 0.0371365;
                        var go = Wh * 0.99931 + Zh * 0.0371365;
                        var ho = Uh * 0.0371365 + Xh * -0.99931;
                        var io = Vh * 0.0371365 + Yh * -0.99931;
                        var jo = Wh * 0.0371365 + Zh * -0.99931;
                        var ko = Uh * -9.7762 + Xh * -0.694077 + di;
                        var lo = Vh * -9.7762 + Yh * -0.694077 + ei;
                        var mo = Wh * -9.7762 + Zh * -0.694077 + fi;
                        var no = ao * -4.77552e-4 + eo * 13.5195 + ho * -0.182161 + ko;
                        var oo = bo * -4.77552e-4 + fo * 13.5195 + io * -0.182161 + lo;
                        var po = co * -4.77552e-4 + go * 13.5195 + jo * -0.182161 + mo;
                        var qo = Math.abs(ao) * 7.37218 + Math.abs(eo) * 3.91181 + Math.abs(ho) * 1.78532;
                        var ro = Math.abs(bo) * 7.37218 + Math.abs(fo) * 3.91181 + Math.abs(io) * 1.78532;
                        var so = Math.abs(co) * 7.37218 + Math.abs(go) * 3.91181 + Math.abs(jo) * 1.78532;
                        var to = no - qo;
                        var uo = oo - ro;
                        var vo = po - so;
                        var wo = no + qo;
                        var xo = oo + ro;
                        var yo = po + so;
                        var zo = K * 0.998716 + N * 0.0506595;
                        var Ao = L * 0.998716 + O * 0.0506595;
                        var Bo = M * 0.998716 + P * 0.0506595;
                        var Co = K * -0.0506595 + N * 0.998716;
                        var Do = L * -0.0506595 + O * 0.998716;
                        var Eo = M * -0.0506595 + P * 0.998716;
                        var Fo = K * -4.5979 + N * 0.0251126 + l;
                        var Go = L * -4.5979 + O * 0.0251126 + j;
                        var Ho = M * -4.5979 + P * 0.0251126 + h;
                        var Io = zc * -1.0;
                        var Jo = Ac * -1.0;
                        var Ko = Bc * -1.0;
                        var Lo = tc * 0.999797 + wc * 0.0201301;
                        var Mo = uc * 0.999797 + xc * 0.0201301;
                        var No = vc * 0.999797 + yc * 0.0201301;
                        var Oo = tc * 0.0201301 + wc * -0.999797;
                        var Po = uc * 0.0201301 + xc * -0.999797;
                        var Qo = vc * 0.0201301 + yc * -0.999797;
                        var Ro = tc * -7.08405 + wc * -0.527657 + Cc;
                        var So = uc * -7.08405 + xc * -0.527657 + Dc;
                        var To = vc * -7.08405 + yc * -0.527657 + Ec;
                        var Uo = ai * -1.0;
                        var Vo = bi * -1.0;
                        var Wo = ci * -1.0;
                        var Xo = Uh * 0.99931 + Xh * 0.0371365;
                        var Yo = Vh * 0.99931 + Yh * 0.0371365;
                        var Zo = Wh * 0.99931 + Zh * 0.0371365;
                        var ap = Uh * 0.0371365 + Xh * -0.99931;
                        var bp = Vh * 0.0371365 + Yh * -0.99931;
                        var cp = Wh * 0.0371365 + Zh * -0.99931;
                        var dp = Uh * -9.7762 + Xh * -0.694077 + di;
                        var ep = Vh * -9.7762 + Yh * -0.694077 + ei;
                        var fp = Wh * -9.7762 + Zh * -0.694077 + fi;
                        var gp = ji * -15.1629 + mi * 0.131069 + pi;
                        var hp = ki * -15.1629 + ni * 0.131069 + qi;
                        var ip = li * -15.1629 + oi * 0.131069 + ri;
                        var jp = tf * 0.95716 + wf * 0.289561;
                        var kp = uf * 0.95716 + xf * 0.289561;
                        var lp = vf * 0.95716 + yf * 0.289561;
                        var mp = tf * 0.289561 + wf * -0.95716;
                        var np = uf * 0.289561 + xf * -0.95716;
                        var op = vf * 0.289561 + yf * -0.95716;
                        var pp = zf * -1.0;
                        var qp = Af * -1.0;
                        var rp = Bf * -1.0;
                        var sp = tf * -1.0672 + wf * 8.77591 + zf * -0.144948 + Cf;
                        var tp = uf * -1.0672 + xf * 8.77591 + Af * -0.144948 + Df;
                        var up = vf * -1.0672 + yf * 8.77591 + Bf * -0.144948 + Ef;
                        var vp = Ff * 0.949902 + If * 0.312548;
                        var wp = Gf * 0.949902 + Jf * 0.312548;
                        var xp = Hf * 0.949902 + Kf * 0.312548;
                        var yp = Ff * 0.312548 + If * -0.949902;
                        var zp = Gf * 0.312548 + Jf * -0.949902;
                        var Ap = Hf * 0.312548 + Kf * -0.949902;
                        var Bp = Lf * -1.0;
                        var Cp = Mf * -1.0;
                        var Dp = Nf * -1.0;
                        var Ep = Ff * 0.707674 + If * 8.79553 + Lf * -0.36416 + Of;
                        var Fp = Gf * 0.707674 + Jf * 8.79553 + Mf * -0.36416 + Pf;
                        var Gp = Hf * 0.707674 + Kf * 8.79553 + Nf * -0.36416 + Qf;
                        var Hp = Uf * -1.0;
                        var Ip = Vf * -1.0;
                        var Jp = Wf * -1.0;
                        var Kp = Xf * -1.0;
                        var Lp = Yf * -1.0;
                        var Mp = Zf * -1.0;
                        var Np = Rf * 5.89809 + Uf * 7.31875 + Xf * -0.144948 + ag;
                        var Op = Sf * 5.89809 + Vf * 7.31875 + Yf * -0.144948 + bg;
                        var Pp = Tf * 5.89809 + Wf * 7.31875 + Zf * -0.144948 + cg;
                        var Qp = Fc * 0.95716 + Ic * 0.289561;
                        var Rp = Gc * 0.95716 + Jc * 0.289561;
                        var Sp = Hc * 0.95716 + Kc * 0.289561;
                        var Tp = Fc * -0.289561 + Ic * 0.95716;
                        var Up = Gc * -0.289561 + Jc * 0.95716;
                        var Vp = Hc * -0.289561 + Kc * 0.95716;
                        var Wp = Fc * 1.0672 + Ic * -8.77592 + Lc * 0.144948 + Oc;
                        var Xp = Gc * 1.0672 + Jc * -8.77592 + Mc * 0.144948 + Pc;
                        var Yp = Hc * 1.0672 + Kc * -8.77592 + Nc * 0.144948 + Qc;
                        var Zp = Rc * 0.949902 + Uc * 0.312548;
                        var aq = Sc * 0.949902 + Vc * 0.312548;
                        var bq = Tc * 0.949902 + Wc * 0.312548;
                        var cq = Rc * -0.312548 + Uc * 0.949902;
                        var dq = Sc * -0.312548 + Vc * 0.949902;
                        var eq = Tc * -0.312548 + Wc * 0.949902;
                        var fq = Rc * -0.707676 + Uc * -8.79553 + Xc * 0.36416 + ad;
                        var gq = Sc * -0.707676 + Vc * -8.79553 + Yc * 0.36416 + bd;
                        var hq = Tc * -0.707676 + Wc * -8.79553 + Zc * 0.36416 + cd;
                        var iq = dd * -5.89809 + gd * -7.31874 + jd * 0.144948 + md;
                        var jq = ed * -5.89809 + hd * -7.31874 + kd * 0.144948 + nd;
                        var kq = fd * -5.89809 + id * -7.31874 + ld * 0.144948 + od;
                        var lq = ce * 0.245176 + fe * 5.41454e-8 + ie * -0.969479;
                        var mq = de * 0.245176 + ge * 5.41454e-8 + je * -0.969479;
                        var nq = ee * 0.245176 + he * 5.41454e-8 + ke * -0.969479;
                        var oq = ce * 0.958205 + fe * -0.152057 + ie * 0.242325;
                        var pq = de * 0.958205 + ge * -0.152057 + je * 0.242325;
                        var qq = ee * 0.958205 + he * -0.152057 + ke * 0.242325;
                        var rq = ce * -0.147416 + fe * -0.988372 + ie * -0.0372808;
                        var sq = de * -0.147416 + ge * -0.988372 + je * -0.0372808;
                        var tq = ee * -0.147416 + he * -0.988372 + ke * -0.0372808;
                        var uq = ce * -3.79602 + fe * 0.573436 + ie * -2.0115 + le;
                        var vq = de * -3.79602 + ge * 0.573436 + je * -2.0115 + me;
                        var wq = ee * -3.79602 + he * 0.573436 + ke * -2.0115 + ne;
                        var xq = Xe * 0.236921 + af * 0.87271 + df * 0.426903;
                        var yq = Ye * 0.236921 + bf * 0.87271 + ef * 0.426903;
                        var zq = Ze * 0.236921 + cf * 0.87271 + ff * 0.426903;
                        var Aq = Xe * 0.965069 + af * -0.261995 + df * 1.40328e-8;
                        var Bq = Ye * 0.965069 + bf * -0.261995 + ef * 1.40328e-8;
                        var Cq = Ze * 0.965069 + cf * -0.261995 + ff * 1.40328e-8;
                        var Dq = Xe * 0.111846 + af * 0.411991 + df * -0.904297;
                        var Eq = Ye * 0.111846 + bf * 0.411991 + ef * -0.904297;
                        var Fq = Ze * 0.111846 + cf * 0.411991 + ff * -0.904297;
                        var Gq = Xe * -1.93078 + af * 1.83032 + df * 0.83807 + gf;
                        var Hq = Ye * -1.93078 + bf * 1.83032 + ef * 0.83807 + hf;
                        var Iq = Ze * -1.93078 + cf * 1.83032 + ff * 0.83807 + jf;
                        var Jq = kf * 0.969479 + nf * -0.242325 + qf * 0.0372807;
                        var Kq = lf * 0.969479 + of * -0.242325 + rf * 0.0372807;
                        var Lq = mf * 0.969479 + pf * -0.242325 + sf * 0.0372807;
                        var Mq = kf * -0.242325 + nf * -0.970184 + qf * -0.00458704;
                        var Nq = lf * -0.242325 + of * -0.970184 + rf * -0.00458704;
                        var Oq = mf * -0.242325 + pf * -0.970184 + sf * -0.00458704;
                        var Pq = kf * 0.0372807 + nf * -0.00458701 + qf * -0.999294;
                        var Qq = lf * 0.0372807 + of * -0.00458701 + rf * -0.999294;
                        var Rq = mf * 0.0372807 + pf * -0.00458701 + sf * -0.999294;
                        var Sq = kf * 2.0115 + nf * -0.443247 + qf * 0.0319283 + Xe * -2.36804 + af * 7.25483e-7 + df * 5.71139e-7 + gf;
                        var Tq = lf * 2.0115 + of * -0.443247 + rf * 0.0319283 + Ye * -2.36804 + bf * 7.25483e-7 + ef * 5.71139e-7 + hf;
                        var Uq = mf * 2.0115 + pf * -0.443247 + sf * 0.0319283 + Ze * -2.36804 + cf * 7.25483e-7 + ff * 5.71139e-7 + jf;
                        var Vq = Gb * 0.245176 + Jb * 5.41454e-8 + Mb * -0.969479;
                        var Wq = Hb * 0.245176 + Kb * 5.41454e-8 + Nb * -0.969479;
                        var Xq = Ib * 0.245176 + Lb * 5.41454e-8 + Ob * -0.969479;
                        var Yq = Gb * -0.958205 + Jb * 0.152057 + Mb * -0.242325;
                        var Zq = Hb * -0.958205 + Kb * 0.152057 + Nb * -0.242325;
                        var ar = Ib * -0.958205 + Lb * 0.152057 + Ob * -0.242325;
                        var br = Gb * 0.147416 + Jb * 0.988372 + Mb * 0.0372808;
                        var cr = Hb * 0.147416 + Kb * 0.988372 + Nb * 0.0372808;
                        var dr = Ib * 0.147416 + Lb * 0.988372 + Ob * 0.0372808;
                        var er = Gb * 3.79602 + Jb * -0.573436 + Mb * 2.0115 + Pb;
                        var fr = Hb * 3.79602 + Kb * -0.573436 + Nb * 2.0115 + Qb;
                        var gr = Ib * 3.79602 + Lb * -0.573436 + Ob * 2.0115 + Rb;
                        var hr = Mg * 0.236921 + Pg * 0.87271 + Sg * 0.426903;
                        var ir = Ng * 0.236921 + Qg * 0.87271 + Tg * 0.426903;
                        var jr = Og * 0.236921 + Rg * 0.87271 + Ug * 0.426903;
                        var kr = Mg * -0.965069 + Pg * 0.261995 + Sg * -1.14556e-8;
                        var lr = Ng * -0.965069 + Qg * 0.261995 + Tg * -1.14556e-8;
                        var mr = Og * -0.965069 + Rg * 0.261995 + Ug * -1.14556e-8;
                        var nr = Mg * -0.111846 + Pg * -0.411991 + Sg * 0.904297;
                        var or = Ng * -0.111846 + Qg * -0.411991 + Tg * 0.904297;
                        var pr = Og * -0.111846 + Rg * -0.411991 + Ug * 0.904297;
                        var qr = Mg * 1.93078 + Pg * -1.83032 + Sg * -0.838069 + Vg;
                        var rr = Ng * 1.93078 + Qg * -1.83032 + Tg * -0.838069 + Wg;
                        var sr = Og * 1.93078 + Rg * -1.83032 + Ug * -0.838069 + Xg;
                        var tr = Yg * 0.969479 + bh * -0.242325 + eh * 0.0372807;
                        var ur = Zg * 0.969479 + ch * -0.242325 + fh * 0.0372807;
                        var vr = ah * 0.969479 + dh * -0.242325 + gh * 0.0372807;
                        var wr = Yg * 0.242325 + bh * 0.970184 + eh * 0.00458704;
                        var xr = Zg * 0.242325 + ch * 0.970184 + fh * 0.00458704;
                        var yr = ah * 0.242325 + dh * 0.970184 + gh * 0.00458704;
                        var zr = Yg * -0.0372807 + bh * 0.00458701 + eh * 0.999294;
                        var Ar = Zg * -0.0372807 + ch * 0.00458701 + fh * 0.999294;
                        var Br = ah * -0.0372807 + dh * 0.00458701 + gh * 0.999294;
                        var Cr = Yg * -2.0115 + bh * 0.443247 + eh * -0.0319283 + Mg * 2.36804 + Vg;
                        var Dr = Zg * -2.0115 + ch * 0.443247 + fh * -0.0319283 + Ng * 2.36804 + Wg;
                        var Er = ah * -2.0115 + dh * 0.443247 + gh * -0.0319283 + Og * 2.36804 + Xg;
                        var Fr = Q * 7.15256e-7 + zo * 4.93876 + Co * -0.150521 + Fo;
                        var Gr = R * 7.15256e-7 + Ao * 4.93876 + Do * -0.150521 + Go;
                        var Hr = S * 7.15256e-7 + Bo * 4.93876 + Eo * -0.150521 + Ho;
                        var Ir = Math.abs(Q) * 5.99336 + Math.abs(zo) * 4.91501 + Math.abs(Co) * 1.88726;
                        var Jr = Math.abs(R) * 5.99336 + Math.abs(Ao) * 4.91501 + Math.abs(Do) * 1.88726;
                        var Kr = Math.abs(S) * 5.99336 + Math.abs(Bo) * 4.91501 + Math.abs(Eo) * 1.88726;
                        var Lr = Io * 7.15256e-7 + Lo * 4.93876 + Oo * -0.150521 + Ro;
                        var Mr = Jo * 7.15256e-7 + Mo * 4.93876 + Po * -0.150521 + So;
                        var Nr = Ko * 7.15256e-7 + No * 4.93876 + Qo * -0.150521 + To;
                        var Or = Math.abs(Io) * 5.99336 + Math.abs(Lo) * 4.91501 + Math.abs(Oo) * 1.88726;
                        var Pr = Math.abs(Jo) * 5.99336 + Math.abs(Mo) * 4.91501 + Math.abs(Po) * 1.88726;
                        var Qr = Math.abs(Ko) * 5.99336 + Math.abs(No) * 4.91501 + Math.abs(Qo) * 1.88726;
                        var Rr = Uo * 7.15256e-7 + Xo * 4.93876 + ap * -0.150521 + dp;
                        var Sr = Vo * 7.15256e-7 + Yo * 4.93876 + bp * -0.150521 + ep;
                        var Tr = Wo * 7.15256e-7 + Zo * 4.93876 + cp * -0.150521 + fp;
                        var Ur = Math.abs(Uo) * 5.99336 + Math.abs(Xo) * 4.91501 + Math.abs(ap) * 1.88726;
                        var Vr = Math.abs(Vo) * 5.99336 + Math.abs(Yo) * 4.91501 + Math.abs(bp) * 1.88726;
                        var Wr = Math.abs(Wo) * 5.99336 + Math.abs(Zo) * 4.91501 + Math.abs(cp) * 1.88726;
                        var Xr = gi * 7.15256e-7 + ji * 4.93876 + mi * -0.150521 + gp;
                        var Yr = hi * 7.15256e-7 + ki * 4.93876 + ni * -0.150521 + hp;
                        var Zr = ii * 7.15256e-7 + li * 4.93876 + oi * -0.150521 + ip;
                        var as = Math.abs(gi) * 5.99336 + Math.abs(ji) * 4.91501 + Math.abs(mi) * 1.88726;
                        var bs = Math.abs(hi) * 5.99336 + Math.abs(ki) * 4.91501 + Math.abs(ni) * 1.88726;
                        var cs = Math.abs(ii) * 5.99336 + Math.abs(li) * 4.91501 + Math.abs(oi) * 1.88726;
                        var ds = jp * 7.15256e-7 + mp * 4.93876 + pp * -0.150521 + sp;
                        var es = kp * 7.15256e-7 + np * 4.93876 + qp * -0.150521 + tp;
                        var fs = lp * 7.15256e-7 + op * 4.93876 + rp * -0.150521 + up;
                        var gs = Math.abs(jp) * 5.99336 + Math.abs(mp) * 4.91501 + Math.abs(pp) * 1.88726;
                        var hs = Math.abs(kp) * 5.99336 + Math.abs(np) * 4.91501 + Math.abs(qp) * 1.88726;
                        var js = Math.abs(lp) * 5.99336 + Math.abs(op) * 4.91501 + Math.abs(rp) * 1.88726;
                        var ks = vp * 7.15256e-7 + yp * 4.93876 + Bp * -0.150521 + Ep;
                        var ls = wp * 7.15256e-7 + zp * 4.93876 + Cp * -0.150521 + Fp;
                        var ms = xp * 7.15256e-7 + Ap * 4.93876 + Dp * -0.150521 + Gp;
                        var ns = Math.abs(vp) * 5.99336 + Math.abs(yp) * 4.91501 + Math.abs(Bp) * 1.88726;
                        var os = Math.abs(wp) * 5.99336 + Math.abs(zp) * 4.91501 + Math.abs(Cp) * 1.88726;
                        var ps = Math.abs(xp) * 5.99336 + Math.abs(Ap) * 4.91501 + Math.abs(Dp) * 1.88726;
                        var qs = Rf * 7.15256e-7 + Hp * 4.93876 + Kp * -0.150521 + Np;
                        var rs = Sf * 7.15256e-7 + Ip * 4.93876 + Lp * -0.150521 + Op;
                        var ss = Tf * 7.15256e-7 + Jp * 4.93876 + Mp * -0.150521 + Pp;
                        var ts = Math.abs(Rf) * 5.99336 + Math.abs(Hp) * 4.91501 + Math.abs(Kp) * 1.88726;
                        var us = Math.abs(Sf) * 5.99336 + Math.abs(Ip) * 4.91501 + Math.abs(Lp) * 1.88726;
                        var vs = Math.abs(Tf) * 5.99336 + Math.abs(Jp) * 4.91501 + Math.abs(Mp) * 1.88726;
                        var ws = Qp * 7.15256e-7 + Tp * 4.93876 + Lc * -0.150521 + Wp;
                        var xs = Rp * 7.15256e-7 + Up * 4.93876 + Mc * -0.150521 + Xp;
                        var ys = Sp * 7.15256e-7 + Vp * 4.93876 + Nc * -0.150521 + Yp;
                        var zs = Math.abs(Qp) * 5.99336 + Math.abs(Tp) * 4.91501 + Math.abs(Lc) * 1.88726;
                        var As = Math.abs(Rp) * 5.99336 + Math.abs(Up) * 4.91501 + Math.abs(Mc) * 1.88726;
                        var Bs = Math.abs(Sp) * 5.99336 + Math.abs(Vp) * 4.91501 + Math.abs(Nc) * 1.88726;
                        var Cs = Zp * 7.15256e-7 + cq * 4.93876 + Xc * -0.150521 + fq;
                        var Ds = aq * 7.15256e-7 + dq * 4.93876 + Yc * -0.150521 + gq;
                        var Es = bq * 7.15256e-7 + eq * 4.93876 + Zc * -0.150521 + hq;
                        var Fs = Math.abs(Zp) * 5.99336 + Math.abs(cq) * 4.91501 + Math.abs(Xc) * 1.88726;
                        var Gs = Math.abs(aq) * 5.99336 + Math.abs(dq) * 4.91501 + Math.abs(Yc) * 1.88726;
                        var Hs = Math.abs(bq) * 5.99336 + Math.abs(eq) * 4.91501 + Math.abs(Zc) * 1.88726;
                        var Is = dd * 7.15256e-7 + gd * 4.93876 + jd * -0.150521 + iq;
                        var Js = ed * 7.15256e-7 + hd * 4.93876 + kd * -0.150521 + jq;
                        var Ks = fd * 7.15256e-7 + id * 4.93876 + ld * -0.150521 + kq;
                        var Ls = Math.abs(dd) * 5.99336 + Math.abs(gd) * 4.91501 + Math.abs(jd) * 1.88726;
                        var Ms = Math.abs(ed) * 5.99336 + Math.abs(hd) * 4.91501 + Math.abs(kd) * 1.88726;
                        var Ns = Math.abs(fd) * 5.99336 + Math.abs(id) * 4.91501 + Math.abs(ld) * 1.88726;
                        var Os = lq * 7.15256e-7 + oq * 4.93876 + rq * -0.150521 + uq;
                        var Ps = mq * 7.15256e-7 + pq * 4.93876 + sq * -0.150521 + vq;
                        var Qs = nq * 7.15256e-7 + qq * 4.93876 + tq * -0.150521 + wq;
                        var Rs = Math.abs(lq) * 5.99336 + Math.abs(oq) * 4.91501 + Math.abs(rq) * 1.88726;
                        var Ss = Math.abs(mq) * 5.99336 + Math.abs(pq) * 4.91501 + Math.abs(sq) * 1.88726;
                        var Ts = Math.abs(nq) * 5.99336 + Math.abs(qq) * 4.91501 + Math.abs(tq) * 1.88726;
                        var Us = xq * 7.15256e-7 + Aq * 4.93876 + Dq * -0.150521 + Gq;
                        var Vs = yq * 7.15256e-7 + Bq * 4.93876 + Eq * -0.150521 + Hq;
                        var Ws = zq * 7.15256e-7 + Cq * 4.93876 + Fq * -0.150521 + Iq;
                        var Xs = Math.abs(xq) * 5.99336 + Math.abs(Aq) * 4.91501 + Math.abs(Dq) * 1.88726;
                        var Ys = Math.abs(yq) * 5.99336 + Math.abs(Bq) * 4.91501 + Math.abs(Eq) * 1.88726;
                        var Zs = Math.abs(zq) * 5.99336 + Math.abs(Cq) * 4.91501 + Math.abs(Fq) * 1.88726;
                        var at = Jq * 7.15256e-7 + Mq * 4.93876 + Pq * -0.150521 + Sq;
                        var bt = Kq * 7.15256e-7 + Nq * 4.93876 + Qq * -0.150521 + Tq;
                        var ct = Lq * 7.15256e-7 + Oq * 4.93876 + Rq * -0.150521 + Uq;
                        var dt = Math.abs(Jq) * 5.99336 + Math.abs(Mq) * 4.91501 + Math.abs(Pq) * 1.88726;
                        var et = Math.abs(Kq) * 5.99336 + Math.abs(Nq) * 4.91501 + Math.abs(Qq) * 1.88726;
                        var ft = Math.abs(Lq) * 5.99336 + Math.abs(Oq) * 4.91501 + Math.abs(Rq) * 1.88726;
                        var gt = Vq * 7.15256e-7 + Yq * 4.93876 + br * -0.150521 + er;
                        var ht = Wq * 7.15256e-7 + Zq * 4.93876 + cr * -0.150521 + fr;
                        var it = Xq * 7.15256e-7 + ar * 4.93876 + dr * -0.150521 + gr;
                        var jt = Math.abs(Vq) * 5.99336 + Math.abs(Yq) * 4.91501 + Math.abs(br) * 1.88726;
                        var kt = Math.abs(Wq) * 5.99336 + Math.abs(Zq) * 4.91501 + Math.abs(cr) * 1.88726;
                        var lt = Math.abs(Xq) * 5.99336 + Math.abs(ar) * 4.91501 + Math.abs(dr) * 1.88726;
                        var mt = hr * 7.15256e-7 + kr * 4.93876 + nr * -0.150521 + qr;
                        var nt = ir * 7.15256e-7 + lr * 4.93876 + or * -0.150521 + rr;
                        var ot = jr * 7.15256e-7 + mr * 4.93876 + pr * -0.150521 + sr;
                        var pt = Math.abs(hr) * 5.99336 + Math.abs(kr) * 4.91501 + Math.abs(nr) * 1.88726;
                        var qt = Math.abs(ir) * 5.99336 + Math.abs(lr) * 4.91501 + Math.abs(or) * 1.88726;
                        var rt = Math.abs(jr) * 5.99336 + Math.abs(mr) * 4.91501 + Math.abs(pr) * 1.88726;
                        var st = tr * 7.15256e-7 + wr * 4.93876 + zr * -0.150521 + Cr;
                        var tt = ur * 7.15256e-7 + xr * 4.93876 + Ar * -0.150521 + Dr;
                        var ut = vr * 7.15256e-7 + yr * 4.93876 + Br * -0.150521 + Er;
                        var vt = Math.abs(tr) * 5.99336 + Math.abs(wr) * 4.91501 + Math.abs(zr) * 1.88726;
                        var wt = Math.abs(ur) * 5.99336 + Math.abs(xr) * 4.91501 + Math.abs(Ar) * 1.88726;
                        var xt = Math.abs(vr) * 5.99336 + Math.abs(yr) * 4.91501 + Math.abs(Br) * 1.88726;
                        var yt = Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Fr - Ir, Lr - Or), Rr - Ur), Xr - as), ds - gs), ks - ns), qs - ts), ws - zs), Cs - Fs), Is - Ls), Os - Rs), Us - Xs), at - dt), gt - jt), mt - pt), st - vt);
                        var zt = Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Gr - Jr, Mr - Pr), Sr - Vr), Yr - bs), es - hs), ls - os), rs - us), xs - As), Ds - Gs), Js - Ms), Ps - Ss), Vs - Ys), bt - et), ht - kt), nt - qt), tt - wt);
                        var At = Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Math.min(Hr - Kr, Nr - Qr), Tr - Wr), Zr - cs), fs - js), ms - ps), ss - vs), ys - Bs), Es - Hs), Ks - Ns), Qs - Ts), Ws - Zs), ct - ft), it - lt), ot - rt), ut - xt);
                        var Bt = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Fr + Ir, Lr + Or), Rr + Ur), Xr + as), ds + gs), ks + ns), qs + ts), ws + zs), Cs + Fs), Is + Ls), Os + Rs), Us + Xs), at + dt), gt + jt), mt + pt), st + vt);
                        var Ct = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Gr + Jr, Mr + Pr), Sr + Vr), Yr + bs), es + hs), ls + os), rs + us), xs + As), Ds + Gs), Js + Ms), Ps + Ss), Vs + Ys), bt + et), ht + kt), nt + qt), tt + wt);
                        var Dt = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Hr + Kr, Nr + Qr), Tr + Wr), Zr + cs), fs + js), ms + ps), ss + vs), ys + Bs), Es + Hs), Ks + Ns), Qs + Ts), Ws + Zs), ct + ft), it + lt), ot + rt), ut + xt);
                        ftransforms[48] = 1.0;
                        ftransforms[49] = 0.0;
                        ftransforms[50] = 0.0;
                        ftransforms[51] = 0.0;
                        ftransforms[52] = 0.0;
                        ftransforms[53] = 1.0;
                        ftransforms[54] = 0.0;
                        ftransforms[55] = 0.0;
                        ftransforms[56] = 0.0;
                        ftransforms[57] = 0.0;
                        ftransforms[58] = 1.0;
                        ftransforms[59] = 0.0;
                        ftransforms[60] = 0.0;
                        ftransforms[61] = 0.0;
                        ftransforms[62] = 0.0;
                        ftransforms[63] = 1.0;
                        itransforms[3] = 1;
                        ftransforms[0] = 1.0;
                        ftransforms[1] = 0.0;
                        ftransforms[2] = 0.0;
                        ftransforms[3] = 0.0;
                        ftransforms[4] = 0.0;
                        ftransforms[5] = 1.0;
                        ftransforms[6] = 0.0;
                        ftransforms[7] = 0.0;
                        ftransforms[8] = 0.0;
                        ftransforms[9] = 0.0;
                        ftransforms[10] = 1.0;
                        ftransforms[11] = 0.0;
                        ftransforms[12] = 0.0;
                        ftransforms[13] = 0.0;
                        ftransforms[14] = 0.0;
                        ftransforms[15] = 1.0;
                        itransforms[0] = 1;
                        ftransforms[32] = 1.0;
                        ftransforms[33] = 0.0;
                        ftransforms[34] = 0.0;
                        ftransforms[35] = 0.0;
                        ftransforms[36] = 0.0;
                        ftransforms[37] = 1.0;
                        ftransforms[38] = 0.0;
                        ftransforms[39] = 0.0;
                        ftransforms[40] = 0.0;
                        ftransforms[41] = 0.0;
                        ftransforms[42] = 1.0;
                        ftransforms[43] = 0.0;
                        ftransforms[44] = 0.0;
                        ftransforms[45] = 0.0;
                        ftransforms[46] = 0.0;
                        ftransforms[47] = 1.0;
                        itransforms[2] = 1;
                        ftransforms[64] = 1.0;
                        ftransforms[65] = 0.0;
                        ftransforms[66] = 0.0;
                        ftransforms[67] = 0.0;
                        ftransforms[68] = 0.0;
                        ftransforms[69] = 1.0;
                        ftransforms[70] = 0.0;
                        ftransforms[71] = 0.0;
                        ftransforms[72] = 0.0;
                        ftransforms[73] = 0.0;
                        ftransforms[74] = 1.0;
                        ftransforms[75] = 0.0;
                        ftransforms[76] = 0.0;
                        ftransforms[77] = 0.0;
                        ftransforms[78] = 0.0;
                        ftransforms[79] = 1.0;
                        itransforms[4] = 1;
                        ftransforms[16] = 1.0;
                        ftransforms[17] = 0.0;
                        ftransforms[18] = 0.0;
                        ftransforms[19] = 0.0;
                        ftransforms[20] = 0.0;
                        ftransforms[21] = 1.0;
                        ftransforms[22] = 0.0;
                        ftransforms[23] = 0.0;
                        ftransforms[24] = 0.0;
                        ftransforms[25] = 0.0;
                        ftransforms[26] = 1.0;
                        ftransforms[27] = 0.0;
                        ftransforms[28] = 0.0;
                        ftransforms[29] = 0.0;
                        ftransforms[30] = 0.0210634;
                        ftransforms[31] = 1.0;
                        itransforms[1] = 1;
                        ftransforms[80] = 1.0;
                        ftransforms[81] = 0.0;
                        ftransforms[82] = 0.0;
                        ftransforms[83] = 0.0;
                        ftransforms[84] = 0.0;
                        ftransforms[85] = 1.0;
                        ftransforms[86] = 0.0;
                        ftransforms[87] = 0.0;
                        ftransforms[88] = 0.0;
                        ftransforms[89] = 0.0;
                        ftransforms[90] = 1.0;
                        ftransforms[91] = 0.0;
                        ftransforms[92] = 0.0;
                        ftransforms[93] = 0.0;
                        ftransforms[94] = 0.0;
                        ftransforms[95] = 1.0;
                        itransforms[5] = 1;
                        fboundingBoxes[0] = (wo + to) * 0.5;
                        fboundingBoxes[1] = (xo + uo) * 0.5;
                        fboundingBoxes[2] = (yo + vo) * 0.5;
                        fboundingBoxes[3] = (wo - to) * 0.5;
                        fboundingBoxes[4] = (xo - uo) * 0.5;
                        fboundingBoxes[5] = (yo - vo) * 0.5;
                        fboundingBoxes[6] = (Xn + Un) * 0.5;
                        fboundingBoxes[7] = (Yn + Vn) * 0.5;
                        fboundingBoxes[8] = (Zn + Wn) * 0.5;
                        fboundingBoxes[9] = (Xn - Un) * 0.5;
                        fboundingBoxes[10] = (Yn - Vn) * 0.5;
                        fboundingBoxes[11] = (Zn - Wn) * 0.5;
                        fboundingBoxes[12] = (Bt + yt) * 0.5;
                        fboundingBoxes[13] = (Ct + zt) * 0.5;
                        fboundingBoxes[14] = (Dt + At) * 0.5;
                        fboundingBoxes[15] = (Bt - yt) * 0.5;
                        fboundingBoxes[16] = (Ct - zt) * 0.5;
                        fboundingBoxes[17] = (Dt - At) * 0.5;
                        fboundingBoxes[18] = (Cn + zn) * 0.5;
                        fboundingBoxes[19] = (Dn + An) * 0.5;
                        fboundingBoxes[20] = (En + Bn) * 0.5;
                        fboundingBoxes[21] = (Cn - zn) * 0.5;
                        fboundingBoxes[22] = (Dn - An) * 0.5;
                        fboundingBoxes[23] = (En - Bn) * 0.5;
                        fboundingBoxes[24] = (fl + cl) * 0.5;
                        fboundingBoxes[25] = (gl + dl) * 0.5;
                        fboundingBoxes[26] = (hl + el) * 0.5;
                        fboundingBoxes[27] = (fl - cl) * 0.5;
                        fboundingBoxes[28] = (gl - dl) * 0.5;
                        fboundingBoxes[29] = (hl - el) * 0.5;
                        fboundingBoxes[30] = (Lm + Im) * 0.5;
                        fboundingBoxes[31] = (Mm + Jm) * 0.5;
                        fboundingBoxes[32] = (Nm + Km) * 0.5;
                        fboundingBoxes[33] = (Lm - Im) * 0.5;
                        fboundingBoxes[34] = (Mm - Jm) * 0.5;
                        fboundingBoxes[35] = (Nm - Km) * 0.5;
                        funiforms[0] = ao;
                        funiforms[1] = bo;
                        funiforms[2] = co;
                        funiforms[3] = ko;
                        funiforms[4] = eo;
                        funiforms[5] = fo;
                        funiforms[6] = go;
                        funiforms[7] = lo;
                        funiforms[8] = ho;
                        funiforms[9] = io;
                        funiforms[10] = jo;
                        funiforms[11] = mo;
                        funiforms[12] = Q;
                        funiforms[13] = R;
                        funiforms[14] = S;
                        funiforms[15] = Fo;
                        funiforms[16] = zo;
                        funiforms[17] = Ao;
                        funiforms[18] = Bo;
                        funiforms[19] = Go;
                        funiforms[20] = Co;
                        funiforms[21] = Do;
                        funiforms[22] = Eo;
                        funiforms[23] = Ho;
                        funiforms[132] = lq;
                        funiforms[133] = mq;
                        funiforms[134] = nq;
                        funiforms[135] = uq;
                        funiforms[136] = oq;
                        funiforms[137] = pq;
                        funiforms[138] = qq;
                        funiforms[139] = vq;
                        funiforms[140] = rq;
                        funiforms[141] = sq;
                        funiforms[142] = tq;
                        funiforms[143] = wq;
                        funiforms[144] = xq;
                        funiforms[145] = yq;
                        funiforms[146] = zq;
                        funiforms[147] = Gq;
                        funiforms[148] = Aq;
                        funiforms[149] = Bq;
                        funiforms[150] = Cq;
                        funiforms[151] = Hq;
                        funiforms[152] = Dq;
                        funiforms[153] = Eq;
                        funiforms[154] = Fq;
                        funiforms[155] = Iq;
                        funiforms[156] = Jq;
                        funiforms[157] = Kq;
                        funiforms[158] = Lq;
                        funiforms[159] = Sq;
                        funiforms[160] = Mq;
                        funiforms[161] = Nq;
                        funiforms[162] = Oq;
                        funiforms[163] = Tq;
                        funiforms[164] = Pq;
                        funiforms[165] = Qq;
                        funiforms[166] = Rq;
                        funiforms[167] = Uq;
                        funiforms[168] = Vq;
                        funiforms[169] = Wq;
                        funiforms[170] = Xq;
                        funiforms[171] = er;
                        funiforms[172] = Yq;
                        funiforms[173] = Zq;
                        funiforms[174] = ar;
                        funiforms[175] = fr;
                        funiforms[176] = br;
                        funiforms[177] = cr;
                        funiforms[178] = dr;
                        funiforms[179] = gr;
                        funiforms[180] = hr;
                        funiforms[181] = ir;
                        funiforms[182] = jr;
                        funiforms[183] = qr;
                        funiforms[184] = kr;
                        funiforms[185] = lr;
                        funiforms[186] = mr;
                        funiforms[187] = rr;
                        funiforms[188] = nr;
                        funiforms[189] = or;
                        funiforms[190] = pr;
                        funiforms[191] = sr;
                        funiforms[192] = tr;
                        funiforms[193] = ur;
                        funiforms[194] = vr;
                        funiforms[195] = Cr;
                        funiforms[196] = wr;
                        funiforms[197] = xr;
                        funiforms[198] = yr;
                        funiforms[199] = Dr;
                        funiforms[200] = zr;
                        funiforms[201] = Ar;
                        funiforms[202] = Br;
                        funiforms[203] = Er;
                        funiforms[24] = Io;
                        funiforms[25] = Jo;
                        funiforms[26] = Ko;
                        funiforms[27] = Ro;
                        funiforms[28] = Lo;
                        funiforms[29] = Mo;
                        funiforms[30] = No;
                        funiforms[31] = So;
                        funiforms[32] = Oo;
                        funiforms[33] = Po;
                        funiforms[34] = Qo;
                        funiforms[35] = To;
                        funiforms[36] = Uo;
                        funiforms[37] = Vo;
                        funiforms[38] = Wo;
                        funiforms[39] = dp;
                        funiforms[40] = Xo;
                        funiforms[41] = Yo;
                        funiforms[42] = Zo;
                        funiforms[43] = ep;
                        funiforms[44] = ap;
                        funiforms[45] = bp;
                        funiforms[46] = cp;
                        funiforms[47] = fp;
                        funiforms[48] = gi;
                        funiforms[49] = hi;
                        funiforms[50] = ii;
                        funiforms[51] = gp;
                        funiforms[52] = ji;
                        funiforms[53] = ki;
                        funiforms[54] = li;
                        funiforms[55] = hp;
                        funiforms[56] = mi;
                        funiforms[57] = ni;
                        funiforms[58] = oi;
                        funiforms[59] = ip;
                        funiforms[60] = jp;
                        funiforms[61] = kp;
                        funiforms[62] = lp;
                        funiforms[63] = sp;
                        funiforms[64] = mp;
                        funiforms[65] = np;
                        funiforms[66] = op;
                        funiforms[67] = tp;
                        funiforms[68] = pp;
                        funiforms[69] = qp;
                        funiforms[70] = rp;
                        funiforms[71] = up;
                        funiforms[72] = vp;
                        funiforms[73] = wp;
                        funiforms[74] = xp;
                        funiforms[75] = Ep;
                        funiforms[76] = yp;
                        funiforms[77] = zp;
                        funiforms[78] = Ap;
                        funiforms[79] = Fp;
                        funiforms[80] = Bp;
                        funiforms[81] = Cp;
                        funiforms[82] = Dp;
                        funiforms[83] = Gp;
                        funiforms[84] = Rf;
                        funiforms[85] = Sf;
                        funiforms[86] = Tf;
                        funiforms[87] = Np;
                        funiforms[88] = Hp;
                        funiforms[89] = Ip;
                        funiforms[90] = Jp;
                        funiforms[91] = Op;
                        funiforms[92] = Kp;
                        funiforms[93] = Lp;
                        funiforms[94] = Mp;
                        funiforms[95] = Pp;
                        funiforms[96] = Qp;
                        funiforms[97] = Rp;
                        funiforms[98] = Sp;
                        funiforms[99] = Wp;
                        funiforms[100] = Tp;
                        funiforms[101] = Up;
                        funiforms[102] = Vp;
                        funiforms[103] = Xp;
                        funiforms[104] = Lc;
                        funiforms[105] = Mc;
                        funiforms[106] = Nc;
                        funiforms[107] = Yp;
                        funiforms[108] = Zp;
                        funiforms[109] = aq;
                        funiforms[110] = bq;
                        funiforms[111] = fq;
                        funiforms[112] = cq;
                        funiforms[113] = dq;
                        funiforms[114] = eq;
                        funiforms[115] = gq;
                        funiforms[116] = Xc;
                        funiforms[117] = Yc;
                        funiforms[118] = Zc;
                        funiforms[119] = hq;
                        funiforms[120] = dd;
                        funiforms[121] = ed;
                        funiforms[122] = fd;
                        funiforms[123] = iq;
                        funiforms[124] = gd;
                        funiforms[125] = hd;
                        funiforms[126] = id;
                        funiforms[127] = jq;
                        funiforms[128] = jd;
                        funiforms[129] = kd;
                        funiforms[130] = ld;
                        funiforms[131] = kq;
                        funiforms[204] = sk;
                        funiforms[205] = tk;
                        funiforms[206] = uk;
                        funiforms[207] = Bk;
                        funiforms[208] = vk;
                        funiforms[209] = wk;
                        funiforms[210] = xk;
                        funiforms[211] = Ck;
                        funiforms[212] = yk;
                        funiforms[213] = zk;
                        funiforms[214] = Ak;
                        funiforms[215] = Dk;
                        funiforms[216] = Ek;
                        funiforms[217] = Fk;
                        funiforms[218] = Gk;
                        funiforms[219] = Nk;
                        funiforms[220] = Hk;
                        funiforms[221] = Ik;
                        funiforms[222] = Jk;
                        funiforms[223] = Ok;
                        funiforms[224] = Kk;
                        funiforms[225] = Lk;
                        funiforms[226] = Mk;
                        funiforms[227] = Pk;
                        funiforms[228] = Q;
                        funiforms[229] = R;
                        funiforms[230] = S;
                        funiforms[231] = Ln;
                        funiforms[232] = Fn;
                        funiforms[233] = Gn;
                        funiforms[234] = Hn;
                        funiforms[235] = Mn;
                        funiforms[236] = In;
                        funiforms[237] = Jn;
                        funiforms[238] = Kn;
                        funiforms[239] = Nn;
                        funiforms[240] = Om;
                        funiforms[241] = Pm;
                        funiforms[242] = Qm;
                        funiforms[243] = Xm;
                        funiforms[244] = Rm;
                        funiforms[245] = Sm;
                        funiforms[246] = Tm;
                        funiforms[247] = Ym;
                        funiforms[248] = Um;
                        funiforms[249] = Vm;
                        funiforms[250] = Wm;
                        funiforms[251] = Zm;
                        funiforms[252] = an;
                        funiforms[253] = bn;
                        funiforms[254] = cn;
                        funiforms[255] = kn;
                        funiforms[256] = dn;
                        funiforms[257] = en;
                        funiforms[258] = fn;
                        funiforms[259] = ln;
                        funiforms[260] = gn;
                        funiforms[261] = hn;
                        funiforms[262] = jn;
                        funiforms[263] = mn;
                        funiforms[264] = il;
                        funiforms[265] = jl;
                        funiforms[266] = kl;
                        funiforms[267] = rl;
                        funiforms[268] = ll;
                        funiforms[269] = ml;
                        funiforms[270] = nl;
                        funiforms[271] = sl;
                        funiforms[272] = ol;
                        funiforms[273] = pl;
                        funiforms[274] = ql;
                        funiforms[275] = tl;
                        funiforms[276] = ul;
                        funiforms[277] = vl;
                        funiforms[278] = wl;
                        funiforms[279] = Dl;
                        funiforms[280] = xl;
                        funiforms[281] = yl;
                        funiforms[282] = zl;
                        funiforms[283] = El;
                        funiforms[284] = Al;
                        funiforms[285] = Bl;
                        funiforms[286] = Cl;
                        funiforms[287] = Fl;
                        funiforms[288] = gi;
                        funiforms[289] = hi;
                        funiforms[290] = ii;
                        funiforms[291] = Gl;
                        funiforms[292] = ji;
                        funiforms[293] = ki;
                        funiforms[294] = li;
                        funiforms[295] = Hl;
                        funiforms[296] = mi;
                        funiforms[297] = ni;
                        funiforms[298] = oi;
                        funiforms[299] = Il;
                        funiforms[300] = Jl;
                        funiforms[301] = Kl;
                        funiforms[302] = Ll;
                        funiforms[303] = Sl;
                        funiforms[304] = Ml;
                        funiforms[305] = Nl;
                        funiforms[306] = Ol;
                        funiforms[307] = Tl;
                        funiforms[308] = Pl;
                        funiforms[309] = Ql;
                        funiforms[310] = Rl;
                        funiforms[311] = Ul;
                        funiforms[312] = Vl;
                        funiforms[313] = Wl;
                        funiforms[314] = Xl;
                        funiforms[315] = bm;
                        funiforms[316] = Yl;
                        funiforms[317] = Zl;
                        funiforms[318] = am;
                        funiforms[319] = cm;
                        funiforms[320] = Lc;
                        funiforms[321] = Mc;
                        funiforms[322] = Nc;
                        funiforms[323] = dm;
                        ouniforms[0] = ostate[0];
                        ouniforms[1] = ostate[1];
                    };

                    instance.render = function(viewMatrix, projectionMatrix, layerName, renderQueues)
                    {
                        instance.renderSequence = ++global.sequence;
                        var viewProjectionMatrix = instance.viewProjectionMatrix;
                        engine.matrix4x4Mul(projectionMatrix, viewMatrix, viewProjectionMatrix);
                        var funiforms = instance.funiforms;
                        var ouniforms = instance.ouniforms;
                        var itransforms = instance.itransforms;
                        var ftransforms = instance.ftransforms;
                        var fboundingBoxes = instance.fboundingBoxes;

                        // mesh, deformer 'polySurface12Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface12Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[8];
                        _b[25] = funiforms[9];
                        _b[26] = funiforms[10];
                        _b[27] = funiforms[11];
                        _b[20] = funiforms[4];
                        _b[21] = funiforms[5];
                        _b[22] = funiforms[6];
                        _b[23] = funiforms[7];
                        _b[16] = funiforms[0];
                        _b[17] = funiforms[1];
                        _b[18] = funiforms[2];
                        _b[19] = funiforms[3];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'polySurface8Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface8Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[144] = funiforms[20];
                        _b[145] = funiforms[21];
                        _b[146] = funiforms[22];
                        _b[147] = funiforms[23];
                        _b[148] = funiforms[32];
                        _b[149] = funiforms[33];
                        _b[150] = funiforms[34];
                        _b[151] = funiforms[35];
                        _b[152] = funiforms[44];
                        _b[153] = funiforms[45];
                        _b[154] = funiforms[46];
                        _b[155] = funiforms[47];
                        _b[156] = funiforms[56];
                        _b[157] = funiforms[57];
                        _b[158] = funiforms[58];
                        _b[159] = funiforms[59];
                        _b[160] = funiforms[68];
                        _b[161] = funiforms[69];
                        _b[162] = funiforms[70];
                        _b[163] = funiforms[71];
                        _b[164] = funiforms[80];
                        _b[165] = funiforms[81];
                        _b[166] = funiforms[82];
                        _b[167] = funiforms[83];
                        _b[168] = funiforms[92];
                        _b[169] = funiforms[93];
                        _b[170] = funiforms[94];
                        _b[171] = funiforms[95];
                        _b[172] = funiforms[104];
                        _b[173] = funiforms[105];
                        _b[174] = funiforms[106];
                        _b[175] = funiforms[107];
                        _b[176] = funiforms[116];
                        _b[177] = funiforms[117];
                        _b[178] = funiforms[118];
                        _b[179] = funiforms[119];
                        _b[180] = funiforms[128];
                        _b[181] = funiforms[129];
                        _b[182] = funiforms[130];
                        _b[183] = funiforms[131];
                        _b[184] = funiforms[140];
                        _b[185] = funiforms[141];
                        _b[186] = funiforms[142];
                        _b[187] = funiforms[143];
                        _b[188] = funiforms[152];
                        _b[189] = funiforms[153];
                        _b[190] = funiforms[154];
                        _b[191] = funiforms[155];
                        _b[192] = funiforms[164];
                        _b[193] = funiforms[165];
                        _b[194] = funiforms[166];
                        _b[195] = funiforms[167];
                        _b[196] = funiforms[176];
                        _b[197] = funiforms[177];
                        _b[198] = funiforms[178];
                        _b[199] = funiforms[179];
                        _b[200] = funiforms[188];
                        _b[201] = funiforms[189];
                        _b[202] = funiforms[190];
                        _b[203] = funiforms[191];
                        _b[204] = funiforms[200];
                        _b[205] = funiforms[201];
                        _b[206] = funiforms[202];
                        _b[207] = funiforms[203];
                        _b[80] = funiforms[16];
                        _b[81] = funiforms[17];
                        _b[82] = funiforms[18];
                        _b[83] = funiforms[19];
                        _b[84] = funiforms[28];
                        _b[85] = funiforms[29];
                        _b[86] = funiforms[30];
                        _b[87] = funiforms[31];
                        _b[88] = funiforms[40];
                        _b[89] = funiforms[41];
                        _b[90] = funiforms[42];
                        _b[91] = funiforms[43];
                        _b[92] = funiforms[52];
                        _b[93] = funiforms[53];
                        _b[94] = funiforms[54];
                        _b[95] = funiforms[55];
                        _b[96] = funiforms[64];
                        _b[97] = funiforms[65];
                        _b[98] = funiforms[66];
                        _b[99] = funiforms[67];
                        _b[100] = funiforms[76];
                        _b[101] = funiforms[77];
                        _b[102] = funiforms[78];
                        _b[103] = funiforms[79];
                        _b[104] = funiforms[88];
                        _b[105] = funiforms[89];
                        _b[106] = funiforms[90];
                        _b[107] = funiforms[91];
                        _b[108] = funiforms[100];
                        _b[109] = funiforms[101];
                        _b[110] = funiforms[102];
                        _b[111] = funiforms[103];
                        _b[112] = funiforms[112];
                        _b[113] = funiforms[113];
                        _b[114] = funiforms[114];
                        _b[115] = funiforms[115];
                        _b[116] = funiforms[124];
                        _b[117] = funiforms[125];
                        _b[118] = funiforms[126];
                        _b[119] = funiforms[127];
                        _b[120] = funiforms[136];
                        _b[121] = funiforms[137];
                        _b[122] = funiforms[138];
                        _b[123] = funiforms[139];
                        _b[124] = funiforms[148];
                        _b[125] = funiforms[149];
                        _b[126] = funiforms[150];
                        _b[127] = funiforms[151];
                        _b[128] = funiforms[160];
                        _b[129] = funiforms[161];
                        _b[130] = funiforms[162];
                        _b[131] = funiforms[163];
                        _b[132] = funiforms[172];
                        _b[133] = funiforms[173];
                        _b[134] = funiforms[174];
                        _b[135] = funiforms[175];
                        _b[136] = funiforms[184];
                        _b[137] = funiforms[185];
                        _b[138] = funiforms[186];
                        _b[139] = funiforms[187];
                        _b[140] = funiforms[196];
                        _b[141] = funiforms[197];
                        _b[142] = funiforms[198];
                        _b[143] = funiforms[199];
                        _b[16] = funiforms[12];
                        _b[17] = funiforms[13];
                        _b[18] = funiforms[14];
                        _b[19] = funiforms[15];
                        _b[20] = funiforms[24];
                        _b[21] = funiforms[25];
                        _b[22] = funiforms[26];
                        _b[23] = funiforms[27];
                        _b[24] = funiforms[36];
                        _b[25] = funiforms[37];
                        _b[26] = funiforms[38];
                        _b[27] = funiforms[39];
                        _b[28] = funiforms[48];
                        _b[29] = funiforms[49];
                        _b[30] = funiforms[50];
                        _b[31] = funiforms[51];
                        _b[32] = funiforms[60];
                        _b[33] = funiforms[61];
                        _b[34] = funiforms[62];
                        _b[35] = funiforms[63];
                        _b[36] = funiforms[72];
                        _b[37] = funiforms[73];
                        _b[38] = funiforms[74];
                        _b[39] = funiforms[75];
                        _b[40] = funiforms[84];
                        _b[41] = funiforms[85];
                        _b[42] = funiforms[86];
                        _b[43] = funiforms[87];
                        _b[44] = funiforms[96];
                        _b[45] = funiforms[97];
                        _b[46] = funiforms[98];
                        _b[47] = funiforms[99];
                        _b[48] = funiforms[108];
                        _b[49] = funiforms[109];
                        _b[50] = funiforms[110];
                        _b[51] = funiforms[111];
                        _b[52] = funiforms[120];
                        _b[53] = funiforms[121];
                        _b[54] = funiforms[122];
                        _b[55] = funiforms[123];
                        _b[56] = funiforms[132];
                        _b[57] = funiforms[133];
                        _b[58] = funiforms[134];
                        _b[59] = funiforms[135];
                        _b[60] = funiforms[144];
                        _b[61] = funiforms[145];
                        _b[62] = funiforms[146];
                        _b[63] = funiforms[147];
                        _b[64] = funiforms[156];
                        _b[65] = funiforms[157];
                        _b[66] = funiforms[158];
                        _b[67] = funiforms[159];
                        _b[68] = funiforms[168];
                        _b[69] = funiforms[169];
                        _b[70] = funiforms[170];
                        _b[71] = funiforms[171];
                        _b[72] = funiforms[180];
                        _b[73] = funiforms[181];
                        _b[74] = funiforms[182];
                        _b[75] = funiforms[183];
                        _b[76] = funiforms[192];
                        _b[77] = funiforms[193];
                        _b[78] = funiforms[194];
                        _b[79] = funiforms[195];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__pasted__qianShape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_pasted____pasted____qianShape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[32] = funiforms[212];
                        _b[33] = funiforms[213];
                        _b[34] = funiforms[214];
                        _b[35] = funiforms[215];
                        _b[36] = funiforms[224];
                        _b[37] = funiforms[225];
                        _b[38] = funiforms[226];
                        _b[39] = funiforms[227];
                        _b[24] = funiforms[208];
                        _b[25] = funiforms[209];
                        _b[26] = funiforms[210];
                        _b[27] = funiforms[211];
                        _b[28] = funiforms[220];
                        _b[29] = funiforms[221];
                        _b[30] = funiforms[222];
                        _b[31] = funiforms[223];
                        _b[16] = funiforms[204];
                        _b[17] = funiforms[205];
                        _b[18] = funiforms[206];
                        _b[19] = funiforms[207];
                        _b[20] = funiforms[216];
                        _b[21] = funiforms[217];
                        _b[22] = funiforms[218];
                        _b[23] = funiforms[219];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'polySurface11Shape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_polySurface11Shape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[24] = funiforms[236];
                        _b[25] = funiforms[237];
                        _b[26] = funiforms[238];
                        _b[27] = funiforms[239];
                        _b[20] = funiforms[232];
                        _b[21] = funiforms[233];
                        _b[22] = funiforms[234];
                        _b[23] = funiforms[235];
                        _b[16] = funiforms[228];
                        _b[17] = funiforms[229];
                        _b[18] = funiforms[230];
                        _b[19] = funiforms[231];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__qianShape', shader 'pasted__lambert4'
                        var s_ = instance.shaders.m_pasted____qianShape_pasted____lambert4;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[32] = funiforms[248];
                        _b[33] = funiforms[249];
                        _b[34] = funiforms[250];
                        _b[35] = funiforms[251];
                        _b[36] = funiforms[260];
                        _b[37] = funiforms[261];
                        _b[38] = funiforms[262];
                        _b[39] = funiforms[263];
                        _b[24] = funiforms[244];
                        _b[25] = funiforms[245];
                        _b[26] = funiforms[246];
                        _b[27] = funiforms[247];
                        _b[28] = funiforms[256];
                        _b[29] = funiforms[257];
                        _b[30] = funiforms[258];
                        _b[31] = funiforms[259];
                        _b[16] = funiforms[240];
                        _b[17] = funiforms[241];
                        _b[18] = funiforms[242];
                        _b[19] = funiforms[243];
                        _b[20] = funiforms[252];
                        _b[21] = funiforms[253];
                        _b[22] = funiforms[254];
                        _b[23] = funiforms[255];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[0];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface261Shape', shader 'pasted__pasted__phong1'
                        var s_ = instance.shaders.m_pasted____polySurface261Shape_pasted____pasted____phong1;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _a = s_.transfer._a;
                        _b[56] = funiforms[272];
                        _b[57] = funiforms[273];
                        _b[58] = funiforms[274];
                        _b[59] = funiforms[275];
                        _b[60] = funiforms[284];
                        _b[61] = funiforms[285];
                        _b[62] = funiforms[286];
                        _b[63] = funiforms[287];
                        _b[64] = funiforms[296];
                        _b[65] = funiforms[297];
                        _b[66] = funiforms[298];
                        _b[67] = funiforms[299];
                        _b[68] = funiforms[308];
                        _b[69] = funiforms[309];
                        _b[70] = funiforms[310];
                        _b[71] = funiforms[311];
                        _b[72] = funiforms[320];
                        _b[73] = funiforms[321];
                        _b[74] = funiforms[322];
                        _b[75] = funiforms[323];
                        _b[36] = funiforms[268];
                        _b[37] = funiforms[269];
                        _b[38] = funiforms[270];
                        _b[39] = funiforms[271];
                        _b[40] = funiforms[280];
                        _b[41] = funiforms[281];
                        _b[42] = funiforms[282];
                        _b[43] = funiforms[283];
                        _b[44] = funiforms[292];
                        _b[45] = funiforms[293];
                        _b[46] = funiforms[294];
                        _b[47] = funiforms[295];
                        _b[48] = funiforms[304];
                        _b[49] = funiforms[305];
                        _b[50] = funiforms[306];
                        _b[51] = funiforms[307];
                        _b[52] = funiforms[316];
                        _b[53] = funiforms[317];
                        _b[54] = funiforms[318];
                        _b[55] = funiforms[319];
                        _b[16] = funiforms[264];
                        _b[17] = funiforms[265];
                        _b[18] = funiforms[266];
                        _b[19] = funiforms[267];
                        _b[20] = funiforms[276];
                        _b[21] = funiforms[277];
                        _b[22] = funiforms[278];
                        _b[23] = funiforms[279];
                        _b[24] = funiforms[288];
                        _b[25] = funiforms[289];
                        _b[26] = funiforms[290];
                        _b[27] = funiforms[291];
                        _b[28] = funiforms[300];
                        _b[29] = funiforms[301];
                        _b[30] = funiforms[302];
                        _b[31] = funiforms[303];
                        _b[32] = funiforms[312];
                        _b[33] = funiforms[313];
                        _b[34] = funiforms[314];
                        _b[35] = funiforms[315];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        s_.renderJobs = null;
                        // mesh, deformer 'pasted__polySurface261Shape', shader 'pasted__pasted__lambert2'
                        var s_ = instance.shaders.m_pasted____polySurface261Shape_pasted____pasted____lambert2;
                        var uniform = s_.uniform;
                        var _b = uniform._b;
                        var _c = uniform._c;
                        var _a = s_.transfer._a;
                        _b[56] = funiforms[272];
                        _b[57] = funiforms[273];
                        _b[58] = funiforms[274];
                        _b[59] = funiforms[275];
                        _b[60] = funiforms[284];
                        _b[61] = funiforms[285];
                        _b[62] = funiforms[286];
                        _b[63] = funiforms[287];
                        _b[64] = funiforms[296];
                        _b[65] = funiforms[297];
                        _b[66] = funiforms[298];
                        _b[67] = funiforms[299];
                        _b[68] = funiforms[308];
                        _b[69] = funiforms[309];
                        _b[70] = funiforms[310];
                        _b[71] = funiforms[311];
                        _b[72] = funiforms[320];
                        _b[73] = funiforms[321];
                        _b[74] = funiforms[322];
                        _b[75] = funiforms[323];
                        _b[36] = funiforms[268];
                        _b[37] = funiforms[269];
                        _b[38] = funiforms[270];
                        _b[39] = funiforms[271];
                        _b[40] = funiforms[280];
                        _b[41] = funiforms[281];
                        _b[42] = funiforms[282];
                        _b[43] = funiforms[283];
                        _b[44] = funiforms[292];
                        _b[45] = funiforms[293];
                        _b[46] = funiforms[294];
                        _b[47] = funiforms[295];
                        _b[48] = funiforms[304];
                        _b[49] = funiforms[305];
                        _b[50] = funiforms[306];
                        _b[51] = funiforms[307];
                        _b[52] = funiforms[316];
                        _b[53] = funiforms[317];
                        _b[54] = funiforms[318];
                        _b[55] = funiforms[319];
                        _b[16] = funiforms[264];
                        _b[17] = funiforms[265];
                        _b[18] = funiforms[266];
                        _b[19] = funiforms[267];
                        _b[20] = funiforms[276];
                        _b[21] = funiforms[277];
                        _b[22] = funiforms[278];
                        _b[23] = funiforms[279];
                        _b[24] = funiforms[288];
                        _b[25] = funiforms[289];
                        _b[26] = funiforms[290];
                        _b[27] = funiforms[291];
                        _b[28] = funiforms[300];
                        _b[29] = funiforms[301];
                        _b[30] = funiforms[302];
                        _b[31] = funiforms[303];
                        _b[32] = funiforms[312];
                        _b[33] = funiforms[313];
                        _b[34] = funiforms[314];
                        _b[35] = funiforms[315];
                        _a[0] = viewMatrix[0];
                        _a[1] = viewMatrix[1];
                        _a[2] = viewMatrix[2];
                        _a[3] = viewMatrix[3];
                        _a[4] = viewMatrix[4];
                        _a[5] = viewMatrix[5];
                        _a[6] = viewMatrix[6];
                        _a[7] = viewMatrix[7];
                        _a[8] = viewMatrix[8];
                        _a[9] = viewMatrix[9];
                        _a[10] = viewMatrix[10];
                        _a[11] = viewMatrix[11];
                        _a[12] = viewMatrix[12];
                        _a[13] = viewMatrix[13];
                        _a[14] = viewMatrix[14];
                        _a[15] = viewMatrix[15];
                        _b[0] = projectionMatrix[0];
                        _b[1] = projectionMatrix[1];
                        _b[2] = projectionMatrix[2];
                        _b[3] = projectionMatrix[3];
                        _b[4] = projectionMatrix[4];
                        _b[5] = projectionMatrix[5];
                        _b[6] = projectionMatrix[6];
                        _b[7] = projectionMatrix[7];
                        _b[8] = projectionMatrix[8];
                        _b[9] = projectionMatrix[9];
                        _b[10] = projectionMatrix[10];
                        _b[11] = projectionMatrix[11];
                        _b[12] = projectionMatrix[12];
                        _b[13] = projectionMatrix[13];
                        _b[14] = projectionMatrix[14];
                        _b[15] = projectionMatrix[15];
                        uniform._c = ouniforms[1];
                        s_.renderJobs = null;

                        var jobIt = renderQueues.begin;
                        var jobEnd = renderQueues.end;
                        if (itransforms[0])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface12Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface12Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[0];
                                data[1] = ftransforms[1];
                                data[2] = ftransforms[2];
                                data[3] = ftransforms[3];
                                data[4] = ftransforms[4];
                                data[5] = ftransforms[5];
                                data[6] = ftransforms[6];
                                data[7] = ftransforms[7];
                                data[8] = ftransforms[8];
                                data[9] = ftransforms[9];
                                data[10] = ftransforms[10];
                                data[11] = ftransforms[11];
                                data[12] = ftransforms[12];
                                data[13] = ftransforms[13];
                                data[14] = ftransforms[14];
                                data[15] = ftransforms[15];
                                renderJob.draw = global.draw.a;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[1])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface11Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface11Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[16];
                                data[1] = ftransforms[17];
                                data[2] = ftransforms[18];
                                data[3] = ftransforms[19];
                                data[4] = ftransforms[20];
                                data[5] = ftransforms[21];
                                data[6] = ftransforms[22];
                                data[7] = ftransforms[23];
                                data[8] = ftransforms[24];
                                data[9] = ftransforms[25];
                                data[10] = ftransforms[26];
                                data[11] = ftransforms[27];
                                data[12] = ftransforms[28];
                                data[13] = ftransforms[29];
                                data[14] = ftransforms[30];
                                data[15] = ftransforms[31];
                                renderJob.draw = global.draw.b;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[2])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_polySurface8Shape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_polySurface8Shape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[32];
                                data[1] = ftransforms[33];
                                data[2] = ftransforms[34];
                                data[3] = ftransforms[35];
                                data[4] = ftransforms[36];
                                data[5] = ftransforms[37];
                                data[6] = ftransforms[38];
                                data[7] = ftransforms[39];
                                data[8] = ftransforms[40];
                                data[9] = ftransforms[41];
                                data[10] = ftransforms[42];
                                data[11] = ftransforms[43];
                                data[12] = ftransforms[44];
                                data[13] = ftransforms[45];
                                data[14] = ftransforms[46];
                                data[15] = ftransforms[47];
                                renderJob.draw = global.draw.e;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[3])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____qianShape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____qianShape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[48];
                                data[1] = ftransforms[49];
                                data[2] = ftransforms[50];
                                data[3] = ftransforms[51];
                                data[4] = ftransforms[52];
                                data[5] = ftransforms[53];
                                data[6] = ftransforms[54];
                                data[7] = ftransforms[55];
                                data[8] = ftransforms[56];
                                data[9] = ftransforms[57];
                                data[10] = ftransforms[58];
                                data[11] = ftransforms[59];
                                data[12] = ftransforms[60];
                                data[13] = ftransforms[61];
                                data[14] = ftransforms[62];
                                data[15] = ftransforms[63];
                                renderJob.draw = global.draw.d;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[4])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____pasted____qianShape_pasted____lambert4;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____pasted____qianShape_pasted____lambert4_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[64];
                                data[1] = ftransforms[65];
                                data[2] = ftransforms[66];
                                data[3] = ftransforms[67];
                                data[4] = ftransforms[68];
                                data[5] = ftransforms[69];
                                data[6] = ftransforms[70];
                                data[7] = ftransforms[71];
                                data[8] = ftransforms[72];
                                data[9] = ftransforms[73];
                                data[10] = ftransforms[74];
                                data[11] = ftransforms[75];
                                data[12] = ftransforms[76];
                                data[13] = ftransforms[77];
                                data[14] = ftransforms[78];
                                data[15] = ftransforms[79];
                                renderJob.draw = global.draw.c;
                                renderJob.instance = instance;
                            }
                        }
                        if (itransforms[5])
                        {
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface261Shape_pasted____pasted____lambert2;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface261Shape_pasted____pasted____lambert2_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[80];
                                data[1] = ftransforms[81];
                                data[2] = ftransforms[82];
                                data[3] = ftransforms[83];
                                data[4] = ftransforms[84];
                                data[5] = ftransforms[85];
                                data[6] = ftransforms[86];
                                data[7] = ftransforms[87];
                                data[8] = ftransforms[88];
                                data[9] = ftransforms[89];
                                data[10] = ftransforms[90];
                                data[11] = ftransforms[91];
                                data[12] = ftransforms[92];
                                data[13] = ftransforms[93];
                                data[14] = ftransforms[94];
                                data[15] = ftransforms[95];
                                renderJob.draw = global.draw.g;
                                renderJob.instance = instance;
                            }
                            if (jobIt != jobEnd)
                            {
                                var shader = instance.shaders.m_pasted____polySurface261Shape_pasted____pasted____phong1;
                                var renderJob;
                                renderJob = jobEnd;
                                jobEnd = jobEnd.p;
                                renderJob.next = shader.renderJobs;
                                shader.renderJobs = renderJob;
                                renderJob.render = global.render.m_pasted____polySurface261Shape_pasted____pasted____phong1_5;
                                var data = renderJob.data;
                                data[0] = ftransforms[80];
                                data[1] = ftransforms[81];
                                data[2] = ftransforms[82];
                                data[3] = ftransforms[83];
                                data[4] = ftransforms[84];
                                data[5] = ftransforms[85];
                                data[6] = ftransforms[86];
                                data[7] = ftransforms[87];
                                data[8] = ftransforms[88];
                                data[9] = ftransforms[89];
                                data[10] = ftransforms[90];
                                data[11] = ftransforms[91];
                                data[12] = ftransforms[92];
                                data[13] = ftransforms[93];
                                data[14] = ftransforms[94];
                                data[15] = ftransforms[95];
                                renderJob.draw = global.draw.f;
                                renderJob.instance = instance;
                            }
                        }
                        renderQueues.begin = jobIt;
                        var shader = global.shaders.m_polySurface12Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface12Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface12Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(2);
                        gl.enableVertexAttribArray(3);
                        gl.enableVertexAttribArray(4);
                        var current = instance.shaders.m_polySurface12Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_polySurface8Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface8Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface8Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(5);
                        gl.enableVertexAttribArray(6);
                        gl.enableVertexAttribArray(7);
                        var current = instance.shaders.m_polySurface8Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____pasted____qianShape_pasted____lambert4;
                        var shader = global.shaders.m_pasted____pasted____qianShape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____pasted____qianShape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.disableVertexAttribArray(7);
                        gl.disableVertexAttribArray(6);
                        var current = instance.shaders.m_pasted____pasted____qianShape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_polySurface11Shape_pasted____lambert4;
                        var shader = global.shaders.m_polySurface11Shape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_polySurface11Shape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.disableVertexAttribArray(5);
                        var current = instance.shaders.m_polySurface11Shape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____pasted____qianShape_pasted____lambert4;
                        var shader = global.shaders.m_pasted____pasted____qianShape_pasted____lambert4;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____qianShape_pasted____lambert4.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(5);
                        var current = instance.shaders.m_pasted____qianShape_pasted____lambert4.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        var shader = global.shaders.m_pasted____polySurface261Shape_pasted____pasted____phong1;
                        var shader = global.shaders.m_pasted____polySurface261Shape_pasted____pasted____phong1;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface261Shape_pasted____pasted____phong1.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(6);
                        var current = instance.shaders.m_pasted____polySurface261Shape_pasted____pasted____phong1.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        var shader = global.shaders.m_pasted____polySurface261Shape_pasted____pasted____lambert2;
                        var shader = global.shaders.m_pasted____polySurface261Shape_pasted____pasted____lambert2;
                        gl.useProgram(shader.program);
                        var uniform = instance.shaders.m_pasted____polySurface261Shape_pasted____pasted____lambert2.uniform;
                        gl.uniform4fv(shader._b, uniform._b);
                        gl.bindTexture(gl.TEXTURE_2D, uniform._c);
                        gl.enable(gl.CULL_FACE);
                        gl.enableVertexAttribArray(7);
                        var current = instance.shaders.m_pasted____polySurface261Shape_pasted____pasted____lambert2.renderJobs;
                        while (current)
                        {
                            current.render(current);
                            current = current.next;
                        }
                        gl.bindTexture(gl.TEXTURE_2D, null);
                        gl.disableVertexAttribArray(7);
                        gl.disableVertexAttribArray(6);
                        gl.disableVertexAttribArray(5);
                        gl.disableVertexAttribArray(4);
                        gl.disableVertexAttribArray(3);
                        gl.disableVertexAttribArray(2);
                    };

                    var fstate = instance.fstate;
                    var ostate = instance.ostate;

                    return instance;
                },

                doneInstance: function(instance)
                {
                },

                sequence: 0,

                attributes:
                {
                    "time": {t: 1, b: 0, e: 1}
                },

                textureBindings:
                [
                    {n: "gold2", b: 0},
                    {n: "j", b: 1}
                ],

                objects:
                {
                    "pasted__pasted__qianShape[0]": 4,
                    "pasted__polySurface261Shape[0]": 5,
                    "pasted__qianShape[0]": 3,
                    "polySurface11Shape[0]": 1,
                    "polySurface12Shape[0]": 0,
                    "polySurface8Shape[0]": 2
                }

            }

        },

        numFiles: 3,
        check: function (){
            return 0;
        }
    };
    return s;
}

M5.modelName = "model_five";
M5.startTime = 0.041666666666666664;
M5.endTime = 8.3333333333333339;